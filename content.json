{"meta":{"title":"Hazel Wu | 22'mm","subtitle":null,"description":"在開發戰場上混亂之餘，做的功課隨手寫下並commit，於是有了這裡 22 ‘mm","author":"Hazel Wu","url":"http://wualnz.com","root":"/"},"pages":[{"title":"關於 HAZEL","date":"2021-12-22T03:26:58.462Z","updated":"2021-12-22T03:26:58.462Z","comments":false,"path":"about/index.html","permalink":"http://wualnz.com/about/index.html","excerpt":"","text":"堅信著所有的學習都是為了讓你在對的時間點作出對的選擇。幾年前從非本科系成功轉職前端，職業是前端工程師。喜歡分享知識幫助別人，在這裡與你分享技術上開發的坑，如果有幫助到你，我很榮幸 了解更多"},{"title":"","date":"2021-12-22T03:26:58.575Z","updated":"2021-12-22T03:26:58.575Z","comments":false,"path":"js/duration.js","permalink":"http://wualnz.com/js/duration.js","excerpt":"","text":"!(function () { /** 计时起始时间，自行修改 **/ var start = new Date(\"2020/01/01 00:00:00\"); function update() { var now = new Date(); now.setTime(now.getTime() + 250); days = (now - start) / 1000 / 60 / 60 / 24; dnum = Math.floor(days); hours = (now - start) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours); if (String(hnum).length === 1) { hnum = \"0\" + hnum; } minutes = (now - start) / 1000 / 60 - (24 * 60 * dnum) - (60 * hnum); mnum = Math.floor(minutes); if (String(mnum).length === 1) { mnum = \"0\" + mnum; } seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum); snum = Math.round(seconds); if (String(snum).length === 1) { snum = \"0\" + snum; } document.getElementById(\"timeDate\").innerHTML = \"本站安全運行了&nbsp\" + dnum + \"&nbsp天\"; document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小時&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\"; } update(); setInterval(update, 1000); })();"},{"title":"Project","date":"2021-12-22T03:26:58.575Z","updated":"2021-12-22T03:26:58.575Z","comments":false,"path":"project/index.html","permalink":"http://wualnz.com/project/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue使用 Lodash Throttle，動態設定秒數","slug":"Vue使用Lodash-Throttle","date":"2022-02-07T02:37:40.000Z","updated":"2022-02-07T03:35:23.717Z","comments":true,"path":"/Vue使用Lodash-Throttle/","link":"","permalink":"http://wualnz.com/Vue%E4%BD%BF%E7%94%A8Lodash-Throttle/","excerpt":"","text":"需求接到一個需求，請求 API 取得延遲秒數，也就是說延遲秒數是動態設置的。再開始設定像是註冊、登入等按鈕點擊後需要請求 API，用 Lodash 的 throttle 函式來延遲請求 常見寫法在實作這個需求時有卡住一下，大部分的寫法都是像這樣1234567891011&lt;template&gt;&lt;button @click=&quot;onSubmit&quot;&gt;送出&lt;/button&gt;&lt;/template&gt;export default &#123; methods: &#123; onSubmit: _.throttle(function () &#123; // ...執行某些事 &#125;, 2000), &#125;&#125;秒數皆是設定靜態，並不符合我的需求。但將 2000 取代成 this.click_interval，會發生錯誤，無法找到 this，如下範例1234567891011&lt;template&gt;&lt;button @click=&quot;onSubmit&quot;&gt;送出&lt;/button&gt;&lt;/template&gt;export default &#123; methods: &#123; onSubmit: _.throttle(function () &#123; // ...執行某些事 &#125;, this.settings.click_interval, // 無法執行，會找不到 this &#125;&#125; 解決方案最後嘗試了很久，要改為在生命週期宣告一個變數並用 function 儲存進去，這樣的寫法才能帶入動態秒數從 API 取得的秒數，我儲存在 vuex getters 裡，getters.settings.click_interval methods 宣告 debouncer function，並什麼都不寫 宣告原本欲要請求 API 的方法 this.clickToTransferIn()，動態帶入 API取得的 click_interval，並在 function 裡執行 clickToTransferIn 在生命週期 created 執行 this.debouncer，並用 _.throttle 1234567891011121314151617181920212223242526import &#123; throttle &#125; from &#x27;lodash&#x27;import &#123; mapGetters &#125; from &#x27;vuex&#x27;export default &#123; created() &#123; // 延遲按鈕：一鍵轉入 this.debouncer = _.throttle(function(code, name) &#123; this.clickToTransferIn(code, name) &#125;, this.settings.click_interval * 1000 || 2000) &#125;, computed: &#123; ...mapGetters([&#x27;settings&#x27;]), &#125;, methods: &#123; // 不可刪除，用於的按鈕延遲功能 debouncer() &#123;&#125;, // 請求 API async clickToTransferIn(code, name) &#123; // ... 請求 API await requestTransferInAPI(params) &#125; &#125;&#125;","categories":[{"name":"vue","slug":"vue","permalink":"http://wualnz.com/categories/vue/"},{"name":"lodash","slug":"vue/lodash","permalink":"http://wualnz.com/categories/vue/lodash/"}],"tags":[]},{"title":"Vue串接LineNotify","slug":"LineNotify串接","date":"2022-02-05T01:22:39.000Z","updated":"2022-02-07T03:20:17.271Z","comments":true,"path":"/LineNotify串接/","link":"","permalink":"http://wualnz.com/LineNotify%E4%B8%B2%E6%8E%A5/","excerpt":"","text":"前言此篇介紹怎麼串接 Line Notify，使用 Vue 來示範，也會寫下我踩過的坑紀錄下來，因為那些坑搞了我快兩個小時…串接 Line Notify 總共會打三隻 API，接下來的 API 路徑會省略 https://notify-api.line.me，直接說是 oauth/authorize 或 /oauth/token，以方便閱讀。 GET https://notify-bot.line.me/oauth/authorize POST https://notify-bot.line.me/oauth/token POST https://notify-api.line.me/api/notify 步驟一：請求 authorize第一步驟 GET 請求 /oauth/authorize，請求參數 client_id 可從 Line Notify 後台取得較為敏感的參數可以設定在 .env，透過 process.env 來取得由於是在 vue 設定，環境變數開頭必須以 VUE_APP 來命名，否則會抓取不到 較為特別的是直接設定 window.open 來開啟連結，需另外設定 redirect_uri 的網址當使用者成功登入後，Line 會將使用者跳轉回來的目標網址，順利請求成功會回傳 code、state 踩到的坑：redirect_uri 不可設定 line、notify 等相關單字，會導致導向回來變成 404 Not Found的畫面我的路由都設定為 localhost:9527/line 或 localhost:9527/notify，由於這個關係（腦袋單字不多ORZ）我卡住了兩個小時……最後導向回來的 redirect_uri 設定為 localhost:9527/auth-line，才成功，希望看了這篇文章的讀者可以避免這個坑 1234567891011121314151617181920212223242526&lt;template&gt; &lt;v-btn v-if=&quot;!isLogin&quot; elevation=&quot;2&quot; @click=&quot;loginEvent()&quot;&gt;Line登入&lt;/v-btn&gt;&lt;/template&gt;export default &#123; methods: &#123; // 請求登入授權 login() &#123; // 必填 let loginUrl = &#x27;https://notify-bot.line.me/oauth/authorize?&#x27; loginUrl += &#x27;response_type=code&#x27; loginUrl += `&amp;client_id=$&#123;process.env.VUE_APP_LINE_CHANNEL_ID&#125;` loginUrl += `&amp;redirect_uri=$&#123;process.env.VUE_APP_LINE_REDIRECT_URL&#125;` // 要接收回傳訊息的網址 loginUrl += `&amp;state=$&#123;this.stateCode&#125;` loginUrl += &#x27;&amp;scope=openid%20profile&#x27; // 選填 loginUrl += &#x27;&amp;nonce=helloWorld&#x27; loginUrl += &#x27;&amp;prompt=consent&#x27; loginUrl += &#x27;&amp;max_age=3600&#x27; loginUrl += &#x27;&amp;ui_locales=zh-TW&#x27; loginUrl += &#x27;&amp;bot_prompt=normal&#x27; window.open(loginUrl, &#x27;_self&#x27;) // 轉跳到該網址 &#125; &#125;&#125; 步驟二：請求 token在上一個步驟時請求成功會順利拿到 code，需要將此參數也放入進去第二步驟 POST 請求 /oauth/token，比較需要注意的是 content-type 需要設定為 application/x-www-form-urlencoded 我使用的是 axios，header application/x-www-form-urlencoded 格式需要另外處理axios 數據都是 json 格式，要使用 application/x-www-form-urlencoded 格式要安裝 Qs 套件，用 Qs.stringify() 方法來轉換參數 安裝 Qs 1npm i qs --save 引用 Qs、使用方式 1234567import Qs from &#x27;qs&#x27;// 示範const params = Qs.stringify(&#123; name: &#x27;hazel&#x27;&#125;)console.log(params) 以上是 Qs 使用範例 繼續回到專案範例12345678const params = Qs.stringify(&#123; grant_type: &#x27;authorization_code&#x27;, code: this.query.code, redirect_uri: process.env.VUE_APP_LINE_REDIRECT_URL, client_id: process.env.VUE_APP_LINE_CHANNEL_ID, client_secret: process.env.VUE_APP_LINE_CHANNEL_SECRET,&#125;) Reference [axios] 處理 x-www-form-urlencoded 格式問題","categories":[{"name":"vue","slug":"vue","permalink":"http://wualnz.com/categories/vue/"}],"tags":[]},{"title":"架設Swagger在 nodejs express","slug":"架設Swagger","date":"2022-02-02T07:12:21.000Z","updated":"2022-02-02T08:32:20.642Z","comments":true,"path":"/架設Swagger/","link":"","permalink":"http://wualnz.com/%E6%9E%B6%E8%A8%ADSwagger/","excerpt":"","text":"開發環境採用 Nodejs 12.6.0 Express 框架 MacOS 我並未安裝 swagger-jsdoc，swagger-jsdoc是寫在註解內會自動產生 API 文件，但註解會越來越長，沒有很喜歡，只會另外用 swagger.yml 維護而已，相對簡單。 安裝1npm i swagger-ui-express --save app.js在 app.js 引入套件有分成 json、yml 的檔來撰寫 API 文件，以下會提供兩種範例，引入 yml 需要另外安裝 yamljs 套件 引入 json 方式123456const express = require(&#x27;express&#x27;)// Swaggerconst swaggerUi = require(&#x27;swagger-ui-express&#x27;);const swaggerDocument = require(&#x27;./swagger.json&#x27;);// Applicationconst app = express() 引入 yaml 方式在 src 根目錄建立 swagger.yml 檔，並用 npm install yamljs，才可引入 yml 檔1npm i yamljs --save引入 yaml123456const express = require(&#x27;express&#x27;)// Swaggerconst YAML = require(&#x27;yamljs&#x27;)const swaggerDocument = YAML.load(&#x27;./swagger.yml&#x27;)// Applicationconst app = express() 引入相關套件後，接著在 app.js 使用 app.use 方法，/apidoc 可改成你想要的路徑 123456// API Documentapp.use( &#x27;/apidoc&#x27;, swaggerUi.serve, swaggerUi.setup(swaggerDocument)); 接著重啟 server，如果 server 是在 localhost:3000，則 swagger api 網址是 localhost:3000/apidoc。個人較喜歡 yml 簡潔的模式，故引用的是 swagger.yml 完整程式碼12345678910111213const express = require(&#x27;express&#x27;)// Swaggerconst YAML = require(&#x27;yamljs&#x27;)const swaggerDocument = YAML.load(&#x27;./swagger.yml&#x27;)// Applicationconst app = express()// API Documentapp.use( &#x27;/apidoc&#x27;, swaggerUi.serve, swaggerUi.setup(swaggerDocument)); 範例檔以下提供簡易的 swagger.json、swagger.yaml 範例檔 123456789101112131415161718192021&#123; &quot;swagger&quot;: &quot;2.0&quot;, &quot;info&quot;: &#123; &quot;version&quot;: &quot;1.0.0&quot;, &quot;title&quot;: &quot;API 文件&quot;, &quot;description&quot;: &quot;API文件&quot;, &quot;license&quot;: &#123; &quot;name&quot;: &quot;MIT&quot;, &quot;url&quot;: &quot;https://opensource.org/licenses/MIT&quot; &#125; &#125;, &quot;host&quot;: &quot;localhost:10991&quot;, &quot;basePath&quot;: &quot;/&quot;, &quot;tags&quot;: [&#123; &quot;name&quot;: &quot;Users&quot;, &quot;description&quot;: &quot;API for users in the system&quot; &#125;], &quot;schemes&quot;: [&quot;http&quot;], &quot;consumes&quot;: [&quot;application/json&quot;], &quot;produces&quot;: [&quot;application/json&quot;]&#125; yml 範例檔123456789101112131415161718192021222324openapi: 3.0.0info: title: API 文件 description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML. version: 0.1.0servers: - url: http://api.example.com/v1 description: Optional server description, e.g. Main (production) server - url: http://staging-api.example.com description: Optional server description, e.g. Internal staging server for testingpaths: /users: get: summary: Returns a list of users. description: Optional extended description in CommonMark or HTML. responses: &#x27;200&#x27;: # status code description: A JSON array of user names content: application/json: schema: type: array items: type: string 客製化 CSSSwagger UI 也有提供客製化功能123456789101112const cssOptions = &#123; customCss: ` .topbar-wrapper img &#123;content:url(https://img.icons8.com/doodle/2x/-freelancefirm.png); width:50px; height:auto;&#125; .swagger-ui table &#123; margin-left: 20px; margin-top: 30px; &#125; .swagger-ui .model &#123; font-size: 14px; font-family: -apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,Roboto,&quot;Helvetica Neue&quot;,Arial,&quot;Noto Sans&quot;,&quot;Liberation Sans&quot;,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Noto Color Emoji&quot;; &#125; .swagger-ui .topbar &#123; background-color: #000000; border-bottom: 20px solid #5dc6d1; &#125;`, customSiteTitle: &quot;API文件 | Hazel&quot;&#125;;app.use(&#x27;/docs&#x27;, swaggerUi.serve, swaggerUi.setup(swaggerSpec, cssOptions)); 踩坑紀錄Hazel 專案設定 app.js 之外，另外建立了 server.js，主要是用來連接 mongoose 資料庫及啟動伺服器 app.listen，我用上述方法寫在 server.js 沒有成功，到 localhost/apidoc會顯示找不到路由，但將 code 引入到 app.js 就成功了…原因不得而知 Reference How to add Swagger UI to an existing Node.js and Express.js project 註解寫在Code內生成swagger UI 使用 Swagger 自動生成 API 文件","categories":[{"name":"swagger","slug":"swagger","permalink":"http://wualnz.com/categories/swagger/"},{"name":"express","slug":"swagger/express","permalink":"http://wualnz.com/categories/swagger/express/"}],"tags":[]},{"title":"nodejs-express-session登入機制","slug":"nodejs-express-session登入機制","date":"2022-02-01T12:46:15.000Z","updated":"2022-02-01T16:14:49.750Z","comments":true,"path":"/nodejs-express-session登入機制/","link":"","permalink":"http://wualnz.com/nodejs-express-session%E7%99%BB%E5%85%A5%E6%A9%9F%E5%88%B6/","excerpt":"","text":"安裝通常 exress 實作登入機制時都會使用知名的 express-session，按照下列指令來安裝套件1npm i express-session --save 設定 express-session在 express 專案的 app.js 引入 express-session 1const session = require(&#x27;express-session&#x27;) 並且用 app.use 來設定初始值 express-session 設定說明Cookie 存的是 session id ，而 session data 則存在 server secret：必填選項，存放在 cookie 的 session ID resave：每一次與使用者互動，是否強制保存 session 並更新到 session store 裡，預設是 true saveUninitialized強制將未初始化的 session 存回 session store。未初始化表示這個 session 是新的而且沒有被修改過，例如未登入的使用者的 session。設定 false 可避免存入太多空的 session 1234567// Cookie 存的是 session id，session data 存 serverapp.use(session(&#123; secret: &#x27;K,_r*p3h~7G&#125;hq]iL~#jIe7|DMB?E&#x27;, // 存放在 cookie 的 session id resave: false, // 是否強制保存 session，預設是 true saveUninitialized: true // session 還沒修改前是否存入 cookie，設定 false 可避免存入太多空的值&#125;))","categories":[{"name":"express","slug":"express","permalink":"http://wualnz.com/categories/express/"},{"name":"expresss-session","slug":"express/expresss-session","permalink":"http://wualnz.com/categories/express/expresss-session/"}],"tags":[]},{"title":"sequlize 筆記","slug":"sequlize產生種子檔seed","date":"2022-01-31T10:15:38.000Z","updated":"2022-02-01T13:57:23.617Z","comments":true,"path":"/sequlize產生種子檔seed/","link":"","permalink":"http://wualnz.com/sequlize%E7%94%A2%E7%94%9F%E7%A8%AE%E5%AD%90%E6%AA%94seed/","excerpt":"","text":"初始化使用 Sequelize CLI 時，會用 npx sequelize init 完成初始化12$ npm install --save-dev sequelize-cli$ npx sequelize init為什麼會使用 npx 來呼叫，而非 npm？如果我們在專案內呼叫 sequelize，會從專案內的 node_modules 裡的 .bin 資料夾找 sequelie 相關執行檔，也就是 node_modules/.bin/sequelize 安裝 npm 5.2版開始，也會附帶安裝 npx 工具包，npx的功用是「自動定位套件真正的安裝路徑」。每個人電腦環境設定不同，有些人設定套件執行檔並非安裝在 node_modules/.bin上，在執行 sequelize 前必須先搞懂套件安裝的路徑在哪裡，才能去呼叫，因此才有了 npx 的工具存在。以下介紹的指令皆會由 npx 來呼叫 Seequelize 指令123456789101112131415161718192021# 安裝 sequelize-cli$ npm install --save-dev sequelize-cli# 建立 User Model，屬性 firstName, lastName, email$ npx sequelize-cli model:generate --name User --attributes firstName:string, lastName:string, email:string# 跑 Migration$ npx sequelize-cli db:migrate# Migration 倒退$ npx sequelize-cli db:migrate:undo# Migration 退回指定版本$ npx sequelize-cli db:migrate:undo:all --to XXXXXXXXXXXXXX-create-posts.js# 產生 Seed$ npx sequelize-cli seed:generate --name default-data# 執行所有 Seed 檔$ npx sequelize db:seed:all# 加上 Undo 執行 Down 動作，復原$ npx sequelize db:seed:undo:all# Undo 復原取消產生某一個 Seed$ npx sequelize-cli db:seed:undo --seed name-of-seed-as-in-data Model Querying 查詢123456789101112131415161718// 建立一筆資料const hazel = await User.create(&#123; firstName: &#x27;Hazel&#x27;, lastName: &#x27;Wu&#x27; &#125;)// 查詢多筆資料，raw: true, nest: true，將多筆資料轉換物件Todo.findAll(&#123; raw: true, nest: true&#125;)// 查詢特定屬性，等同於 SELECT firstName from ...Model.findAll(&#123; attributes: [&#x27;firstName&#x27;] &#125;)// 查詢指令並加上 WHERE，等同於 SELECT * FROM user WHERE userId = 2;Model.findAll(&#123; where: userId: 2 &#125;)// 用條件查詢一筆資料Model.findOne(&#123; where: &#123; email &#125; &#125;)// 用 id 查詢一筆資料Model.findByPk() Reference 官方文件 Model Querying - Finders 阮一峰-npx 使用教程","categories":[{"name":"sequlize","slug":"sequlize","permalink":"http://wualnz.com/categories/sequlize/"}],"tags":[]},{"title":"nodejs-建立資料庫mysql連線","slug":"nodejs-建立資料庫mysql連線","date":"2022-01-31T04:57:23.000Z","updated":"2022-02-01T12:45:52.624Z","comments":true,"path":"/nodejs-建立資料庫mysql連線/","link":"","permalink":"http://wualnz.com/nodejs-%E5%BB%BA%E7%AB%8B%E8%B3%87%E6%96%99%E5%BA%ABmysql%E9%80%A3%E7%B7%9A/","excerpt":"","text":"建立資料庫連線 MySQL 建立 Todo 資料庫 Express 設定資料庫連線 安裝 mysql2、sequelie、sequelie-cli 初始化 設定資料庫名稱、密碼 設定 Model Todo Model User Model 設定 Todo &amp; User 關聯 完成註冊功能 MySQL 建立 Todo 資料庫123drop database if exists todo;create todo;use todo; 輸入指令後，在MySQL WorkBench 按「⚡️」執行 Express 設定資料庫連線安裝相關的套件12npm install mysql2 sequelize sequelize-clinpm run dev 初始化 sequelize 腳本執行初始化指令會自動幫你建立檔案1npx sequelize init 順利設定成功，應該會出現下面的訊息123456Sequelize CLI [Node: 12.6.0, CLI: 6.4.1, ORM: 6.15.0]Created &quot;config/config.json&quot;Successfully created models folder at &quot;/Users/hazel/vhost/todo/models&quot;.Successfully created migrations folder at &quot;/Users/hazel/vhost/todo/migrations&quot;.Successfully created seeders folder at &quot;/Users/hazel/vhost/todo/seeders&quot;.建立了哪些呢 config/config.json，資料庫的設定檔 todo/models，Model的設定檔 todo/migrations，資料庫遷移檔，紀錄資料庫新增、修改哪些欄位，以和其他協作成員同步 todo/seeders，資料庫種子檔，用來生成資料用 自動生成的 config.json 檔其中有三個區塊：development、test、production，各有不同的用途 產生 Todo Model設定Todo Modal name String 任務名稱 isDone Boolean 是否完成 1npx sequelize-cli model:generate --name Todo --attributes name:string,isDone:boolean 輸入完後終端機會返回以下訊息1234Sequelize CLI [Node: 12.6.0, CLI: 6.4.1, ORM: 6.15.0]New model was created at /Users/hazel/vhost/todo/models/todo.js .New migration was created at /Users/hazel/vhost/todo/migrations/20220131073523-create-todo.js .自動建立了以下檔案 models/todo.js Todo 的 Model 設定檔，可定義資料欄位、資料關聯 todo/migrations/20220131073523-create-todo.js 資料庫遷移紀錄，可當作是Git版的資料庫，所有版本紀錄都會在 migrations 資料夾內 小知識：Migration 用處當你在開發新功能，在 User 資料表多新增了一個欄位叫「memo」，通知團隊成員說你新增了 memo 欄位，請大家同步其他團隊成員在自己的本地環境也必須手動新增 User memo 的欄位這樣團隊們才可以跑本地環境時不會因為自己新加上的功能，但自己本地資料庫沒有那個欄位，導致程式壞掉 只要有 migration 就不必這麼麻煩Migration 是資料庫的版本紀錄，只需要跑一個指令，會自動將版本紀錄變更的欄位同步到你的資料庫 1npx sequelize-cli db:migrate 成功後會自動產生 Todo 資料表及建立欄位。如果沒有成功，表示資料庫連線並未設立完全12345678$ npx sequelize db:migrateSequelize CLI [Node: 12.6.0, CLI: 6.4.1, ORM: 6.15.0]Loaded configuration file &quot;config/config.json&quot;.Using environment &quot;development&quot;.== 20220131073523-create-todo: migrating ========= 20220131073523-create-todo: migrated (0.019s) 命名規範Todo、todos？傻傻分不清？在 MVC 的設計裡，Todo model 的變數命名皆是用單數大寫「Todo」而在 MySQL 的指令裡，則會用複數小寫 todos 來代表資料表的名稱 Sqeuelize MigrationMigration 的概念就是資料庫的版本控制，當我們改資料庫的 Schema時都會去新增一個 migration 檔案Sequeuelize會追蹤哪些 migration 已經合併，哪些還沒有使用過，並根據定義的 migration 去修改資料庫的欄位，又稱之為資料庫的版本控制。 一個 migration 一生中只會執行一次，migration 代表著每次對資料庫的修改紀錄，如果改錯了就再新增一次 migration 覆蓋過去即可。 用指令產生的檔案稱 migration，用動作來同步資料庫的 Schema 稱 migrate，一個名詞一個動詞，不要搞混。 資料遷移通常會使用在初始化專案或團隊改動了資料庫 Schema，便會跑 migrate 來同步1npx sequelize db:migrate 查看現有版本如果不清楚現在資料庫現在版本是多少，可以藉由這個指令更清楚了解現在在哪一個版本1npx sequelize db:migrate:status 還原到上一個版本1npx sequelize db:migrate:undo 還原到最初始版本等同於作業系統重灌的概念1npx sequelize db:migrate:undo:all 還原到特定版本等同於git checkout [commitID] 或是 git reset --mixed [commitID]1npx sequelize db:migrate:undo:all --to XXXXXXX-create-user.js 設定關聯 Model 一個 User 擁有多個 Todo 一個 Todo 屬於特定的 User 找到 assoicate的 function，這個區域是專門寫關聯的 model/user.js1234static associate(models) &#123; User.hasMany(models.Todo)&#125;model/todo.js123static associate(models) &#123; Todo.belongsTo(models.User)&#125; 建立關聯命名清楚一點，加入「xxx」到「哪張表」例如：我這次 migration 將 userId 欄位新增到 Todo 資料表，就會變成add-userId-to-todo，藉由黨名可以非常清楚這次遷移改變了什麼1npx sequelize migration:generate --name add-userId-to-todo 開啟剛產生的 add-userId-to-todo 檔案，加上關聯設定定義 reference，讓 Todos 欄位新增 UserId，且是來自 User 資料表裡的 ID1234references: &#123; model: &#x27;Users&#x27;, key: &#x27;id&#x27;&#125;完整程式碼12345678910111213141516module.exports = &#123; async up(queryInterface, Sequelize) &#123; return queryInterface.addColumn(&#x27;Todos&#x27;, &#x27;UserId&#x27;, &#123; type: Sequelize.INTEGER, allowNull: false, references: &#123; model: &#x27;Users&#x27;, key: &#x27;id&#x27; &#125; &#125;) &#125;, async down(queryInterface, Sequelize) &#123; return queryInterface.removeColumn(&#x27;Todos&#x27;, &#x27;UserId&#x27;) &#125;&#125;; addColumn：新增欄位，通常定義在 up 上 removeColumn：移除欄位 Reference 初始化 Sequelize","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://wualnz.com/categories/nodejs/"},{"name":"sequelie","slug":"nodejs/sequelie","permalink":"http://wualnz.com/categories/nodejs/sequelie/"},{"name":"mysql","slug":"nodejs/sequelie/mysql","permalink":"http://wualnz.com/categories/nodejs/sequelie/mysql/"}],"tags":[]},{"title":"使用MySQL Workbench","slug":"使用MySQL-Workbench","date":"2022-01-31T02:08:06.000Z","updated":"2022-01-31T04:14:38.478Z","comments":true,"path":"/使用MySQL-Workbench/","link":"","permalink":"http://wualnz.com/%E4%BD%BF%E7%94%A8MySQL-Workbench/","excerpt":"","text":"MySQL 簡易的 SQL 練習 新增名為 menu 的資料庫 在 menu 新增一個叫 type 的資料表，並且定義 schema:id、name，寫進四種資料，漢堡、吐司、蛋餅、乳酪餅 下載 MySQL WorkBenchMySQL WorkBench 是一套 MYSQL UI 軟體，方便我們建立資料庫、查詢資料庫的內容、將資料新增至資料庫由於 Hazel 是使用 Mac x86系統，並非m1晶片，故選擇「macOS 11 (x86, 64-bit)」下載 MacOS 官方下載：連結 設定 localhost 本地資料庫 Connection Name: 任意取名，我取名叫 local Connection Method: Standard(TCP/IP) Hostname: 127.0.0.1 Port: 3006 Username: root Password: 我設定 password，安裝mysql時初始化密碼填什麼這邊就填什麼 建立資料庫建立資料庫前，按照習慣來說會先確定是否已存在同名的資料庫，如果有，則會先刪除資料庫1drop database if exists menus;再開始建立新的資料庫 menus，並使用 menus 資料庫12create database menus;use menus; 建立 Table我們將建立一個 type 的類型資料表，裡面會存放早餐種類設定的屬性會有 id，並設定自動累加，id1、id2、…每新增一筆資料id會自動增加，auto_increment name，名稱，不允許空值的字串 NOT NULL 以id作為不重複的主鍵 primary key12345create table `type` ( `id` INT( 11 ) auto_increment, `name` VARCHAR( 255 ) NOT NULL, primary key (`id`)) 插入資料12345use menus;insert into `type` (name) values (&#x27;hamburger&#x27;);insert into `type` (name) values (&#x27;toast&#x27;);insert into `type` (name) values (&#x27;chinese omelet&#x27;);insert into `type` (name) values (&#x27;cheese flatbread&#x27;); 最後插入完資料後我們可以下 select 指令來查看成果1select * from `menus`; 完整 SQL123456789101112131415drop database if exists menus;create database menus;use menus;create table `types` ( `id` INT(11) auto_increment, `name` VARCHAR( 255 ) NOT NULL, primary key (`id`));insert into `types` (name) values (&#x27;egg&#x27;);insert into `types` (name) values (&#x27;hamburger&#x27;);SELECT * FROM menus.types; 新手知識 SQL 指令每一行必須要有冒號「;」做為結尾 SQL 非「case sensitive」語言，輸入大小寫皆視為相同，如果要特別區分大小寫，需要使用反引號 `，這樣 SQL 才會將反引號的內容視為「字串」，而非動作的關鍵字 MYSQL WorkBench 使用指南","categories":[{"name":"mysql","slug":"mysql","permalink":"http://wualnz.com/categories/mysql/"}],"tags":[]},{"title":"Vue3 基本用法","slug":"vue3基本用法","date":"2022-01-30T11:29:20.000Z","updated":"2022-01-30T13:59:30.730Z","comments":true,"path":"/vue3基本用法/","link":"","permalink":"http://wualnz.com/vue3%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/","excerpt":"","text":"此篇是寫下關於 Vue3 Composition API 基本用法 定義資料在 vue2 中定義資料總是在 data() 去宣告，而在 vue3 則不同，有 ref、reactive 的方式 Reactive 宣告的值一定要是物件，不可是純值 需使用 const，不可用 let，否則會失去雙向綁定 Ref Vue 自行定義的屬性 和 Reactive 相同，需使用 const，不可用 let，否則會失去雙向綁定 宣告的值不限定任何型別，可以是純值 在實戰中 ref 會比 reactive 好用，且也是比較不會出錯的方式不管是 ref、reactive 都要用 const 做宣告，才不會失去雙向綁定 Vue2 範例傳統在 Vue2 方式宣告 num12345678910111213&lt;template&gt; &lt;div&gt; &#123;&#123; num &#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data: (() =&gt; &#123; num: 1 &#125;)&#125;&lt;/script&gt; Vue3 範例在 Vue3 則是要另外引入 ref 或 reactive，全部都在 setup() 裡完成，並在 return 時返回曾宣告的資料讀取資料或設定資料都要加上 value，例如：num.value、person.value 12345678910111213141516171819202122232425&lt;template&gt; &lt;div&gt; &#123;&#123; num &#125;&#125; &#123;&#123; person &#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; setup() &#123; const num = ref(1) console.log(num.value) num.value = 17 const person = ref(&#123; name: &#x27;Hazel&#x27; &#125;) return &#123; num, person &#125; &#125;&#125;&lt;/script&gt; props 接收及傳遞在 Vue2 中，我們通常會用 props 接收來自父元件的參數12345678910111213141516171819202122232425262728// 父元件&lt;template&gt; &lt;children :text=&quot;text&quot; /&gt;&lt;/template&gt;&lt;script&gt; export default &#123; text: &#x27;傳給子元件&#x27; &#125;&lt;/script&gt;// 子元件&lt;template&gt; &lt;div&gt; 子元件 &#123;&#123; text &#125;&#125; &lt;/div&gt;&lt;/template&gt;export default &#123; props: &#123; text: &#123; type: String, required: true, default: &#x27;&#x27; &#125; &#125;&#125;而在 Vue3，改為 setup寫法後，setup可接收 props 值、context 值 12345export default &#123; setup(props) &#123; console.log(props.text) &#125;&#125; 唯一要注意的是，props值不可直接寫成 ES6 解構，如果要使用解構 prop，必須用 toRefs 123456import &#123; toRefs &#125; from &#x27;vuexsetup(props) &#123; const &#123; text &#125; = toRefs(props) console.log(text.value)&#125; 使用 emit子元件呼叫父元件事件，都會使用到 emit Vue2 範例1234567891011121314151617181920212223242526272829&lt;template&gt; &lt;div&gt; 子元件 &lt;button @click=&quot;emit(&#x27;emitToParent&#x27;, 123)&quot;&gt; 範例emit按鈕 &lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;template&gt; // 父元件 &lt;div&gt; &lt;children @emitToParent=&quot;emitToParent&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;// 父元件export default &#123; components: &#123; children &#125;, methods: &#123; emitToParent(value) &#123; console.log(&#x27;父層接收到子層資料&#x27;, value) &#125; &#125;&#125;&lt;/script&gt; Vue3 範例在 setup 引入 context.emit，也可以用解構 &#123; emit &#125;來使用 emitsetup 接收兩個參數，第一個參數是 props，第二個參數則是 context 子元件範例：1234567891011121314151617181920212223242526272829303132333435363738394041&lt;template&gt; &lt;div&gt; 子元件 &lt;button @click=&quot;emitToParent&quot;&gt; 範例emit按鈕 &lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;template&gt; &lt;div&gt; 父元件 &lt;children @emitToParent=&quot;getData&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;// 子元件export default &#123; setup(props, &#123; emit &#125;) &#123; console.log(emit) function emitToParent() &#123; emit(&#x27;emitToParent&#x27;, &#x27;子元件 -&gt; 父元件資料&#x27;) &#125; &#125;&#125;// 父元件export default &#123; components: &#123; children &#125;, setup() &#123; function getData(text) &#123; console.log(text) // 子元件 -&gt; 父元件資料 &#125; return &#123; getData &#125; &#125;&#125;&lt;/script&gt; $ref 取得 DOM 物件在 Vue2 中呼叫 DOM 物件用法 設定：&lt;button ref=&quot;btn&quot; /&gt; 讀取：this.$refs[&#39;btn&#39;] 123456789&lt;template&gt; &lt;button ref=&quot;btn&quot;&gt;示範按鈕&lt;/button&gt;&lt;/template&gt;export default &#123; mounted() &#123; console.log(this.$refs.btn) &#125;&#125; 而在 Vue3 則是改為以下寫法設定和 Vue2相同，一樣在 HTML 標籤上加入 ref=”btn”另外要引入 ref、onMounted，最後必須 return btn 設定：&lt;button ref=&quot;btn&quot; /&gt; 讀取：btn.value12345678910111213141516171819&lt;template&gt; &lt;button ref=&quot;btn&quot;&gt;示範按鈕&lt;/button&gt;&lt;/template&gt;// 宣告 ref, onMountedconst &#123; ref, onMounted &#125; = Vueexport default &#123; setup() &#123; const btn = ref(null) // undefined onMounted(() =&gt; &#123; console.log(btn.value) &#125;) return &#123; btn &#125; &#125;&#125; Provider、Inject 方法跨元件層級的資料傳遞 Provider假設是在最外層，可以運用 Provider 方法直接將資料傳到最內層在父層使用 provide 傳出去，在子層用 inject 接收 inject: [&#39;user&#39;] 傳遞1provide(&#x27;user&#x27;, user)接收1inject(&#x27;user&#x27;) Vue2 寫法子層1234567891011121314&lt;script&gt;const children = &#123; inject: [&#x27;user&#x27;], template: `&lt;div&gt; &#123;&#123; user.name &#125;&#125; &#123;&#123; user.uuid &#125;&#125;&lt;/div&gt;`, created() &#123; console.log(this.user) this.user.name = &#x27;Hazel&#x27; &#125;&#125;&lt;/script&gt;最外層12345678910111213141516171819&lt;script&gt;export default &#123; components: &#123; children &#125;, data() &#123; return &#123; user: &#123; name: &#x27;Ellie&#x27;, uuid: 1348560 &#125; &#125; &#125;, provide() &#123; // provide function 也必須用 return return &#123; user: this.user &#125; &#125;&#125;&lt;/script&gt; Vue3 範例children 子元件，引入 inject 來接收 user 參數子元件使用，如果會改變 user 值時，會避免影響到父層，建議使用淺層或深層拷貝方式處理 1234567891011const &#123; inject &#125; from Vueexport default &#123; setup(props) &#123; const person = inject(&#x27;user&#x27;) return &#123; person &#125; &#125;&#125; 父元件引入 provide，傳遞 user 物件123456789101112131415161718const &#123; ref, provide &#125; = Vueexport default &#123; components: &#123; children &#125;, setup() &#123; const user = ref(&#123; name: &#x27;Ellie&#x27;, uuid: 1348560 &#125;) // 自定義名稱，要發送的資料內容 provide(&#x27;user&#x27;, user) return &#123; user &#125; &#125;&#125; Watch引入 watch，在 setup 設定 watch function 基本用法123456789const &#123; watch &#125; = Vueexport default &#123; setup() &#123; watch(監聽的變數, (newValue, oldValue) =&gt; &#123; ... &#125;) &#125;&#125; 深層監聽深層監聽物件屬性，加上 deep: true123456watch(() =&gt; watchObject.value.skill, (newVal, oldVal) =&gt; &#123; console.log(newVal, oldVal)&#125;)watch(watchObject, (newVal, oldVal) =&gt; &#123; console.log(newVal, oldVal)&#125;, &#123; deep: true &#125;) 多值監聽需要監聽多個變數，可以用陣列監聽。但如果在同一個 function 裡同時改變這些監聽來源，watch 只會執行一次123456789101112131415const firstName = ref(&#x27;&#x27;)const lastName = ref(&#x27;&#x27;)watch([firstName, lastName], (newValues, preValues) =&gt; &#123; console.log(newValues, preValues)&#125;)// 若監聽是深度嵌套对象或数组中的屬性改變，要加上 deepwatch([firstName, lastName], (newValues, preValues) =&gt; &#123; console.log(newValues, preValues) &#125;, &#123; deep: true &#125;)firstName.value = &#x27;Hazel&#x27; // Logs: [&#x27;Hazel&#x27;, &#x27;&#x27;] [&#x27;&#x27;, &#x27;&#x27;]lastName.value = &#x27;Wu&#x27; // Logs: [&#x27;Hazel&#x27;, &#x27;Wu&#x27;] [&#x27;Hazel&#x27;, &#x27;&#x27;] 1234567891011121314151617181920212223242526272829303132const &#123; ref, watch &#125; = Vueexport default &#123; setup(props) &#123; // 文字 const name = ref(&#x27;Hazel&#x27;) watch(name, (newValue, oldValue) =&gt; &#123; console.log(`新：$&#123;newValue&#125;，舊：$&#123;oldValue&#125;`) &#125;) // 物件 const watchObject = ref(&#123; name: &#x27;Hazel&#x27;, skill: [ &#x27;js&#x27;, &#x27;vue&#x27;, &#x27;nodejs&#x27; ] &#125;) // 物件深層監聽，需要加上箭頭函示 watch(() =&gt; watchObject.value.skill, (newValue, oldValue) =&gt; &#123; console.log(`新：$&#123;newValue&#125;，舊：$&#123;oldValue&#125;`) &#125;) return &#123; name, watchObject &#125; &#125;&#125; WatchEffectWatchEffect 是 Vue3 獨有的，和 Watch 有些不同 WatchEffect 使用上較隨性，不需要指定需要監聽的變數。但 Watch 需要指定監聽哪個變數 WatchEffect 可以被停止，但 Watch 不能 WatchEffect 無法取得前一個值，但 Watch 可以取得被修改前的值 基本用法12345678910111213import &#123; watchEffect &#125; from Vueexport default &#123; setup() &#123; const num = ref(0) const name = ref(&#x27;Hazel&#x27;) watchEffect(() =&gt; &#123; console.log(num) console.log(name) &#125;) &#125;&#125; WatchEffect 停止宣告變數 stopWatchEffect 並執行 watchEffect function只要執行 stopWatchEffect 監聽便會停止123456const stopWatchEffect = watchEffect(() =&gt; &#123; num.value++ console.log(num) if (num.value === 5) stopWatchEffect()&#125;)","categories":[{"name":"vue3","slug":"vue3","permalink":"http://wualnz.com/categories/vue3/"}],"tags":[]},{"title":"JS常用正則","slug":"JS常用正則","date":"2021-12-28T02:43:15.000Z","updated":"2021-12-28T02:44:15.161Z","comments":true,"path":"/JS常用正則/","link":"","permalink":"http://wualnz.com/JS%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%89%87/","excerpt":"","text":"驗證金額格式：正整數、小數點不超過兩位1const amountReg = /^(([1-9][0-9]*)|(([0]\\.\\d&#123;1,2&#125;|[1-9][0-9]*\\.\\d&#123;1,2&#125;)))$/ 版本號限制格式：v1.0.1不可輸入到百位數字，例如：v000.000.000, v.00.00.001const versionReg = /^v[1-9]?\\d&#123;1&#125;\\.[1-9]?\\d&#123;1&#125;\\.[1-9]?\\d&#123;1&#125;$/","categories":[],"tags":[]},{"title":"常用指令","slug":"常用指令","date":"2021-12-22T03:29:43.000Z","updated":"2021-12-22T03:48:31.555Z","comments":true,"path":"/常用指令/","link":"","permalink":"http://wualnz.com/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","excerpt":"","text":"重新命名 Key1db.cost_set.update(&#123;&#125;, &#123; $rename: &#123; &quot;rate.1&quot;: &quot;rate.hazel&quot;&#125;&#125;, false, true); 移除 Key 值12db.&lt;collection-name&gt;.update(&#123;&#125;, &#123;$unset: &#123;&lt;field1&gt;:1&#125;&#125;, false, true);db.cost_set.update(&#123;&#125;, &#123; $unset: &#123; &quot;rate.2&quot;: 1 &#125;&#125;, false, true); 檢查資料 key 值是否有重複1234567891011121314151617181920checkDuplicateKey() &#123; const keyArray = this.form.param.map(item =&gt; item.code) const result = new Set() const repeat = new Set() keyArray.forEach(item =&gt; &#123; result.has(item) ? repeat.add(item) : result.add(item) &#125;) if (repeat.size &gt; 0) &#123; // 警示訊息：有重複設定參數，請再重新檢查 this.$alert(this.$t(&#x27;error.duplicateDarameter&#x27;), this.$t(&#x27;global.error&#x27;), &#123; confirmButtonText: this.$t(&#x27;global.ok&#x27;), dangerouslyUseHTMLString: true &#125;) return false &#125; return true&#125; Reference 13 Most Common MongoDB Commands MongoDB 201_L2-E1 » Using IntelliShell to build and run find statements","categories":[],"tags":[]},{"title":"Vscode eslint 與 prettier 衝突","slug":"Vscode-eslint-與-prettier-衝突","date":"2021-11-12T07:21:46.000Z","updated":"2021-12-22T03:26:58.457Z","comments":true,"path":"/Vscode-eslint-與-prettier-衝突/","link":"","permalink":"http://wualnz.com/Vscode-eslint-%E8%88%87-prettier-%E8%A1%9D%E7%AA%81/","excerpt":"","text":"解決 Eslint 與 Prettier 之間的衝突 使用 Vscode 同時設定了 Prettier、Eslint 存檔時自動格式化，導致會出現衝突，如下圖可以看見點擊 cmd+s 存檔後，格式化成功了又會馬上變回別種不合格的格式，這個問題困擾了我很久，在此紀錄 衝突原因衝突的原因不外乎是專使用 Prettier, Eslint，而且也同時開啟自動格式化、自動 fix 程式碼的功能，就是下面這兩行，罪魁禍首！ // .vscode/setting.json123456789&#123; // 存檔後，prettier 自動格式化 &quot;eslint.enable&quot;: true, // 存檔後，啟用 eslint --fix 自動格式化程式碼 &quot;editor.codeActionsOnSave&quot;: &#123; &quot;source.fixAll.stylelint&quot;: true, &quot;source.fixAll&quot;: true &#125;&#125;不過我設定寫的很分散，一個 prettier 設定在 .vscode/setting.json，另一個 eslint 格式化設定在 vscode/setting.json 自身的設定檔內如果你的專案有和其他人一起合作，建議直接寫在 .vscode/setting.json 資料夾內，優先順序會先讀取專案內的 .vscode/setting.json，再來才是讀取 vscode 本身的偏好設定 解決方式把 prettier 的自動格式化關閉即可12345678910&#123; // eslint.enable 改為 false &quot;eslint.enable&quot;: false, // 存檔後，啟用 eslint --fix 自動格式化程式碼 &quot;editor.codeActionsOnSave&quot;: &#123; &quot;source.fixAll.stylelint&quot;: true, &quot;source.fixAll&quot;: true &#125;&#125; Reference 解决Eslint 和 Prettier 之间的冲突 詳解VSCode 格式化不符合预期的问题","categories":[],"tags":[]},{"title":"Nodejs 使用 JWT 送 Cookie","slug":"Nodejs-使用-JWT-送-Cookie","date":"2021-11-07T16:57:20.000Z","updated":"2021-12-22T03:26:58.455Z","comments":true,"path":"/Nodejs-使用-JWT-送-Cookie/","link":"","permalink":"http://wualnz.com/Nodejs-%E4%BD%BF%E7%94%A8-JWT-%E9%80%81-Cookie/","excerpt":"","text":"Express 框架利用 Cookie 來送出 JWT，進行安全驗證。我們會利用 express 提供的 res.cookie 來進行實作 設定環境變數打開 config.env 檔，這個檔案主要存放所有的環境變數，設定JWT_COOKIE_EXPIRES_IN，我們預設 Cookie 90天後過期 123JWT_SECRET=sVNJpMqNcYwJ.lahq2343x4$234123^Ll!&amp;H&gt;+B&#123;*]QS/i+zCw+y1&gt;QRlMMf8Viiz2345+dJWT_EXPIRES_IN=90dJWT_COOKIE_EXPIRES_IN=90 設定 cookie參數說明res.cookie 的參數說明 expireexpires 表示 cookie 什麼時後過期，我們希望90天後過期，取得環境變數 process.env.JWT_COOKIE_EXPIRES_IN 之後，乘上 24 (轉換天數)，乘上 60(轉換成小時)，再乘上 60(轉換成分)，最後再乘 1000(轉換成毫秒)123expires: new Date( Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000) securesecure 在官方文件上解釋：Marks the cookie to be used with HTTPS only.，有設 定 secure 表示只含有 HTTPS 才會送出。當你的客戶端是 HTTP，沒有含有 SSL憑證時，cookie 便不會送出。但在開發環境時通常不會設定 HTTPS，可以特別加上判斷，如果環境是production，才加上 secure: true httpOnlyhttpOnly 官方文件解釋：Flags the cookie to be accessible only by the web server.，若設定 httpOnly: true，表示 cookie 標記只能由 Web Server 來訪問 官方範例1234res.cookie(&#x27;rememberme&#x27;, &#x27;1&#x27;, &#123; expires: new Date(Date.now() + 900000), httpOnly: true &#125;) 完整程式碼Express 提供 res.cookie 方法res.cookie(name, value [, options])我們設定傳給客戶端 jwt 的 cookie，值是 jwt 產生 返回的 cookie 名稱: jwt cookie jwt 值則是 jsonwebtoken 產生的 Token 值，帶入變數 token cookieOptions: 我們設定 expires, httpOnly 這兩個選項，並特別設定如果是 production 環境時才將 secure 設定為 true 12345678const cookieOptions = &#123; expires: new Date( Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000, ), httpOnly: true,&#125;res.cookie(&#x27;jwt&#x27;, token, cookieOptions) 因此 API 除了返回 json 也會返回名叫 jwt 的 cookie ，並於 90 天後過期 12345678910111213141516171819202122232425262728293031323334353637383940414243const jwt = require(&#x27;jsonwebtoken&#x27;)const signToken = (id) =&gt; jwt.sign(&#123;id&#125;, process.env.JWT_SECRET, &#123; expiresIn: process.env.JWT_EXPIRES_IN&#125;)const createSendToken = (user, statusCode, res) =&gt; &#123; const token = signToken(user._id) const cookieOptions = &#123; expires: new Date( Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000, ), httpOnly: true, &#125; res.cookie(&#x27;jwt&#x27;, token, cookieOptions) // Remove password from output user.password = undefined res.status(statusCode).json(&#123; status: 1, token, data: &#123; user, &#125;, &#125;)&#125;exports.signup = catchAsync(async (req, res, next) =&gt; &#123; const &#123; name, email, password, passwordConfirm, passwordChangedAt, &#125; = req.body const newUser = await User.create(&#123; name, email, password, passwordConfirm, passwordChangedAt, &#125;) createSendToken(newUser, 201, res)&#125;) 測試在 Postman 打註冊或登入 API，如果上述都有設定成功，預期成功的結果會返回 Cookie，如下圖所示 Reference Express官方文件：res.cookie [Udemy]Nodejs Express Bootcamp: Sending JWT via Cookie","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://wualnz.com/tags/nodejs/"}]},{"title":"解決 Cannot read property range of null 錯誤","slug":"解決-Cannot-read-property-range-of-null-錯誤-1","date":"2021-10-21T15:29:28.000Z","updated":"2021-12-22T03:26:58.462Z","comments":true,"path":"/解決-Cannot-read-property-range-of-null-錯誤-1/","link":"","permalink":"http://wualnz.com/%E8%A7%A3%E6%B1%BA-Cannot-read-property-range-of-null-%E9%8C%AF%E8%AA%A4-1/","excerpt":"","text":"解決 Cannot read property ‘range’ of null 錯誤原因：.eslintrc.js 設置的 parser: ‘babel-eslint’12345parserOptions: &#123; parser: &#x27;babel-eslint&#x27;, ecmaVersion: 2017, sourceType: &#x27;module&#x27;&#125;, 之所以報錯，原因來自於 Router import 元件採用動態引入的方式12345678910111213component: () =&gt; import(`@/views/$&#123;param&#125;/5.index/home`) // 首頁&#123; path: &#x27;/preferentialActivity&#x27;, name: &#x27;preferentialActivity&#x27;, component: () =&gt; import( /* webpackChunkName: &quot;preferential-activity&quot; */ `../views/$&#123;param&#125;/2.preferentialActivity` ), // 優惠活動 meta: &#123; requiresAuth: true &#125;&#125;網路上查到兩種解法，第一種是降低babel-eslint 的版本、第二種是改懶加載的寫法 先說第二種，改寫懶加載寫法 將 () =&gt; import 懶加載改成舊寫法便可以成功，但問題在於 resolve =&gt; require 這種寫法無法使用 Webpack 異步分組模塊 webpackChunkName，神奇的註解可以打包時，將相同元件打包成同一隻 js。由於專案日漸龐大，需要懶加載但又不希望分太多隻 js，所以這個方法雖然可以解決問題，但並不採用 12// 改寫成 resolve =&gt; requirecomponent: resolve =&gt; require([`@/views/$&#123;param&#125;/5.index/home`], resolve) 看官方文件 babel-eslint，發現已不支援12babel-eslint is now @babel/eslint-parser. This package will no longer receive updates.@babel/eslint-parser 無效方法babel-eslint 升級版本 11.0.0-beta.2 -D1npm i babel-eslint@11.0.0-beta.2 -D 宣告無效 babel-eslint 升級版本 10.0.31npm i babel-eslint@10.0.3 -D 宣告無效 安裝 @babel/plugin-syntax-dynamic-import1npm install --save-dev @babel/plugin-syntax-dynamic-import 宣告無效 安裝 @babel/plugin-syntax-dynamic-import1plugins: [&quot;@babel/plugin-syntax-dynamic-import&quot;] 宣告無效 ### 1npm install --save-dev @babel/eslint-parser @babel/eslint-plugin Reference 解決Cannot read property ‘range’ of null 錯誤 vue路由懒加载报错","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://wualnz.com/tags/vue/"}]},{"title":"[Postman] 設定 JWT Token 環境變數","slug":"Postman-設定-JWT-Token-環境變數","date":"2021-10-19T16:33:00.000Z","updated":"2021-12-22T03:26:58.456Z","comments":true,"path":"/Postman-設定-JWT-Token-環境變數/","link":"","permalink":"http://wualnz.com/Postman-%E8%A8%AD%E5%AE%9A-JWT-Token-%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8/","excerpt":"","text":"Postman Test 設定Login API 選擇 TEST 設定 1pm.environment.set(&#x27;accessToken&#x27;, pm.response.json().token) 根據你的 API 吐回的 Token 設定到 Postman 環境變數裡設定好之後，每次打登入，API吐回的 token 會寫進 Postman 環境變數 accessToken 裡。 12345&#123; &quot;status&quot;: 1, &quot;token&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxNmVlZTk5YWVlNjdiNDRkZWU5ODIyMCIsImlhdCI6MTYzNDY2MDQ3OCwiZXhwIjoxNjQyNDM2NDc4fQ.tyq6Dd32ROnIuVdCed3xQel6E-jg8YcaCRcoEqSQs44&quot;, &quot;message&quot;: &quot;success!&quot;&#125; 登入 API，因返回 JSON 格式是 data.token，故在測試裡，pm.response.json() 表示返回來的 data，而要取得 token，故寫成 pm.response.json().token。 Postman Console如果一直取得不了你要的值，可以用 console.log 印出來，如圖下所示，開啟 Postman Console 視窗，在 Test 寫下 console.log 後重新請求，便會看到 console 控制台出現 pm.response.json() 新增 Headers Authoriazation需要登入才可以請求的 API，例如 /api/v1/tours，開啟 Postman 這單支 API 切換到 headers新增 Authorization: Bearer ，設定好後，當請求 /api/v1/tours，便會自動帶入 Postman accessToken 變數囉 另外也可以在 Tab Authorization 這裡設定，帶入 即可，兩個地方擇一都會有一樣效果，請求會自動代入\b環境變數 accessToken","categories":[],"tags":[{"name":"postman","slug":"postman","permalink":"http://wualnz.com/tags/postman/"}]},{"title":"[Git] 寫一個好的 Commit Message","slug":"Git-寫一個好的-Commit-Message","date":"2021-10-18T06:47:18.000Z","updated":"2021-12-22T03:26:58.453Z","comments":true,"path":"/Git-寫一個好的-Commit-Message/","link":"","permalink":"http://wualnz.com/Git-%E5%AF%AB%E4%B8%80%E5%80%8B%E5%A5%BD%E7%9A%84-Commit-Message/","excerpt":"","text":"區分標題(Subject)與內容(body)，用一個斷行符合隔開 Subject 標題 首字大寫 標題不要超過 50 字，若超過50字，表示你這次 commit 太多東西，最好分拆開來 標題結尾不需要用句號來結尾 Body 內容 每一行的內容控制在 72 字內 用內容來詳細解釋這個 commit 做了什麼","categories":[],"tags":[{"name":"git","slug":"git","permalink":"http://wualnz.com/tags/git/"}]},{"title":"[Nodejs] Express 使用者註冊利用 JWT(jsonwebtoke)驗證","slug":"Nodejs-Express-使用者註冊利用-JWT-jsonwebtoke-驗證","date":"2021-10-18T05:43:29.000Z","updated":"2021-12-22T03:26:58.455Z","comments":true,"path":"/Nodejs-Express-使用者註冊利用-JWT-jsonwebtoke-驗證/","link":"","permalink":"http://wualnz.com/Nodejs-Express-%E4%BD%BF%E7%94%A8%E8%80%85%E8%A8%BB%E5%86%8A%E5%88%A9%E7%94%A8-JWT-jsonwebtoke-%E9%A9%97%E8%AD%89/","excerpt":"","text":"Nodejs 用 Express 框架，使用者註冊 API，利用 JWT 產生令牌驗證使用者 安裝 jsonwebtoken12npm i jsonwebtokennpm run start 使用 JWT在 authController.js 在 signup 時引用 jwt 1const jwt = require(&#x27;jsonwebtoken&#x27;) 設定 JWT 環境變數我們在環境變數上新增 JWT_SECRET、JWT_EXPIRES_IN12JWT_SECRET=sVNJpMqN34i5$JkSK4E%#255CK#sV3JWT_EXPIRES_IN=90dJWT_EXPIRES_IN 90d 意味者 90天後過期，90天後 JWT 不再會有效，即使簽名是正確的，是一種額外的安全措施。接著在回到 authController.js，利用 jwt.sign 方法，引用剛剛建立的 JWT 環境變數，來產生令牌 設定 token123const token = jwt.sign(&#123; id: newUser._id &#125;, process.env.JWT_SECRET, &#123; expiresIn: process.env.JWT_EXPIRES_IN,&#125;) 若令牌正確，回傳給客戶端令牌，Client端會以 cookie/storage 儲存令牌(token) 回傳 Client端 token1234567891011const token = jwt.sign(&#123; id: newUser._id &#125;, process.env.JWT_SECRET, &#123; expiresIn: process.env.JWT_EXPIRES_IN,&#125;)res.status(201).json(&#123; status: 1, token, data: &#123; user: newUser &#125;&#125;) 12345678const jwt = require(&#x27;jsonwebtoken&#x27;)const User = require(&#x27;../models/userModel&#x27;)const catchAsync = require(&#x27;../utils/catchAsync&#x27;)exports.signup = catchAsync(async (req, res, next) =&gt; &#123; const &#123; name, email, password, passwordConfirm&#125;&#125;) 測試設定好之後，我們用 postman 打 /signup API，如果設定都正確，預期結果會回傳 JWT 產生的 token JWT DebuggerToken 部分是由 Base64 編碼，我們可以在 jwt.io 調試我們產生的 JWT Token，轉換回原本的 JSON 資料，同時也可以驗證該 Token 的正確性 Reference [筆記] 透過 JWT 實作驗證機制 [Udemy] Nodejs Express Mongodb Bootcamp - 註冊用戶","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://wualnz.com/tags/nodejs/"}]},{"title":"[Nodejs] bycrptjs 加密密碼","slug":"Nodejs-bycrptjs-加密密碼","date":"2021-10-18T02:06:38.000Z","updated":"2021-12-22T03:26:58.455Z","comments":true,"path":"/Nodejs-bycrptjs-加密密碼/","link":"","permalink":"http://wualnz.com/Nodejs-bycrptjs-%E5%8A%A0%E5%AF%86%E5%AF%86%E7%A2%BC/","excerpt":"","text":"打註冊（signup）API，使用者輸入的密碼，利用 Library bycrptjs 來加密密碼成功畫面如下 安裝會利用到 Mongoose、bycrptjs、validator，安裝後需重啟 Server12npm i brycrptjsnpm run start 建立 UserModel建立 models/userModel.js，並定義 Schema，需要定義的欄位有 name, email, photo, password, passwordConfirm 1234567891011121314151617181920212223242526272829303132333435363738const mongoose = require(&#x27;mongoose&#x27;)const validator = require(&#x27;validator&#x27;)const bycrpt = require(&#x27;bcryptjs)const userSchema = new mongoose.Schema(&#123; name: &#123; type: String, required: [true, &#x27;Please tell us your name!&#x27;], &#125;, email: &#123; type: String, required: [true, &#x27;Please provide your email&#x27;], unique: true, lowercase: true, validate: [validator.isEmail, &#x27;Please provide a valid email&#x27;], &#125;, photo: String, password: &#123; type: String, required: [true, &#x27;Please provide a password&#x27;], trim: true, minlength: 8, &#125;, passwordConfirm: &#123; type: String, required: [true, &#x27;Please confirm your password&#x27;], validate: &#123; // This only works on CREATE or SAVE!! validator(el) &#123; return el === this.password &#125;, message: &#x27;Password are not the same!&#x27;, &#125;, &#125;,&#125;)const User = mongoose.model(&#x27;User&#x27;, userSchema)module.exports = User 定義 Routeroutes/userRoutes.js12345const express = require(&#x27;express&#x27;)const userController = require(&#x27;../controllers/userController&#x27;)const authController = require(&#x27;../controllers/authController&#x27;)router.post(&#x27;/signup&#x27;, authController.signup) 定義 AuthControllercontrollers/authController.js12345678910111213const User = require(&#x27;../models/userModel&#x27;)const catchAsync = require(&#x27;../utils/catchAsync&#x27;)exports.signup = catchAsync(async (req, res, next) =&gt; &#123; const newUser = await User.create(req.body) res.status(201).json(&#123; status: 1, data: &#123; user: newUser, &#125;, &#125;)&#125;) 加密密碼開啟 userModel.js，在存入 user 資料前做加密，會利用到 bycrpt.hash 方法 12345678910111213userSchema.pre(&#x27;save&#x27;, async function(next) &#123; // Only run this function if password was actually modifeid if (!this.isModified(&#x27;password&#x27;)) return next() // Hash the password with cost of 12 加密密碼 this.password = await bycrpt.hash(this.password, 12) // Delete passwordConfirm field this.passwordConfirm = undefined // next step next()&#125;) 完整程式碼12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152const mongoose = require(&#x27;mongoose&#x27;)const validator = require(&#x27;validator&#x27;)const bycrpt = require(&#x27;bcryptjs&#x27;)// name, email. photo, password, passwordConfirmconst userSchema = new mongoose.Schema(&#123; name: &#123; type: String, required: [true, &#x27;Please tell us your name!&#x27;], &#125;, email: &#123; type: String, required: [true, &#x27;Please provide your email&#x27;], unique: true, lowercase: true, validate: [validator.isEmail, &#x27;Please provide a valid email&#x27;], &#125;, photo: String, password: &#123; type: String, required: [true, &#x27;Please provide a password&#x27;], trim: true, minlength: 8, &#125;, passwordConfirm: &#123; type: String, required: [true, &#x27;Please confirm your password&#x27;], validate: &#123; // This only works on CREATE or SAVE!! validator(el) &#123; return el === this.password &#125;, message: &#x27;Password are not the same!&#x27;, &#125;, &#125;,&#125;)userSchema.pre(&#x27;save&#x27;, async function (next) &#123; // Only run this function if password was actually modifeid if (!this.isModified(&#x27;password&#x27;)) return next() // Hash the password with cost of 12 this.password = await bycrpt.hash(this.password, 12) // Delete passwordConfirm field this.passwordConfirm = undefined next()&#125;)const User = mongoose.model(&#x27;User&#x27;, userSchema)module.exports = User Reference [Udemy] Nodejs Express Mongodb Bootcamp - 126. Managing Password","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://wualnz.com/tags/nodejs/"}]},{"title":"[Vue] 錯誤 @import directive requires a url or quoted","slug":"Vue-錯誤-import-directive-requires-a-url-or-quoted","date":"2021-10-15T09:56:11.000Z","updated":"2021-12-22T03:26:58.458Z","comments":true,"path":"/Vue-錯誤-import-directive-requires-a-url-or-quoted/","link":"","permalink":"http://wualnz.com/Vue-%E9%8C%AF%E8%AA%A4-import-directive-requires-a-url-or-quoted/","excerpt":"","text":"錯誤 @import directive requires a url or quoted path發生情況在 config.js 引入 scss 檔案 (color.scss) 作為全域使用時，出現 @import directive requires a url or quoted path 錯誤 發生原因 scss 檔案 (color.scss) 裡引入了外部網址1@import url(&quot;https://fonts.googleapis.com/css?family=Roboto:400,500,700&quot;) sass-resources-loader 會替換成內部路徑，造成錯誤1../assets/css/url/https://fonts.googleapis.com/css?family=Roboto:400,500,700 解決方法方法一- 不要在此檔案 (color.scss) 引入外部連結，改在別的檔案引入，並在 main.js 引入 方法二- 在 index.html CDN 引入 無效方法文章提到的改引入方法，試驗後無效1234// 原本@import &quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;// 更改後無效@import url(https://fonts.googleapis.com/icon?family=Material+Icons) 參考資料 https://github.com/webpack/webpack/issues/8865 #vue/config/sccss","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://wualnz.com/tags/vue/"}]},{"title":"[Nodejs] 重構 Controller try catch","slug":"Nodejs-重構-Controller-try-catch","date":"2021-10-14T15:42:51.000Z","updated":"2021-12-22T03:26:58.455Z","comments":true,"path":"/Nodejs-重構-Controller-try-catch/","link":"","permalink":"http://wualnz.com/Nodejs-%E9%87%8D%E6%A7%8B-Controller-try-catch/","excerpt":"","text":"重構在 tourController 裡有許多重複的 code，寫法並不清晰目標：寫下將以下的 code 重構，變得易懂 tourController.js123456789101112131415161718exports.createTour = async (req, res) =&gt; &#123; try &#123; const newTour = await Tour.create(req.body) res.status(201).json(&#123; status: 1, data: &#123; tour: newTour, &#125;, &#125;) &#125; catch (err) &#123; res.status(400).json(&#123; status: 0, message: &#x27;Invalid Data Sent!&#x27;, err, &#125;) &#125;&#125; 開始重構catchAsync 建立一個 catchAsync 函數，並傳入參數 fn為了避免每一段都是寫 try catch，顯得程式碼很亂，我們建立一個函數 catchAsync來幫助我們簡單捕捉錯誤，並回傳一個匿名函數，將其分配給 createTour catchAsync：捕捉 async function 的 Error，在 ES7 中 async function 會回傳 Promise，也就意味者：若 async function 捕捉到 Error Promise 會被 reject 將 try, catch 程式碼移除而原本的 createTour 將 try 裡的程式碼挪到 try 外，也就是下面範例程式碼註解的部分移除 12345678910111213141516171819202122const catchAsync = (fn) =&gt; (req, res, next) =&gt; &#123; fn(req, res, next).catch(next)&#125;exports.createTour = catchAsync(async (req, res) =&gt; &#123; const newTour = await Tour.create(req.body) res.status(201).json(&#123; status: 1, data: &#123; tour: newTour, &#125;, &#125;) // try &#123; // &#125; catch (err) &#123; // res.status(400).json(&#123; // status: 0, // message: &#x27;Invalid Data Sent!&#x27;, // err, // &#125;) // &#125;&#125;) 重構，將 catchAsync 獨立一個檔案在 utils 建立 catchAsync.js，並 export module 123module.exports = (fn) =&gt; (req, res, next) =&gt; &#123; fn(req, res, next).catch(next)&#125; 在 tourController 引入，並將所有的路由加上 catchAsync123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354const Tour = require(&#x27;../models/tourModel&#x27;)const APIFeatures = require(&#x27;../utils/apiFeatures&#x27;)const catchAsync = require(&#x27;../utils/catchAsync&#x27;)exports.getTour = catchAsync(async (req, res, next) =&gt; &#123; const tour = await Tour.findById(req.params.id) res.status(200).json(&#123; status: 1, message: &#x27;success&#x27;, data: &#123; tour, &#125;, &#125;)&#125;)exports.createTour = catchAsync(async (req, res) =&gt; &#123; const newTour = await Tour.create(req.body) res.status(201).json(&#123; status: 1, data: &#123; tour: newTour, &#125;, &#125;)&#125;)exports.updateTour = catchAsync(async (req, res, next) =&gt; &#123; const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, &#123; // [new] 設定 true 表示會返回修改後的 item ，而非原始 item new: true, // [runValidators] 若設定 true 將會觸發 Model Schema 重新驗證 runValidators: true, &#125;) res.status(200).json(&#123; status: 1, message: &#x27;success&#x27;, data: &#123; tour, &#125;, &#125;)&#125;)exports.deleteTour = catchAsync(async (req, res, next) =&gt; &#123; await Tour.findByIdAndDelete(req.params.id) res.status(204).json(&#123; status: 1, message: &#x27;success&#x27;, data: null, &#125;)&#125;) Reference [Udemy] Nodejs Express Mongodb Bootcamp","categories":[],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://wualnz.com/tags/nodejs/"}]},{"title":"[Nodejs] ES6 class 重構擴展 Error 類 AppError","slug":"Nodejs-ES6-class-重構擴展-Error-類-AppError","date":"2021-10-14T14:21:10.000Z","updated":"2021-12-22T03:26:58.455Z","comments":true,"path":"/Nodejs-ES6-class-重構擴展-Error-類-AppError/","link":"","permalink":"http://wualnz.com/Nodejs-ES6-class-%E9%87%8D%E6%A7%8B%E6%93%B4%E5%B1%95-Error-%E9%A1%9E-AppError/","excerpt":"","text":"當 Error 發生時，通常會拋出一個 Error 物件，也可以看成是一個 Error 原型筆記利用 ES6 語法 Class，建立一個 AppError 類，並繼承 Error，重構 app.js Class對於 Class 並沒有很熟悉，這裡寫下 Class 基本概念，建議可以到阮一峰的 ES6 介紹文章，寫得很清楚完整 Class 定義：ES6 語法，實際上就是一個 functionES6 Class 的寫法，在 ES5 裡也同樣可以做得到，所以常會聽到 class 是語法糖，它讓物件原型的寫法更清晰，更像物件程式設計的語法Class 可用 extends 關鍵字來繼承，比起改 Javascript 原型鏈實現繼承，要更清晰也更方便 constructor：建造方法，通過 new 生成實例時，會自動呼叫 constructor，每個類都一定會有 constructor，每個類都一定會有 super：extends 繼承父類的 constructor 屬性與方法，像是 super.toValue() ，意思就是使用父層的 toValue() 方法Class 侷限：不存在變數提升 Hoist，一定要先定義才能使用，若先使用再定義會報錯 appError 類建立 utils/appError.js12345678910111213class AppError extends Error &#123; constructor(message, statusCode) &#123; super(message) this.statusCode = statusCode this.status = `$&#123;statusCode&#125;`.startsWith(&#x27;4&#x27;) ? &#x27;fail&#x27; : &#x27;error&#x27; this.isOperational = true Error.captureStackTrace(this, this.constructor) &#125;&#125;module.exports = AppErrorclass 使用到 extends， 繼承 Error 的原型 Stack TraceStack Trace 堆疊追蹤1console.log(err.stack)Stact 印出來的模樣 Error.captureStackTrace 當 catch 到 error 時會取得 error.stack，便會調用此函數。函數第一個參數要放 Object 物件，第二個參數則放選填的 function，它的作用是捕捉當前堆疊的路徑，並在傳入的物件裡（第一個參數）建立一個 stack 屬性來儲存，如果有傳入第二個參數，則會當成這次堆疊調用的最終站，程式只會跑到這個函數，也就是 this.constructor 被調用之前可以用 console.log 印出來看看到底存入了什麼12Error.captureStackTrace(this, this.constructor)console.log(&#x27;stack&#x27;, this.stack) // stack Error: Can&#x27;t find /api/v1/asd on this server最後打印出來 stack: ‘Error: Can’t find /api/v1/asd on this server’ 實際應用 new appError回到 app.js，引用 AppError，並在 MiddleWare 攔截 * 路由時 new AppError 類123456789101112131415161718const express = require(&#x27;express&#x27;)const AppError = require(&#x27;./utils/appError&#x27;)const app = express()app.use(&#x27;*&#x27;, (req, res, next) =&gt; &#123; //* 以下是尚未重構前的代碼 // res.status(404).json(&#123; // status: 0, // message: `Can&#x27;t find $&#123;req.originalUrl&#125; on this server`, // &#125;) // err.status = &#x27;fail&#x27; // err.statusCode = 404 // 重構後的代碼 next(new AppError(`Can&#x27;t find $&#123;req.originalUrl&#125; on this server`), 404))&#125;)接下來重構這段程式碼，當遇到錯誤時 json 吐回訊息12345678910111213app.use((err, req, res, next) =&gt; &#123; // Stack Trace 堆疊追蹤 console.log(err.stack) err.statusCode = err.statusCode || 500 err.status = err.status || &#x27;error&#x27; // 回傳錯誤訊息 res.status(err.statusCode).json(&#123; status: err.status, message: err.message, &#125;)&#125;)新增檔案 controllers/errorController.js12345678910111213module.exports = (err, req, res, next) =&gt; &#123; // Stack Trace 堆疊追蹤 console.log(err.stack) err.statusCode = err.statusCode || 500 err.status = err.status || &#x27;error&#x27; // 回傳錯誤訊息 res.status(err.statusCode).json(&#123; status: err.status, message: err.message, &#125;)&#125; 回到 app.js，將內容刪除，並引入 errorController，再將原本的程式碼刪除，替代為 globalErrorHandler，將 app.js 精簡很多123const globalErrorHandler = require(&#x27;./controllers/errorController)app.use(globalErrorHandler) Reference ES6-Class的繼承 掌握 JS Stack Trace Creating Custom Error Objects In Node.js With Error.captureStackTrace()","categories":[],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://wualnz.com/tags/Nodejs/"}]},{"title":"[Vue] i18n 神器 i18n-ally","slug":"Vue-i18n-神器-i18n-ally","date":"2021-10-13T10:15:07.000Z","updated":"2021-12-22T03:26:58.457Z","comments":true,"path":"/Vue-i18n-神器-i18n-ally/","link":"","permalink":"http://wualnz.com/Vue-i18n-%E7%A5%9E%E5%99%A8-i18n-ally/","excerpt":"","text":"VS Code 開發一個套件叫 i18n-ally，常常我們需要對照 i18n 翻譯，要另外再開啟 json 檔非常混亂，安裝此套件後就可以輕鬆對照啦，此外還有提供進度表，可以告訴我們各種語言翻譯的進度，非常方便的神器 點擊 VSCode 套件安裝 i18n-ally 編輯 setting.js可用 「cmd+,」，再點開右上角的 A4 檔案 Icon，會開啟 setting.json 檔在最下面加上你的 i18n 路徑。例如以下的範例，我的 i18n json 檔放在 src/i18n/config 底下，調整成你放的實際目錄預設顯示語言可以設定，像我的語系有 en, zh, tw，也可以預設顯示為 tw12345678&#123; // 語系檔路徑 &quot;i18n-ally.localesPaths&quot;: [ &quot;src/i18n/config&quot; ], // 默認顯示翻譯文字 &quot;i18n-ally.displayLanguage&quot;: &quot;cn&quot;,&#125; 編輯完成！在左側旁邊的功能列找到 i18n-ally，也可以看到當前檔案及翻譯進度當前檔案會列出所有 json 第一層的檔案","categories":[],"tags":[{"name":"vscode","slug":"vscode","permalink":"http://wualnz.com/tags/vscode/"}]},{"title":"[Vue] Vxe-Table 保存滾動捲軸的位置","slug":"Vue-Vxe-Table 保存滾動捲軸的位置","date":"2021-10-12T02:16:16.000Z","updated":"2021-12-22T03:26:58.457Z","comments":true,"path":"/Vue-Vxe-Table 保存滾動捲軸的位置/","link":"","permalink":"http://wualnz.com/Vue-Vxe-Table%20%E4%BF%9D%E5%AD%98%E6%BB%BE%E5%8B%95%E6%8D%B2%E8%BB%B8%E7%9A%84%E4%BD%8D%E7%BD%AE/","excerpt":"","text":"今天要做的需求是，使用者不管點擊上一頁或下一頁，或是點擊頁面上任何連結，再次返回到那一頁，會保留原本瀏覽的位置。也就是說一開始進入 A 頁滑到頁面最尾端，跳轉到 B 頁，再回到 A 頁，我們希望 A頁進入後是在最尾端的位置。 官方文件提供 scrollBehavior 函式來自動記載捲軸滾動的位置，但僅限於點擊瀏覽器按上一頁、下一頁才會有作用。點擊 router-link 並不會有任何作用，console 出來 scrollBehavior 會發現是 null 值。123456789scrollBehavior (to, from, savedPosition) &#123; if (savedPosition) &#123; // 若點擊 router-link，savedPosition 會是 null 值 // 並不會有任何作用 return savedPosition &#125; else &#123; return &#123; x: 0, y: 0 &#125; &#125;&#125;為了彌補 scrollBehavior 少做的功能，我們必須再多做點事。 外部將 router 掛載的物件加入 meta.scrollTop 以方便去紀錄每個分頁的 Y軸位置，並在 router.beforeEach 離開頁面前寫入，進入頁面後 (router.afterEach) 滾動到指定位置 12345678910111213141516171819202122232425262728import router from &#x27;./router&#x27;// 設定 scrollBehaviornew Router(&#123; mode: &#x27;history&#x27;, // require service support scrollBehavior(to, from, savedPosition) &#123; const scrollPos = &#123; top: to.meta.scrollTop, left: 0 &#125; return savedPosition || scrollPos &#125;, routes: constantRoutes&#125;)router.beforeEach(async(to, from, next) =&gt; &#123; // 離開頁面後，紀錄捲軸高度 (Y) 位置 from.meta.scrollTop = window.scrollY next()&#125;)router.afterEach((to, from) =&gt; &#123; // 頁面移動到上次瀏覽的位置 setTimeout(() =&gt; &#123; window.scrollTo(0, to.meta.scrollTop) &#125;, 100)&#125;) 也可以改寫，將 left, top 位置一併紀錄1234567891011121314151617181920212223242526272829303132333435363738&#123; path: &#x27;/&#x27;, component: Layout, redirect: &#x27;/dashboard&#x27;, children: [ &#123; name: &#x27;Dashboard&#x27;, path: &#x27;dashboard&#x27;, component: () =&gt; import(&#x27;@/views/other/dashboard/index&#x27;), children: [], meta: &#123; title: &#123; en: &#x27;dashboard&#x27;, zh: &#x27;儀表板&#x27; &#125;, icon: &#x27;dashboard&#x27;, affix: true, scrollPos = &#123; top: 0, left: 0 &#125; &#125; &#125; ]&#125;,router.beforeEach(async(to, from, next) =&gt; &#123; // 離開頁面後，紀錄捲軸高度 (Y) 位置 from.meta.scrollPos.top = window.scrollY from.meta.scrollPos.left = window.scrollX next()&#125;)router.afterEach((to, from) =&gt; &#123; // 頁面移動到上次瀏覽的位置 setTimeout(() =&gt; &#123; window.scrollTo(to.meta.scrollPos.left, to.meta.scrollPos.top) &#125;, 100)&#125;) 元件內部使用 vxe-table 套件，只要設定 max-height後，即可紀錄保存位置 scrollTo 移動到指定位置 getScroll 取得表格的滾動狀態，必須設定 max-height 虛擬滾動表格才會紀錄，物件有 { virtualX, virtualY, scrollTop, scrollLeft } 12345678910111213141516171819202122232425262728293031&lt;button @change=&quot;scrollTo&quot;&gt;移動到指定1500位置&lt;/button&gt;&lt;vxe-table ref=&quot;xTable&quot; show-overflow highlight-hover-row max-height=&quot;800&quot; :data=&quot;tableData&quot;&gt; &lt;vxe-table-column field=&quot;test&quot; align=&quot;center&quot; /&gt;&lt;/vxe-table-column&gt;mounted() &#123; console.log(this.$refs.xTable) console.log(this.$refs.xTable.$el) console.log(this.$refs.xTable.$el.offsetTop)&#125;,methods: &#123; getScroll() &#123; console.log(this.$refs.xTable.getScroll()) /* &#123; virtualX, virtualY, scrollTop, scrollLeft &#125; */ &#125;, // 指定移動到 Y 軸 1500px 位置 scrollTo() &#123; this.$refs.xTable.scrollTo(0, 1500) &#125;&#125; Reference 使用keep-alive保存滚动条的位置 Vue Router: Restore Scroll Position with and","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://wualnz.com/tags/vue/"},{"name":"vxe-table","slug":"vxe-table","permalink":"http://wualnz.com/tags/vxe-table/"}]},{"title":"[Nodejs] 用 Middleware Global 全域處理錯誤","slug":"Nodejs-用-Middleware-Global-全域處理錯誤","date":"2021-10-09T08:11:30.000Z","updated":"2021-12-22T03:26:58.455Z","comments":true,"path":"/Nodejs-用-Middleware-Global-全域處理錯誤/","link":"","permalink":"http://wualnz.com/Nodejs-%E7%94%A8-Middleware-Global-%E5%85%A8%E5%9F%9F%E8%99%95%E7%90%86%E9%8C%AF%E8%AA%A4/","excerpt":"","text":"在 Nodejs Express 中用 Middleware 錯誤處理官方提供錯誤處理的函數，參數有 err, req, res, next。我們可以使用 app.use 方式來呼叫 1234567app.use((err, req, res, next) =&gt; &#123; console.error(&#x27;有錯誤&#x27;) res.status(500).json(&#123; status: 500 message: &#x27;Ohhh, 發生錯誤&#x27; &#125;)&#125;) app.js123456789101112131415161718app.all(&#x27;*&#x27;, (req, res, next) =&gt; &#123; const err = new Error(`Ohhhh, cannot find this $&#123;req.originalUrl&#125;`) err.status = &#x27;fail&#x27; err.statusCode = 404 next(err)&#125;)app.use((err, req, res, next) =&gt; &#123; err.statusCode = err.statusCode || 500 err.status = err.status || &#x27;error&#x27; res.status(err.statusCode).json(&#123; status: err.status, message: err.message &#125;)&#125;) 成果輸入不存在的 routes 時便會出現錯誤訊息 Reference Express Error Handle","categories":[],"tags":[]},{"title":"[Nodejs] Mongoose Virtual Properties","slug":"Nodejs-Mongoose-Virtual-Properties","date":"2021-06-27T16:44:06.000Z","updated":"2021-12-22T03:26:58.455Z","comments":true,"path":"/Nodejs-Mongoose-Virtual-Properties/","link":"","permalink":"http://wualnz.com/Nodejs-Mongoose-Virtual-Properties/","excerpt":"","text":"[Nodejs] Mongoose Virtual Properties什麼是 Virtual Properties它是 Mongoose 提供的功能之一，Model 可以在 Schema 定義虛擬屬性(Virtual Properties)，它並不會被存入資料庫，但是我們可以使用和讀取，這樣做為了可以節省空間 優缺點 優點：節省資料庫空間 缺點：由於Virtual 沒有儲存在資料庫中，因此無法查詢 它的概念其實就是 Vue 裡的 computed 屬性 例如：lastName, firstName，最常看到的範例是 Vue2 computed 設定 lastName, firstName, fullName 如何使用定義了 tourSchema，在 tourSchema 最後定義完後加上設定 toJSON: &#123; virtuals: true &#125;, toObject: &#123; virtuals: true &#125; 123456789101112// 這是最後要加上的設定toJSON: &#123; virtuals: true &#125;// 舉例const mongoose = require(&#x27;mongoose&#x27;)const testSchema = new mongoose.Schema( &#123; ...自定義Schema &#125;, &#123; toJSON: &#123; virtuals: true &#125;, toObject: &#123; virtuals: true &#125;, &#125;) 設定虛擬屬性1234schema.virtual(&#x27;定義虛擬屬性名稱&#x27;).get(function() &#123; // 這個值要 return 什麼 return &#x27;This is Virtual Properities&#x27;&#125;) 在以下程式碼，設定了 durationWeeks，根據 duration / 7 而得來，後面要接的是 callback function 注意：不可用箭頭Function來寫，傳回的值會是 null ❌：get.(() ⇒ { this.duration / 7 })🆗：get.(function() { return this.duration / 7 }) 123tourSchema.virtual(&#x27;durationWeeks&#x27;).get(function () &#123; return this.duration / 7&#125;) 完整程式碼12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667const mongoose = require(&#x27;mongoose&#x27;)const tourSchema = new mongoose.Schema(&#123; name: &#123; type: String, required: [true, &#x27;A tour must have a name&#x27;], unique: true, trim: true, &#125;, duration: &#123; type: Number, required: [true, &#x27;A tour must hava a duration&#x27;], &#125;, maxGroupSize: &#123; type: Number, required: [true, &#x27;A tour must have a group size&#x27;], &#125;, difficulty: &#123; type: String, required: [true, &#x27;A tour must have a difficulty&#x27;], &#125;, price: &#123; type: Number, required: [true, &#x27;A tour must have a price&#x27;], &#125;, ratingsAverage: &#123; type: Number, default: 4.5, &#125;, ratingsQuantity: &#123; type: Number, default: 0, &#125;, priceDiscount: Number, summary: &#123; type: String, trim: true, required: [true, &#x27;A tour must have a description&#x27;], &#125;, description: &#123; type: String, trim: true, &#125;, imageCover: &#123; type: String, required: [true, &#x27;A tour must have a cover image&#x27;], &#125;, images: [String], createdAt: &#123; type: Date, default: Date.now(), select: false, // API 永遠不顯示在 Client 端 &#125;, startDates: [Date],&#125;, &#123; toJSON: &#123; virtuals: true &#125;, toObject: &#123; virtuals: true &#125;,&#125;)// eslint-disable-next-line func-namestourSchema.virtual(&#x27;durationWeeks&#x27;).get(function () &#123; return this.duration / 7&#125;)const Tour = mongoose.model(&#x27;Tour&#x27;, tourSchema)module.exports = Tour","categories":[],"tags":[]},{"title":"Vue 與 Slot 結合","slug":"Vue-與-Slot-結合","date":"2020-02-04T08:16:28.000Z","updated":"2021-12-22T03:26:58.458Z","comments":true,"path":"/Vue-與-Slot-結合/","link":"","permalink":"http://wualnz.com/Vue-%E8%88%87-Slot-%E7%B5%90%E5%90%88/","excerpt":"","text":"Vue 與 Slot 結合SlotSlot是什麼？可以讓你插入HTML內容。會使用的時機通常是結構都相同，但是裡面的HTML需要更改，CSS表現方式可能有三四種，這時Slot就可以派上用場了。 用法匿名插槽匿名插槽就是slot不設定name屬性，通常用在屬性較單純，只需要插入一個地方處。他會抓父元件template裡的內容。 子元件1234567&lt;template&gt; &lt;div class=&quot;content&quot;&gt; &lt;header class=&quot;text&quot;&gt; &lt;slot&gt;預設值&lt;/slot&gt; &lt;/header&gt; &lt;/div&gt;&lt;/template&gt;父元件，在template中的內容都會被帶入slot上。如果slot是變數，那他可以帶HTML各種格式填入進去。 12345678910111213// 父元件&lt;template&gt; &lt;div class=&quot;container&quot;&gt; &lt;child&gt; &lt;template&gt;内容&lt;/template&gt; &lt;/child&gt; // 插槽上寫v-slot=&quot;slotProps&quot;，父元件就可以讀取到子元件的data屬性 &lt;child v-slot=&quot;slotProps&quot;&gt; &#123;&#123; slotProps.user &#125;&#125; &lt;/child&gt; &lt;/div&gt;&lt;/template&gt; 具名插槽最近流行武漢肺炎，去藥局都需要實名購買，Slot也是有實名制的！Slot有一個叫name的屬性，根據name來認內容。就和我們要去買口罩，他是看健保卡認的，才會給你買口罩喔XD。 1234567891011// 子元件&lt;template&gt; &lt;div class=&quot;content&quot;&gt; &lt;main&gt; &lt;slot name=&quot;main&quot;&gt;&lt;/slot&gt; &lt;/main&gt; &lt;footer&gt; &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt; &lt;/footer&gt; &lt;/div&gt;&lt;/template&gt; 子元件做了main與footer的插槽，接著來看父元件怎麼做設定 123456789101112131415// 父元件&lt;template&gt; &lt;div class=&quot;container&quot;&gt; &lt;child&gt; &lt;template v-slot:main&gt; &lt;a href=&quot;https://www.zcygov.cn&quot; target=&quot;_blank&quot;&gt;导航&lt;/a&gt; &lt;/template&gt; &lt;template #footer&gt;页脚（具名插槽的缩写#）&lt;/template&gt; &lt;template #footer&gt; &lt;!-- v-slot 重复定义同样的 name 后只会加载最后一个定义的插槽内容 --&gt; v-slot只会添加在一个 template 上面 &lt;/template&gt; &lt;/child&gt; &lt;/div&gt;&lt;/template&gt; v-slot 如果定義同樣的 name，只會加載最後一個定義的slot內容。可以用#來做縮小name=&quot;footer&quot; 等同於 #footer 作用域插槽作用域插槽就是可以讓父元件讀取到子元件的data及method，平常不是使用slot情況，父元件要吃子元件的method或data，是用$emit或eventBus來傳值。接下來示範在slot情況下，要怎麼父傳給子 12345678910111213141516171819202122232425262728293031// 子元件 &lt;template&gt; &lt;div class=&quot;content&quot;&gt; &lt;!-- 作用域插槽 --&gt; &lt;footer class=&quot;text&quot;&gt; &lt;slot name=&quot;footer&quot; :user=&quot;user&quot; :testClick=&quot;testClick&quot;&gt; &#123;&#123;user.name&#125;&#125; &lt;/slot&gt; &lt;/footer&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default &#123; name: &#x27;child&#x27;, data () &#123; return &#123; user: &#123; title: &#x27;Hazel Wu 你知道的 Hello&#x27;, name: &#x27;Hazel&#x27; &#125; &#125;; &#125;, methods:&#123; testClick()&#123; // 這是子元件的方法，但也可以給父元件一起使用喔 alert(&#x27;123&#x27;); &#125; &#125; &#125;; &lt;/script&gt; 接著是父元件的設定，我們會在父元件定義v-slot:xxx=&quot;slotProps&quot;或是#xxx=&quot;slotProps&quot;，總之怎麼樣都一定少不了slotProps，當然slotProps也可以重新命名，他就是用來讀取子元件的資料或方法 123456789101112131415161718192021222324252627// 父元件&lt;template&gt; &lt;div class=&quot;container&quot;&gt; &lt;child&gt; &lt;template #footer=&quot;slotProps&quot;&gt; &#123;&#123;slotProps.user.title&#125;&#125; &lt;button @click=&quot;slotProps.testClick&quot;&gt;點我&lt;/button&gt; &lt;/template&gt; &lt;template #footer=&quot;&#123;user,testClick&#125;&quot;&gt; &#123;&#123;user.title&#125;&#125;&lt;br&gt; 解構插槽prop &lt;br&gt; &lt;!-- 子組件的 testClick方法，在父元件也可以使用喔 --&gt; &lt;button @click=&quot;testClick&quot;&gt;点我&lt;/button&gt; &lt;/template&gt; &lt;/child&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Child from &#x27;./component/child.vue&#x27;;export default &#123; name: &#x27;demo&#x27;, components: &#123; Child &#125;,&#125;;&lt;/script&gt; 我們剛剛在子元件定義了user的data、testClick的方法，你看，我們在父元件都用得上，很方便！ 實戰：Menu我們的Menu有點複雜，我希望他有兩種型態，第一種型態是直接跳連結、第二種型態是show wrapper。 第一種型態：有li1234567891011121314151617// 父元件：展開Menu，有li&lt;MenuItem :show=&quot;showMenu = true&quot;&gt; &lt;template #name&gt;關於我們&lt;/template&gt; &lt;template #content&gt; &lt;li class=&quot;col d-flex justify-content-center align-items-end&quot;&gt; &lt;div class=&quot;menu-item__wrapper__content&quot;&gt;Show Content&lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;col d-flex justify-content-center align-items-end&quot;&gt; &lt;div&gt; 還在等什麼？快來訂閱我！ &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;col d-flex justify-content-center align-items-end&quot;&gt; &lt;div class=&quot;menu-item__wrapper__content&quot;&gt;&lt;/div&gt; &lt;/li&gt; &lt;/template&gt;&lt;/MenuItem&gt;你可以看到父元件我用了兩個插槽，分別是#name, #content，由於選單都是用CSS的變化操作，所以並沒有用到slotProps，也就是子元件的資料及方法。 第二種型態：直接跳新頁面123456789101112// 父元件：第二種型態，直接跳新頁面&lt;MenuItem :show=&quot;showMenu = false&quot;&gt; &lt;template #name&gt; 優惠活動 &lt;/template&gt; &lt;/MenuItem&gt;export default &#123; data() &#123; return &#123; showMenu: true &#125; &#125;&#125;接著來看看子元件 123456789101112131415161718192021222324&lt;template&gt; &lt;div class=&quot;menu-item&quot;&gt; &lt;div class=&quot;position-absolute&quot;&gt; &lt;span class=&quot;d-inline-block mr-2&quot;&gt; &lt;slot name=&quot;name&quot;&gt;&lt;/slot&gt; &lt;/span&gt; &lt;i class=&quot;fas fa-chevron-up&quot;&gt;&lt;/i&gt; &lt;div class=&quot;menu-item__line&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;menu-item__wrapper&quot; v-if=&quot;show&quot;&gt; &lt;ul class=&quot;row d-flex align-items-center justify-content-between h-100&quot;&gt; &lt;slot name=&quot;content&quot;&gt;&lt;/slot&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/slot&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name: &#x27;MenuItem&#x27;, props: [&#x27;show&#x27;], &#125;&lt;/script&gt; 子元件除了設定要插在哪裏的name、content之外，在menu-item__wrapper內另外用v-if來傳值，切換第一種型態、第二種型態選單的關鍵，再用props去接收show的值。 Reference 官方文件：插槽內容 让你的组件千变万化，Vue slot 剖玄析微","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://wualnz.com/tags/vue/"}]},{"title":"Vue 動態切換元件","slug":"Vue-動態切換元件","date":"2020-02-04T03:15:18.000Z","updated":"2021-12-22T03:26:58.458Z","comments":true,"path":"/Vue-動態切換元件/","link":"","permalink":"http://wualnz.com/Vue-%E5%8B%95%E6%85%8B%E5%88%87%E6%8F%9B%E5%85%83%E4%BB%B6/","excerpt":"","text":"Vue 動態切換元件根據API取得的資料，動態切換元件。公司需要做模板切換，使用者可以在後台選擇layout1、layout2、layout3，分別會載入不同的layout 我們將API取得的資料放在sessionStorage.siteInfo裡，接著利用:is來做動態切換。 當是layout1時，便會切換layout-1的元件。比較特別的是，使用:is作法不需要在components再宣告一次1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;div&gt; &lt;div :is=&quot;hotGame&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/template&gt;import layout1 from &#x27;../12.index/hot_layout/layout-1.vue&#x27;import layout2 from &#x27;../12.index/hot_layout/layout-2.vue&#x27;;import layout3 from &#x27;../12.index/hot_layout/layout-3.vue&#x27;;&lt;script&gt;export default &#123; data() &#123; return &#123; hotGame: this.selectLayout() &#125;; &#125;, methods: &#123; selectLayout() &#123; let layout = JSON.parse(sessionStorage.getItem(&#x27;siteInfo&#x27;)).site_params.hot_layout switch (layout) &#123; case &#x27;layout1&#x27;: return layout1; case &#x27;layout2&#x27;: return layout2; case &#x27;layout3&#x27;: return layout3; &#125; &#125; &#125; &#125;&lt;/script&gt; 動態載入import 使用變數來動態載入模組1234567891011var &#123; hot_layout &#125; = this.$store.dispatch(&#x27;index.siteInfo&#x27;);var &#123; vendor_layout &#125; = JSON.parse(sessionStorage.getItem(&#x27;siteInfo&#x27;));var HotGame = () =&gt; import(`@/views/12.index/hot_layout/$&#123;hot_layout&#125;.vue`)var VendorGame = () =&gt; import(`@/views/12.index/vendor_layout/$&#123;vendor_layout&#125;.vue`)var c = &#x27;components&#x27;;export default &#123; components: &#123; Slider: () =&gt; import(`@/views/12.index/$&#123;c&#125;/Slider.vue`), &#125;,&#125;但是這個方法取得API總會遲一步，所以暫緩沒有使用此方法，在這邊做個紀錄。 Reference 官方文件：異步組件 Vue.js: 動態元件 Dynamic Components IT 鐵人賽 - Component 魔術方法 Day 5 VueJS - 關於 vue-router 外面的兩三事","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://wualnz.com/tags/vue/"}]},{"title":"Vue 自動化導入 SASS Mixin","slug":"Vue-自動化導入-SASS-Mixin","date":"2020-01-15T08:32:58.000Z","updated":"2021-12-22T03:26:58.458Z","comments":true,"path":"/Vue-自動化導入-SASS-Mixin/","link":"","permalink":"http://wualnz.com/Vue-%E8%87%AA%E5%8B%95%E5%8C%96%E5%B0%8E%E5%85%A5-SASS-Mixin/","excerpt":"","text":"專案需要導入全域的 Mixin，以下會介紹要怎麼設定。專案使用的是Vue CLI 3建立的，因此需要自行建立一個vue.config.js檔來修改Webpack設定 在官方Vue文件的自动化导入說明，我們可以用style-resourses-loader來加載mixin、color等需要全域使用的CSS檔。 安裝 style-resources-loader1npm install style-resources-loader接著在專案目錄最外層新增vue.config.js123456789101112131415161718192021// vue.config.jsconst path = require(&#x27;path&#x27;);module.exports = &#123; chainWebpack: config =&gt; &#123; const oneOfsMap = config.module.rule(&#x27;scss&#x27;).oneOfs.store oneOfsMap.forEach(item =&gt; &#123; item .use(&#x27;sass-resources-loader&#x27;) .loader(&#x27;sass-resources-loader&#x27;) .options(&#123; // 單隻檔案引入 resources: [path.resolve(__dirname, &#x27;./src/style/mixin.scss&#x27;)], // 多檔案引入 // resources: [&#x27;./path/to/vars.scss&#x27;, &#x27;./path/to/mixins.scss&#x27;] &#125;) .end() &#125;) &#125;&#125; 設定完後，重新啟動npm run serve，即可不用個別在component引入mixin.scss，也可以使用@include了 Reference Vue - 自动化导入 Github Style-resources-loader Module build failed: Error: Something wrong with provided resources. Make sure ‘options.resources’ is String or Array of Strings.","categories":[],"tags":[]},{"title":"Docker Network","slug":"Docker-Network","date":"2019-12-08T12:51:12.000Z","updated":"2021-12-22T03:26:58.452Z","comments":true,"path":"/Docker-Network/","link":"","permalink":"http://wualnz.com/Docker-Network/","excerpt":"","text":"Docker Network 筆記及練習 Docker Network 指令Container Port 與協議1docker port [container_ID] Docker Container IP顯示Container IP 1docker inspect [container_ID] 顯示所有 networks1docker network ls 篩選 network篩選bridge的network 1234docker network ls -f driver=bridge自訂格式 ID: Driver方式顯示docker network ls --format &#x27;&#123;&#123;.ID&#125;&#125; : &#123;&#123;.Driver&#125;&#125;&#x27; 打這個指令結果應該會像下面這樣 12345ec113447cb40 : bridge226c9faec426 : host27315156c58a : null1395d970d6de : bridge2cad3a8f93b4 : bridge 建立 network建立 network 在 host 上，會建立預設的 bridge network1docker network create 建立 bridge network1docker network create -d bridge my-bridge-network 檢查是否建立成功 1docker network ls 你應該會看到多出一行 network 是 my-bridge-network 將network和container 連在一起1docker network connect network1 [container1] [container1]可以輸入container的name或ID連線成功後，[container1]即可和其他用my-bridge-network的容器溝通 建立容器並連到network範例1234docker network create -d bridge mynetworkdocker network lsdocker run -d --name my_nginx --network mynetwork nginxdocker network inspect mynetwork檢查JSON有個container物件，有出現&quot;Name&quot;: &quot;my_nginx&quot;，表示加入成功 開新的容器叫cool，並連到mynetwork1234docker run -d --name cool --network mynetwork nginxdocker network connect mynetwork cooldocker network inspect mynetworkdocker container inspect cool 中斷連線cool Container與 mynetwork中斷連線1docker network disconnect mynetwork cool","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://wualnz.com/tags/Docker/"}]},{"title":"MacOS 安裝 GVM","slug":"MacOS-安裝-GVM","date":"2019-12-08T08:52:20.000Z","updated":"2021-12-22T03:26:58.454Z","comments":true,"path":"/MacOS-安裝-GVM/","link":"","permalink":"http://wualnz.com/MacOS-%E5%AE%89%E8%A3%9D-GVM/","excerpt":"","text":"我用MacOS作業系統，iterm2、zsh環境，這邊做個紀錄 移除 Mac 官方 go 安裝檔我們要裝GVM，要先移除官方版本的GO 安裝檔，12rm /usr/local/gorm /etc/paths.d/go 安裝 GVMzsh1zsh &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)bash1bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) 安裝完後重啟終端機，輸入gvm就會有東西了 Reference gvm on macOS installation cheatsheet","categories":[],"tags":[{"name":"Go","slug":"Go","permalink":"http://wualnz.com/tags/Go/"},{"name":"GVM","slug":"GVM","permalink":"http://wualnz.com/tags/GVM/"}]},{"title":"攻略：用Jenkins 從 0 到 1 打造強大的前端自動化工作流","slug":"攻略：用Jenkins-從-0-到1-打造強大的前端自動化工作流","date":"2019-12-06T01:49:08.000Z","updated":"2021-12-22T03:26:58.460Z","comments":true,"path":"/攻略：用Jenkins-從-0-到1-打造強大的前端自動化工作流/","link":"","permalink":"http://wualnz.com/%E6%94%BB%E7%95%A5%EF%BC%9A%E7%94%A8Jenkins-%E5%BE%9E-0-%E5%88%B01-%E6%89%93%E9%80%A0%E5%BC%B7%E5%A4%A7%E7%9A%84%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8B%95%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%B5%81/","excerpt":"","text":"這篇要教導你如何用CI/CD最可靠的工具：Jenkins來打造自動化的前端環境。會有這篇文章是因為公司的專案一直以來都是手動部署的方式，每當更新程式碼要測試時，都需要找有權限的同事幫忙手動部署，一天請同事幫忙五六次都會覺得不好意思。非常希望能夠每次在git push專案時，便會自動抓最新的程式碼並部署在測試伺服器上。 持續整合、持續交付（Continuous Integration &amp; Continous Delivery）簡稱CI/CD，盡量減少手動人力，將一些日常工作交給自動化工具，例如：環境建置、單元測試、日誌紀錄、產品部署。 如果沒有 CI/CD，前端要更新程式碼的工作流程會是這樣 本地端寫程式 提交程式碼，Push到Git Reporistory 提交程式碼，Push到Git Reporistory 終端機輸入npm run test:unit，看單元測試結果 存檔程式碼，Git Commit後並Push到Github Reporistory 連線到測試伺服器，移動到專案，git pull下來、執行npm run build 有了CI/CD後，整個流程就會變成像下面這樣 本地端寫程式 專案用了哪些工具 Git 版本控制 GitHub 程式碼託管、審查 Jenkins 自動化建置、測試、部署 Docker 可攜式、輕量級的執行環境 Slack 團隊溝通、日誌、通知 看完這篇你能得到什麼？ 實際操作，瞭解CI/CD的好處 瞭解如何設定 Jenkins 在前端 Vue 的專案上 專案環境以下的專案環境是用CentoOS Linux 7.7.1908做安裝及設定前端專案Vue、後端專案Laravel，專案有設定前後端分離，也就是前端一包專案、後端一包專案，後端只產生API給前端接Vue專案及Jenkins都安裝在測試主機上，並沒有個開 自動部署做了哪些事？自動部署會先去Github將專案最新程式碼拉下來，並開始安裝套件npm install，接著再用webpack打包檔案npm run build:prod打包完會產生一包dist資料夾，dist資料夾會對應到後端專案的MVC裡的View。 123npm cache clean -forcenpm installnpm run build:prod 步驟我會分成下面幾個步驟 Centos 安裝 Docker 用 Docker來安裝 Jenkins 設定Github hook時觸發 Jenkins 設定前後端分離 Jenkins和Slack串接，當Jenkins部署時，Slack會發出通知 Centos 安裝 Docker先在Centos卸載舊版本，以避免後續的錯誤12345678sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine接著再來安裝 Docker12345678sudo yum updatesudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2sudo yum-config-manager \\ --add-repo \\https://download.docker.com/linux/centos/docker-ce.reposudo yum install docker-ce啟動 Docker1sudo systemctl start docker設定每次開機都會自動啟動 Docker1duso systemctl enable docker 建立客製化DockerFile新增一個Dockerfile檔在伺服器的/var/dockerContainer資料夾12cd /var/dockerContainertouch Dockerfile編輯Dockerfile檔，我們會下載jenkinsci/blueocean的image並先安裝nodejs與npm，之所以要客製化是因為我安裝很多次Jenkins的NodeJS Plugin一直失敗，沒辦法跑npm install，一直報錯說找不到npm，只好徒法煉鋼，先客製化images，在images除了用現成的jenkins blueocean版本，另外也先裝好nodeJS、npm。 1234567891011# 從 DockerHub 安裝 Jenkinsci/blueocean image。FROM jenkinsci/blueocean# 指定 User 是 root，有最大權限。USER root# 設定 Container 的預設目錄位置。WORKDIR /var/jenkins_home/workspace/project# 安裝 NodeJS、Npm。RUN apk add --no-cache --update nodejs npm 編輯好Dockerfile並存檔，我們先來build image1docker build -t frontend-ui-image .成功跑完後你可以輸入docker images會看到frontend-ui的images檔，接著利用它為基底，啟動container12345678910docker run -d --name frontend-ui \\ -p 8080:8080 \\ -u root \\ -e JAVA_OPTS=-Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Taipei \\ -v /var/data:/var/jenkins_home \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v &quot;$HOME&quot;:/home \\ --restart=always \\ frontend-ui-image以下將說明參數的用途 –name frontend-ui：容器名稱命名為frontend-ui -p 8080:8080：映射出8080 Port與容器裡的8080 Port 相應 -u root：以User root身份執行，否則會沒有權限 -e JAVA_OPTS=-Dorg.apache.commons.jelly.tags.fmt.timeZone=Asia/Taipei，\b設定環境變數時區，沒有設定此選項，會導致Jenkins的時間不是UTM+8 -v /var/data:/var/jenkins_home：容器的儲存空間/var/jenkins_home 此目錄會映射到容器外的/var/data資料夾 –restart=always：當容器遇到例外的情況被STOP掉，例如是重新開機，Docker 會試著重新啟動此容器 frontend-ui-image：用Images frontend-ui-image啟動容器 順利啟動容器後，打開伺服器網址：xxx.xxx.xxx.xxx:8080，便會看到Jenkin成功畫面 進入Jenkins後，請先安裝Jenkins預設外掛 設定 Github Hook 觸發 Jenkins接著我們要來設定每次Git Push時會觸發專案啟動Jenkins，在設定前我們需要先新增專案Jenkins點擊新增作業，選取「建置 Free-Style 軟體專案」 選好之後點OK進入到下一步，接著近一步細部設定，原始碼管理區塊要設定專案網址，並設定Github的帳號密碼，讓Jenkins有權限可以讀取專案。在建置觸發程序要打勾「GitHub hook trigger for GITScm polling」，當GitHub Repository有變動時會自動通知 Jenkins 來進行編譯 除了設定Jenkins要進行編譯之外，Github Repository這端也要設定 Webhook Github 點擊專案的 Setting，加入 web-hookPayload URL 網址設定為你的Jenkins Server 網址，例：http://serverIP:8080/github-webhook/，Content Type 要設定 application/jsonSecret設定為空沒有關係，另外有詢問你什麼時候要觸發這個webhook，在圖片上是設定當只有push 事件發生時，才會觸發，當然你也可以客製化 Jest the push event：只有push事件發生才會觸發 webhook Send me everything：不管發生什麼事，都會觸發 webhook Let me select individual events.：選取這個可以客製化哪些event才要觸發 設定完會像下面這張圖片一樣 確保Server 8080的Port有開啟，沒有被防火牆擋住，開8080 Port才能讓流量進來，Github才能Call得到Jenkins 設定前後端分離Web Server是採用nginx，後端是用Php Laravel框架，前端是用webpack打包成一包dist資料夾後，用軟連結映射到後端專案的public/static、/resources/views/index.blade.php，才能順利以view方式顯示，同時也可以解決前端打後端專案的API有CROS跨網域問題。 project 是前端專案名稱backend-project 是後端專案名稱123# 直接在server上做設定ln -s /var/data/workspace/project/dist/static /home/vhost/backend-project/public/staticln -s /var/data/workspace/project/dist/index.html /home/vhost/backend-project/resources/views/index.blade.php nginx 設定12345678910111213141516171819# /etc/nginx/conf.d/projectserver &#123; listen 80; listen [::]:80; root /home/vhost/backend-project/public; index index.php index.html index.htm; server_name xx.xx.xxxx.xx; location / &#123; try_files $uri $uri/ /index.php?$query_string; &#125; location ~ \\.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125; 在Jenkins上串Salck接著設定Slack，先在Jenkins安裝Slack外掛點選「管理Jenins」-&gt; 「設定系統」-&gt; Slack區塊，設定Workspace、Credential這邊是屬於全域設定的部分，皆會套用到所有Jenkins的專案 Credential的Kind選Secret text，Secret填Slack給的Token Key，ID和Description可以自由選填至於Token Key可以從Slack 的Jenkins頁面拿到 設定成功後，可以試試看點按鈕「Test Connection」，如果成功的話，會在下方顯示Success，且Slack頻道上會有機器人說話1Slack/Jenkins plugin: you&#x27;re all set on http://www.test-jenkins:8080/ 總結一開始安裝Jenkins是用Docker Images: jenkins，預設外掛都不能安裝，才發現要裝 Images: jenkins/jenkins，而不是jenkins。用Images jenkins/jenkins啟動容器後發現第二個問題是容器內沒有node.js，裝了外掛NodeJS仍無法解決我的問題，最後還是自製Images比較快。不過CI/CD還是很單調的流程，還沒有到很複雜，至今也還在學習中，如果有問題或是有寫錯的地方，歡迎下面留言喔 [X] jenkins：images版本過舊 [X] jenkins/jenins：\b沒有nodeJS，Jenkins 外掛 NodeJS也無法使用 [X] jenkinsci/blueocean：沒有nodeJS，Jenkins 外掛 NodeJS也無法使用 [O] frontend-ui-image：自製images，jenkinsci/blueocean + 自行安裝nodeJS 之所以後來選擇images是採用jenkinsci/blueocean的版本，也是看上它有很漂亮的UI、使用者體驗佳，至今還在摸索中，如果有更多的心得會再多寫一篇文章分享，謝謝看到這裡 Reference Centos Install Docker Document 持續交付的8條原則 山姆鍋對持續整合、持續部署、持續交付的定義 永久修改以容器化方式运行的Jenkins系统时间 Introducing Blue Ocean: a new user experience for Jenkins 前端开发如何让持续集成 / 持续部署 (CI/CD) 跑起来","categories":[{"name":"自動部署","slug":"自動部署","permalink":"http://wualnz.com/categories/%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://wualnz.com/tags/Vue/"},{"name":"Jenkins","slug":"Jenkins","permalink":"http://wualnz.com/tags/Jenkins/"}]},{"title":"Vue 元件之間的傳話筒 總整理","slug":"Vue-元件之間的傳話筒-總整理","date":"2019-03-12T14:40:08.000Z","updated":"2021-12-22T03:26:58.457Z","comments":true,"path":"/Vue-元件之間的傳話筒-總整理/","link":"","permalink":"http://wualnz.com/Vue-%E5%85%83%E4%BB%B6%E4%B9%8B%E9%96%93%E7%9A%84%E5%82%B3%E8%A9%B1%E7%AD%92-%E7%B8%BD%E6%95%B4%E7%90%86/","excerpt":"","text":"使用 Vue 建構網站，會越來越多元件，元件之間的溝通非常重要，常常需要傳遞資訊，讓彼此知道，讓資訊流通是一件非常重要的事！ Props 父傳子 Parent =&gt; Child Communication $emit 子傳父 自定義事件，Child =&gt; Parent Communication Event Bus 類似於 Angular 2 的 services 用法 Props 父傳子用 Props 來傳遞資料，主元件要在外圍寫要傳什麼值進去，像是下面的範例，父元件傳了name給子元件值是Hazel。 12// 父元件 User.vue&lt;user-detail :myName=&quot;Hazel&quot;&gt;&lt;/user-detail&gt; 子元件要新增 props 屬性來接收資料，接收到的name可以直接使用在其他地方，像是下面範例，接收到從父元件傳來的name，並使用在switchName()的Methods裡。12345678910111213// 子元件 UserDetail.vue&lt;template&gt;&lt;p&gt; User Name: &#123;&#123; switchName() &#125;&#125; &lt;/p&gt;&lt;/template&gt;export default &#123; props: [&#x27;myName&#x27;], methods: &#123; switchName()&#123; return this.myName.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125; &#125;&#125; 限制 Props 資料類型Prop 還能夠驗證資料型態，比如說在子元件下我們可以這樣寫1234567// 驗證 Propsprops: [&#x27;myName&#x27;, &#x27;age&#x27;, &#x27;book&#x27;]props: &#123; &#x27;myName&#x27;: String, &#x27;age&#x27;: Number, &#x27;book&#x27;: Object&#125;當myName值傳來不是String格式便會報錯，會在 Console.log 提示開發者由於傳遞錯誤的型態。我們可以用這種方式來驗證資料，以避免程式出錯。 Emit 子傳父剛剛介紹了 Prop：父元件傳遞資料給子元件，但當子元件想要傳遞資料給父元件，該如何傳遞？我們會用到 emit 客製化事件來做到這件事 1$emit(&#x27;事件名稱&#x27;, 要傳遞的值) 以下程式碼做的處理 從子元件接收到myName的值 子元件內 reset myName 值 回傳給父元件 1234567891011121314151617// UserDetail.vue 子元件export default &#123; props: &#123; myName: &#123; type: String &#125; &#125;, methods: &#123; switchName()&#123; return this.myName.split(&#x27;&#x27;).revverse().join(&#x27;&#x27;); &#125;, resetName()&#123; this.myName = &#x27;Hazel&#x27;; this.$emit(&#x27;nameWasReset&#x27;, this.myName); &#125; &#125;&#125; 子元件用nameWasReset事件傳遞要接收訊息的父元件也要設定，將子元件設定的事件名稱用@當前綴@nameWasReset=&quot;name = $event&quot;，並存在父元件的資料name內。 小教學：關於Vue的$event$event 為 Vue內的特殊用法，相同於 JavaScript的 event$event 為子元間傳遞出來的值。 1234567891011121314// User.vue 父元件&lt;template&gt;&lt;user-detail :myName=&quot;name&quot; @nameWasReset=&quot;name =$event&quot;&gt;&lt;/user-detail&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data()&#123; return &#123; name: &#x27;Hazel&#x27; &#125; &#125;&#125;&lt;/script&gt; Vue 單向資料流單向資料流定義：只能從一個方向來修改，可以由父元件傳遞資料給子元件，但子元件無法反過來直接改變父元件的資料，會引起報錯。也就是只能父元件影響子，子無法影響父。 總結一句話：單向資料流只能父傳子、子傳父。Unidirectional Data Flow from top to bottom. 如果 A 的子元件想傳遞給 B 的子元件，平行傳資料是可行的嗎？在Vue內，由於單向資料流的關係，無法子傳給子，是無法平行傳資料。 CallBack Function透過Props傳遞 function 也能做到元件溝通父元件利用 Props 傳遞 resetFn()，值帶入methods的resetName()方法給子元件。而子元件則用Props接收。 12345678910111213141516171819202122// 父元件&lt;template&gt;&lt;user-detail :myName=&quot;name&quot; @nameWasReset=&quot;name =$event&quot; :resetFn=&quot;resetName&quot;&gt;&lt;/user-detail&gt;&lt;/template&gt;&lt;script&gt;import UserDetail from &#x27;./UserDetail.vue&#x27;;export default &#123; data()&#123; return &#123; name: &#x27;Hazel&#x27; &#125; &#125;, resetName()&#123; this.name = &#x27;Hazel&#x27;; &#125; &#125;, components: &#123; UserDetail: UserDetail, &#125;&#125;&lt;/script&gt; 下列程式碼是子元件接受來自父元件的resetFn()，型態是Function。當點擊按鈕時會呼叫resetFn()，而值則是從父元件傳遞來的。123456789101112131415// 子元件&lt;template&gt; &lt;button @click=&quot;resetFn()&quot;&gt;Reset Function&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: &#123; myName: &#123; type: String &#125;, resetFn: Function, &#125;&#125;&lt;/script&gt; 兄弟(Sibling)元件間的傳值Communication between sibling components 假設我們今天有 A 與 B 的子元件，要如何實行 A 與 B 間的傳遞？ 父元件：User A子元件：UserEdit B子元件：UserDetail 123456789101112131415161718// 父元件 User 傳遞值&lt;template&gt;&lt;user-edit :userAge=&quot;age&quot; @ageWasEdited=&quot;age = $event&quot;&gt;&lt;/user-edit&gt;&lt;user-detail :userAge=&quot;age&quot;&gt;&lt;user-detail&gt;&lt;p&gt;User Age: &#123;&#123;userAge&#125;&#125;&lt;/p&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data()&#123; return &#123; age: &#x27;25&#x27; &#125; &#125;&#125;&lt;/script&gt; A 與 B 子元件皆接收 userAge 資料，並驗證 Number值A元件用$emit：ageWasEdited傳回age值為30給父元件B元件也會一併跟著更改。 1234567891011121314151617181920// A 子元件：UserEdit&lt;template&gt; &lt;p&gt;User Age: &#123;&#123;userAge&#125;&#125;&lt;/p&gt; &lt;button @click=&quot;editAge&quot;&gt;Edit Age&lt;/button&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: &#123; userAge: Number &#125;, methods: &#123; editAge()&#123; this.userAge = 30; this.$emit(&#x27;ageWasEdited&#x27;, this.userAge); &#125; &#125;&#125;&lt;/script&gt; 以下是B元件 UserDetail ，B元件作用為 接收父元件的 UserAge 值1234567891011// B 子元件：UserDetail&lt;template&gt;&lt;p&gt;User Age: &#123;&#123;userAge&#125;&#125;&lt;/p&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: &#123; userAge: Number &#125;&#125;&lt;/script&gt;從上面範例可以看出，當我們需要平行傳遞兄弟間的元件資料，可以用以下做法。 父用props傳遞給 A 子元件 A 子元件 子用 $emit 回傳父，改變父資料 再由父傳給另一個 B 子元件 Event Bus：溝通橋樑 Event Bus 的定位是事件通知。 Event Bus使用時機：有件事要被很多人知道，可以用Event Bus來做傳遞，當傳話筒的角色，也可以形容成溝通橋樑的概念。 EventBus像元件一樣，擁有data, methods等屬性可以使用。 Event Bus 透過 $emit 來發送資料、用 $on 來接收訊息。 下列的範例會示範 A子元件與B子元件的溝通，但不會傳值到父元件。 在main.js 建立一個 Vue instance 叫 eventBus 要使用event bus傳遞訊息的元件上，import event bus進來 在元件的methods上使用 eventBus.$emit 傳遞值 步驟一：創建 eventBus 的 instance注意：要把eventBus建立在new Vue上，否則會報錯。123456// main.jsexport const eventBus = new Vue();new Vue(&#123; el: &#x27;#app&#x27;, render: h =&gt; h(App)&#125;)步驟二：要使用傳遞資料的元件上，import eventBus1234// userEdit 元件&lt;script&gt;import &#123; eventBus &#125; from &#x27;../main&#x27;;&lt;/script&gt; 步驟三：用eventBus.$emit 傳遞值eventBus 是一個 Vue instance，而 Vue instance 內建有 $emit 的methods可以用。 eventBus.$emit(&#39;事件名稱&#39;, 值) 12345678910111213&lt;script&gt;import &#123; eventBus &#125; from &#x27;../main&#x27;;export default &#123; props: [&#x27;userAge], methods: &#123; editAge()&#123; this.userAge = 30; // this.$emit(&#x27;ageWasEdited&#x27;, this.userAge) 第二種方法：$emit傳值 eventBus.$emit(&#x27;ageWasEdited&#x27;, this.userAge) // 第三種方法：eventBus傳值 &#125; &#125;&#125;&lt;/script&gt; B 子元件 要接收值，也需要import eventBus，而接收值要使用到$on eventBus.$on(&#39;事件名稱&#39;, callback function)接收ageWasEdited事件，回傳的data用callback function，再針對data做一系列的處理。123456789101112131415// B子元件 UserDetail&lt;script&gt;import &#123; eventBus &#125; from &#x27;../main&#x27;;export default &#123; props: &#123; userAge: Number &#125; created()&#123; eventBus.$on(&#x27;ageWasEdited&#x27;, (age) =&gt; &#123; console.log(age); this.userAge = age; // 將傳來的age存進userAge內 &#125;); &#125;&#125;&lt;/script&gt; EventBus 方法eventBus 除了可以讓子元件平行溝通之外，也能建立methods方法，並讓元件們共用。 建立 eventBus 的 Vue instance，建立 changeAge 的 methods 在要使用的子元件上 import eventBus main.js上建立eventBus，並設定changeAge方法，接收參數age12345678// main.jsexport const eventBus = new Vue(&#123; methods: &#123; changeAge(age)&#123; this.$emit(&#x27;ageWasEdited&#x27;, age) &#125; &#125;&#125;)子元件 UserEdit.vue 利用 eventBus 的 changeAge 方法，傳遞userAge資料12345678910import &#123; eventBus &#125; from &#x27;../main&#x27;;export default &#123; props: [userAge], methods: &#123; editAge()&#123; this.userAge = 30; eventBus.changeAge(this.userAge); &#125; &#125;&#125;同樣的 eventBus 也像元件一樣也擁有 data的屬性可儲存，這可以讓我們自由運用。 結論 props：父傳子 emit：子傳父 eventBus：使用上非常方便，但維護性不高，最好把握幾個原則 僅限於同層的兄弟元件通訊，父子通訊透過 Props / $emit 來進行溝通 eventBus缺點是記憶體會殘留，有監聽的地方要記得去清除，像是beforeDestroy等。 專案規模很大，可以考慮用 vuex來管理共同狀態。 以上重整理 Vue 元件間如何傳遞資料，若有誤歡迎留言告訴我，謝謝。 Reference [Vue] 跟著 Vue 闖蕩前端世界 - 07 組件溝通 event bus","categories":[],"tags":[{"name":"vue","slug":"vue","permalink":"http://wualnz.com/tags/vue/"}]},{"title":"FrameWork 7 與 H5 邂逅的雷坑","slug":"FrameWork-7-與-H5邂逅的雷坑","date":"2018-12-13T05:35:45.000Z","updated":"2021-12-22T03:26:58.452Z","comments":true,"path":"/FrameWork-7-與-H5邂逅的雷坑/","link":"","permalink":"http://wualnz.com/FrameWork-7-%E8%88%87-H5%E9%82%82%E9%80%85%E7%9A%84%E9%9B%B7%E5%9D%91/","excerpt":"","text":"環境配置：Vue + FrameWork 7 ，外面包一層Apk，做成App供手機測試以下將紀錄在實作時遇到的雷坑及如何解決的。 input 送出按鍵123456789101112131415161718192021&lt;!-- 驗證碼: authenticationCode Start --&gt;&lt;f7-list-item v-else&gt; &lt;f7-input type=&quot;tel&quot; class=&quot;input-border&quot; placeholder=&quot;input verification code&quot; :value=&quot;authenticationCode&quot; label=&quot;Phone&quot; @keyup.enter=&quot;confirmActive&quot; @input=&quot;authenticationCode = $event.target.value&quot; pattern=&quot;[0-9\\.]*&quot; error-message=&quot;Verification code only be a number.&quot; clear-button validate required maxlength=&quot;4&quot; minlength=&quot;4&quot; &gt;&lt;/f7-input&gt;&lt;/f7-list-item&gt;&lt;!-- 驗證碼 End --&gt;&lt;/f7-list&gt; 遇到一個問題是：手機開啟App後，按下送出鍵會原地Refresh重整頁面，不會真的送出。於是使用`@keyup.enter.native=”confirmActive”`方法，發現仍行不通。 經過萬能的Google搜尋、Debugger後，發現了原則： `@keyup.enter=”confirmActive”=&gt; 手機按下送出後，執行confirmActive方法@keyup.enter.native=”confirmActive”` =&gt; 電腦按下送出後，執行confirmActive方法","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://wualnz.com/tags/Vue/"},{"name":"FrameWrok 7","slug":"FrameWrok-7","permalink":"http://wualnz.com/tags/FrameWrok-7/"}]},{"title":"快來架設超潮的NodeBB論壇在Heroku上","slug":"快來架設超潮的NodeBB論壇在Heroku上","date":"2018-12-10T15:10:09.000Z","updated":"2021-12-22T03:26:58.460Z","comments":true,"path":"/快來架設超潮的NodeBB論壇在Heroku上/","link":"","permalink":"http://wualnz.com/%E5%BF%AB%E4%BE%86%E6%9E%B6%E8%A8%AD%E8%B6%85%E6%BD%AE%E7%9A%84NodeBB%E8%AB%96%E5%A3%87%E5%9C%A8Heroku%E4%B8%8A/","excerpt":"","text":"架設 NodeBB 論壇 在 Heroku 上This tutorial is introduce how to install NodeBB forum with MongoDB on MacOS and how to create in Heroku application.I look up official document, and step by step do it, but has some error. I’m spending much more time to fixing them.So I write this topic. I hope this tutorial can help somebody. 架設Nodebb論壇照著官方文件的步驟一步步做，但仍出現一些狀況無法順利架設在 Heroku上，因此寫下筆記記錄下來。 下列教學總共會分成幾個步驟 將NodeBB原始碼下載到電腦上 架設環境在本機上 建立專案在Heroku 上 設定專案連接到 MLab （Mango）資料庫 架設環境 架設環境 為Mac 10.14 OS 安裝前必備品下列將列出如何安裝 NodeBB在本機環境下，且架設在heroku上，請先確保您有以下環境、知識。 安裝 Heroku Cli，可以在終端機執行像heroku create、heroku login等指令。 具備基本的 Github 知識 Mac 已有安裝 HomeBrew Heroku 已擁有帳號 開始安裝NodeBB 下載到本機Download NodeBB to your localhost.首先先把專案載入到電腦本機上，開啟終端機並移動到桌面，輸入12git clone https://github.com/NodeBB/NodeBB.gitcd NodeBB便會在你的桌面上建立一個NodeBB資料夾，裡面便是原始碼。 安裝MongoDB若你已有安裝，可跳過這步驟。若你系統尚未有HomeBrew套件管理工具，請移駕至Homebrew官網下載並安裝。 1brew install mongodb 安裝完以後，系統並不會直接開啟，需要輸入以下指令1brew services start mongodb輸入後，mongodb才能在系統上使用哦！ Heroku 建立專案首先先確保你有安裝Heroku Cli，若沒有請先Google查詢先安裝，否則下列指令皆無法執行。 我們先在終端機上輸入以下指令，登入自己的heroku帳號1heroku login接著會提示你輸入帳號及密碼，輸入完沒有打錯的話，便會成功登入。接著在Heroku上直接建立專案，nodebb-forum可以自行取名，或著直接打heroku create也可以，heroku便會隨機幫你建立一個名稱。1heroku create twlesmatches-forum建立好專案後，我們要去設定MLab MongoDB 與自己的heroku帳號 建立連結，可以先選擇SendBox的免費專案MLab建立連接點擊上列連接，並找到按鈕「Install mLab MongoDB」進入頁面。他會要求你登入帳號，並選擇要連接的專案。像我剛剛在heroku上建立專案叫twlesmatches-forum，便在這個視窗輸入tw，便會跳出來囉，選好專案後便點擊按鈕「Provision add-on」即可加入至專案。或是比較省事一點，直接在終端機輸入以下指令，並選擇sandbox的免費專案。1heroku addons:create mongolab:sandbox NodeBB 與 Mongo資料庫 連接成功連接後，我們便來設定與資料庫連接在終端機上輸入以下指令，請記得必須要在NodeBB的根目錄才行1./nodebb setup如果輸入setup指令後，出現ERROR訊息：error: NodeBB could not connect to your Mongo database. Mongo returned the following error: Authentication failed.這段Error訊息，是說專案沒辦法連接本機上的Mongo，是因為權限不夠高的關係。 \b請在終端機上輸入以下指令，進入mongo資料庫的介面1mongo如果無法順利進入mongo的介面，請先檢查是否有安裝成功mongoDB或著是brew service restart mongo，將服務重啟。 順利進入介面後，請再輸入以下指令便可成功切換到nodebb的資料庫12&gt; use nodebbswitched to db nodebb Mongo 簡單指令mongo介面下列有幾個指令可以檢查這個nodebb資料庫的使用者12db.getUsers() # 查詢所有使用者show roles; # 秀出所有的權限角色，像readWrite, userAdmin 輸入上面的指令像是db.getUsers()會發現，nodeBB資料庫內沒有任何一個使用者，所以我們要建立一個使用者，並且有足夠高的權限可以操作，角色為userAdmin。 我們在終端機上輸入以下指令，在輸入前，請將username, password替換成你想要設定的名稱及密碼，這組設定將會是你本機上連接資料庫時的帳號及密碼，要記得！1db.createUser(&#123;user:&#x27;username&#x27;, pwd:&#x27;password&#x27;, roles:[&#123;role:&#x27;userAdmin&#x27;, db:&#x27;db-name&#x27;&#125;]&#125;)若想要設定其他權限，可以輸入show roles;，查詢資料庫內其他角色的權限，再輸入一次上述指令，將role: &#39;userAdmin&#39;改成其他你想要的role即可。 設定好之後，並重新再跑一次setup指令1./nodebb setup輸入後他會跑一下子，接著會要求你設定一些選項，這邊非常重要關係到你能不能架設在Heroku上連接資料庫成功，所以輸入時要提高注意力一下XD，不能全部都按Enter！！（我第一次架失敗時就是全部都按Enter XD）1URL used to access this NodeB(http://localhost:4567) https://twlesmatches-forum.herokuapp.com/首先要設定的是URL，請在這裡填上你的heroku application的url，不知道的話請開新的終端機視窗輸入heroku open便會跳出你專案的網址，格式會像是這樣：https://twlesmatches-forum.herokuapp.com/ 接著要你設定 NodeBB secret，不用理她，Enter跳過！1Please enter a NodeBB secret (ca7c68c3-edce-4a7d-80f8-7e5e757ca5ca) 接著會詢問你要使用的Database是什麼？由於NodeBB只允許Mongo或Redis這兩款資料庫可使用，我們前面辛苦安裝Mongo了，就直接Enter吧XD。（Enter代表輸入他預設的指令）1Which database to use (mongo)接著會出現重頭戲！這個NodeBB要連接的\b\b資料庫網址是什麼？也有出現提示格式如何輸入。12342018-12-10T14:52:49.320Z [14213] - info:Now configuring mongo database:MongoDB connection URI: (leave blank if you wish to specify host, port, username/password and database individually)Format: mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]這很簡單，開啟Heroku網站，並登入帳號後選擇你剛剛建立的application專案，進入專案後到Setting找到Config Vars，就有資料庫網址了！把他複製貼上到終端機上即可囉。（也可直接輸入heroku config，便會出現資料庫的網址）輸入完後，便會自動跑完安裝啦跑完安裝後要注意，會有個提示訊息告知你的Admin系統管理員帳號及密碼是多少，不要忽略了哦 接著剩下最後兩個步驟了，快大功告成啦！請在終端機輸入以下指令，建立Procfile在Heroku上1web node app.js --no-daemon教學文件是打loader.js，但照著打反而出錯，爬文後發現打app.js才能成功架設。輸入完後，請git commit做紀錄後推上去。12git add -f Procfile config.json package.json build &amp;&amp; git commit -am &quot;adding Procfile and configs for Heroku&quot;git push heroku master推上去heroku master要稍等一會兒時間。推完後，請再輸入終端機，將dyno設定為1（free）的等級1heroku ps:scale web=1 大功告成，快上去看看架設成功了沒！輸入下列指令會自動開啟專案的網站哦1heroku open 如果上述教學有任何錯誤或是需要糾正的地方，請務必留言告訴我，謝謝各位^_^ Reference 官方文件：install nodebb in heroku Install NodeBB in Heroku Heroku 運行類別、 Procfile、常用指令筆記 NodeBB 基礎使用與開發","categories":[],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://wualnz.com/tags/node-js/"},{"name":"forum","slug":"forum","permalink":"http://wualnz.com/tags/forum/"},{"name":"heroku","slug":"heroku","permalink":"http://wualnz.com/tags/heroku/"}]},{"title":"Vue 元件化概念","slug":"Vue-元件化概念","date":"2018-11-26T14:30:47.000Z","updated":"2021-12-22T03:26:58.458Z","comments":true,"path":"/Vue-元件化概念/","link":"","permalink":"http://wualnz.com/Vue-%E5%85%83%E4%BB%B6%E5%8C%96%E6%A6%82%E5%BF%B5/","excerpt":"","text":"Vue 元件化概念 筆記 使用元件化切出複雜頁面 使用vue-router 做耊面 使用 vuex（資料中心）統一狀態更動 元件化 App.vue是大元件 什麼是元件化？ 將網頁依照頁面、功能拆分 小至一個按鈕、大到整個頁面或程式 Single File ComponentVue 元件化概念 新增 / 使用元件 傳遞屬性 props 釋放事件 $emit 元件重用控制 :key 新增 / 使用元件每個元件都有自己的 data / computed / methodsdata需要是回傳資料的函數（非物件） 12345678Vue.component(&#x27;post&#x27;, &#123; template:: &#123; ... &#125;, data()&#123; ... &#125;&#125;) 傳遞屬性 propsVue Props Document使用 v-bind:屬性 或 :屬性，傳值給元件1&lt;component v-bind:value=&#x27;10&#x27; :post=post&gt;&lt;component&gt;元件收到值後，會當成內部資料使用12345678910data: &#123; props: [&#x27;propname&#x27;], data: &#123;...&#125;&#125;或是data: &#123; props: &#123; title: String &#125;&#125;propD: { dafault: 100} 釋放事件 $emit123&lt;component @save=&#x27;...&#x27;&gt;&lt;component&gt;this.$emit(&#x27;save&#x27;, somedata) 釋出 save事件，並釋出一些 data在元件的外面儲存，收到卡片@save的事件，事件save後，卡片資料放上去。 重用控制 :key1&lt;component @key=&#x27;...&#x27;&gt;&lt;component&gt; 根據 key 有沒有改變，控制資料是否要變更。 比如說控制卡片列表是否要重新渲染，是否要重新產生方塊 雜學校的每個文章：卡片每個都有獨立的key，如果規則不同（標題不同），則重新產生卡片。使用時機：文章建立、頁面建立時 初始化專案 pug pug-loader pug-filters sass安裝 Pug、Sass 套件12npm install pug pug-loader pug-filters --savenpm install sass sass-loader node-sass --save 指定開發語言12&lt;template lang=&#x27;pug&#x27;&gt;&lt;/template&gt;&lt;style lang=&#x27;sass&#x27;&gt;&lt;/style&gt; 建立專案環境，專案名稱：vuecomp，採用webpack-simple樣板1234vue init webpack-simple vuecompcd vuecompnpm install //安裝相依性的套件npm run dev // hot load方式開啟本機環境：localhost:8080 data不是 object，是函數喔","categories":[],"tags":[]},{"title":"JavaScript ES6 物件 Literal Upgrades：動態命名","slug":"ES6-Object-Literal-Upgrades：動態命名","date":"2018-11-25T11:12:34.000Z","updated":"2021-12-22T03:26:58.452Z","comments":true,"path":"/ES6-Object-Literal-Upgrades：動態命名/","link":"","permalink":"http://wualnz.com/ES6-Object-Literal-Upgrades%EF%BC%9A%E5%8B%95%E6%85%8B%E5%91%BD%E5%90%8D/","excerpt":"","text":"ES6 Object Literal UpgradesES6 擴展：物件實體命名，透過[]的方式，可以帶入變數，讓程式碼更好維護、管理。 運用方式：像是對物件裡的屬性命名時，能夠用像是組字串的方式，讓命名名稱更有彈性。舉例：像是我建立一個tShirt的物件，裡面有屬性是Color：color色碼 1234567const key = &#x27;pocketColor&#x27;;const value = &#x27;#d6b161&#x27;;const tShirt = &#123; [key]: value,&#125;console.log(tShirt); console.log後的結果，[key]是什麼？沒錯，就是’pocketColor’: ‘#d6b161’ 假設今天的目的是在一個物件裡放A顏色、A相反的顏色，並配對值和A相反的顏色命名為pocketColorOppsite，並用invertColor函數來取出顏色的相反我們可能會這樣寫： 12345678const tShirt = &#123; [key]: value, pocketColorOpposite: invertColor(value)&#125;function invertColor(color) &#123; return &#x27;#&#x27; + (&quot;000000&quot; + (0xFFFFFF ^ parseInt(color.substring(1),16)).toString(16)).slice(-6);&#125; 套用 ES6 擴展物件屬性，我們可以帶入變數的方式ES6 的寫法可以這樣下：1234const tShirt = &#123; [key]: value, [`$&#123;key&#125;Opposite`]: invertColor(value)&#125;透過[]方式，屬性名稱也可以使用$&#123;&#125;的方式放入變數也會較好維護。 Reference ES6 Object Literal Upgrades ECMAScript 6 入門","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://wualnz.com/tags/ES6/"}]},{"title":"JavaScript30/08 | Fun With HTML Canvas 筆記","slug":"JavaScript30-08-Fun-With-HTML-Canvas-筆記","date":"2018-10-30T15:42:20.000Z","updated":"2021-12-22T03:26:58.454Z","comments":true,"path":"/JavaScript30-08-Fun-With-HTML-Canvas-筆記/","link":"","permalink":"http://wualnz.com/JavaScript30-08-Fun-With-HTML-Canvas-%E7%AD%86%E8%A8%98/","excerpt":"","text":"JavaScript30/08 | Fun With HTML Canvas 筆記 Demo 效果 完成 Day8 需要用到的屬性 Canvas基本屬性 getContext() lineCap lineJoin beginPath()調整色彩、寬度 lineWidth fillStyle strokeStyle繪製屬性 beginPath() lineTo(x, y) stroke() Event：用各種事件來控制 isDrawing 開關 mousedown mouseup mouseout mousemove 步驟 將 Canvas 元素存入變數，設定 Canvas 寬與高 利用 getContext(‘2d’)，來獲取值 ctx 設定 ctx 的基本屬性 線條顏色（hsl） 線條寬度（lineWidth) 線條末端的形狀 繪畫效果 設定繪圖中的開關（isDrawing） 監聽滑鼠事件，根據不同事件，將開關設定為 true 或 false 動態設定彩虹漸變（利用 hsl 的 h 值，以 h++更改顏色） 動態設定：當繪畫時，線條由細到粗、由粗到細 Canvas 起手式以下為 Canvas 的基本用法將 Canvas 元素存入變數 canvas內，並設定 Canvas 寬與高1&lt;canvas id=&#x27;draw&#x27; width=&#x27;800&#x27; height=&#x27;800&#x27;&gt;&lt;/canvas&gt; 設定 Canvas 寬高 1234const canvas = document.querySelector(&#x27;#draw&#x27;);const ctx = canvas.getContext(&#x27;2d&#x27;);canvas.width = window.innerWidth;canvas.height = window.innerHeight; 接著，設定用來 ctx 吧 lineCap：筆觸的形狀，可以設為 round、butt、square lineJoin：線條比較方式 lineWidth：線條寬度 strokeStyle：線條顏色 fillStyle：填充顏色用 ctx 繪製 Canvas beginPath()：開始畫新的路徑 stroke()：繪製線條 moveTo(x,y)：以x軸、y軸為座標位置，操作起點 lineTo(x,y)：同樣以x,y軸為坐標，從moveTo到lineTo會畫出一條線 設定繪圖開關理想結果是像小畫家一樣，當點滑鼠左鍵便開始畫線條，直到放開左鍵，所以我們要做一個叫isDrawing的開關，用來控制 繪圖中 / 結束繪圖的狀態。 當點擊左鍵，表示正在畫畫，isDrawing =&gt; true，isDrawing開啟。 當放開左鍵，表示結束畫畫，isDrawing =&gt; flase，isDrawing關閉。 12345let isDrawing = false;canvas.addEventListener(&#x27;mousedown&#x27;, isDrawing = ture);canvas.addEventListener(&#x27;mousemove&#x27;, draw);canvas.addEventListener(&#x27;mouseup&#x27;, isDrawing = false);canvas.addEventListener(&#x27;mouseout&#x27;, isDrawing = false); 當點擊滑鼠左鍵開始畫圖，便是mousedown，一但點擊左鍵，將isDrawing開關變成 ture。當滑鼠開始移動時，便執行draw function，裡面將會做一些 Canvas的繪製屬性動作，像是beginTo, lineTo, moveTo而滑鼠放掉（mouseup）、滑鼠移出canvas的範圍時（mouseout），便將isDrawing變更為 false，代表使用者已不在繪畫中狀態。 線條銜接問題若第一次畫完後，想再畫第二次，會發現銜接的線條是從上一次開始。但我們希望理想結果是：不要銜接上一次畫的線條為了解決這樣的狀況，我們需要更新lastX, lastY，意味著最後滑鼠的x, y軸的座標位置。 要更新座標位置的有兩處 當正在繪圖中（isDrawing = ture）時，draw function需更新座標。 監聽點擊滑鼠左鍵時，要開始繪圖時，需更新最後位置狀態如下列程式碼所展現，e.offsetX, e.offsetY 則為滑鼠在網頁上的座標位置，宣告變數lastX, lastY並指定給他們，即可解決線條銜接問題，每一次點擊滑鼠左鍵都是新的開始囉！ 123456789101112const draw = () =&gt; &#123; ctx.beginPath(); ctx.moveTo(lastX, lastY); ctx.lineTo(e.offsetX, e.offsetY); ctx.stroke(); [lastX, lastY] = [e.offsetX, e.offsetY];&#125;canvas.addEventListener(&#x27;mousedown&#x27;, (e) =&gt; &#123; isDrawing = ture; [lastX, lastY] = [e.offsetX, e.offsetY];&#125;) 動態變動線條顏色、粗細線條顏色我們以hsl(0, 100%, 50%)來表示，hsl(0, 100%, 50%)，這三組數字個別代表的是色相 Hue、飽和度 Saturation、亮度 Lightness，我們將會把色相替代為動態變數，以變更顏色。對 hsl 想要最快速了解，可以前往Mother-Effing，直接展示給你看 hsl的數值及呈現顏色。 動態設定筆觸顏色今天想要做到的理想效果是：隨著滑鼠移動畫線條時，顏色也會跟著改變，很簡單，只要將其中一個數值（0, 100%, 50%）改為變數，並將變數每次畫完時都遞增。粗細也是囉，Canvas 用 lineWidth來控制線條的粗細程度，將固定數值改為動態變數取代，並將動態變數遞增即可。 要注意的是 hsl值的色相（hue）值最大為 360，所以也需要另外設條件是 當 hue &gt; 360，hue = 0 歸零開始。 動態設定筆觸粗細至於控制筆觸大小，設定判斷式：當超過某值時便將變數遞減，當小於某值時便把變數遞增即可達成囉。 1234567891011121314151617181920let hue = 0;let controlLineWidth = 50;ctx.strokeStyle = `hsl($&#123;hue&#125;, 44%, 50%)`;ctx.lineWidth = controlLineWidth;ctx.beginPath(); // 開新的路徑ctx.moveTo(lastX, lastY);ctx.lineTo(e.offsetX, e.offsetY);ctx.stroke(); // 畫線hue++; // 畫線結束後，將動態變數hue遞增hue &gt; 360 ? hue = 0 : &#x27;&#x27;; // 控制筆觸粗細大小，設定判斷式let direction = ture;if (ctx.lineWidth &gt; 100 || ctx.lineWidth &lt; 80 ) &#123; direction = !diection;&#125;direction ? controlLineWidth++ : controlLineWidth--; Reference Mother-Effing 查詢 HSL 08 HTML5 Canvas 实现彩虹画笔绘画板指南","categories":[],"tags":[{"name":"js30","slug":"js30","permalink":"http://wualnz.com/tags/js30/"}]},{"title":"Canvas：前端特效動畫的基礎","slug":"Canvas：前端特效動畫的基礎","date":"2018-09-13T03:21:09.000Z","updated":"2021-12-22T03:26:58.452Z","comments":true,"path":"/Canvas：前端特效動畫的基礎/","link":"","permalink":"http://wualnz.com/Canvas%EF%BC%9A%E5%89%8D%E7%AB%AF%E7%89%B9%E6%95%88%E5%8B%95%E7%95%AB%E7%9A%84%E5%9F%BA%E7%A4%8E/","excerpt":"","text":"Canvas 基礎特性 可以自由繪製的元件區域 可以控制每個像素的顏色與繪製 有很高的操控度，就像遙控器 可以把他當成一張動態隨時可更動的圖片 掌握 Canvas 繪製圖型 向量概念 三角函數數學 物件導向開發（拆成函件或物件變成小零件，來操作。方便除錯與維護） 點線面構成圖形 用點和線連成面 根據路徑填色或畫線 Canvas 的座標系方向 原點預設在左上角(0,0)也因為原點在左上角，因此 Y軸 增加是往下跑的2 . 角度方向是逆時鐘的 如何開始畫 Canvas 初始化 Init Canvas Element12var canvas = document.getElementById(&#x27;canvas&#x27;)var cvs = canvas.getContext(&#x27;2d&#x27;) Setting Canvas 畫布尺寸12canvas.width = window.innerWidthcanvas.height = window.innerHeight 開始畫圖，構成三角形 我要開始新的路徑cvs.beginPath() 點移到多少cvs.moveTo(50, 50) 線填滿cvs.lineTo(100, 100)cvs.lineTo(250, 20) 關閉路徑cvs.closePath() 填滿顏色cvs.fillStyle=&#39;black&#39;cvs.fill() Canvas 矩形繪圖函數 填滿矩形fillRect(x,y,w,h) 繪製線框矩形（正方形但沒有填滿、只有邊框）strokeRect(x,y,w,h) 清除矩形範圍清除指定矩形區域內的內容，使其變為全透明。clearRect(x,y,w,h) (x,y,w,h)各代表什麼意思？x,y 表示從原點（左上角）為出發的座標位置width, height表示矩形的寬與高 路徑繪圖路徑開始與封閉：beginPath / closePath移動與畫線：moveTo / lineTo / arc指定填色或線條顏色： fillStyle / lineStyle把路徑填色或描出來 stroke / fill 轉移 Translate(x,y) Rotate(deg)以當下為中心做旋轉 scale(x,y) 狀態的保存與還原將所有繪製的畫布放在 ctx.save()和ctx.restore()，能預防被污染。 ctx.save()儲存當下的座標 ctx.restore()還原上一個儲存的狀態 還原的原則：先進後出(stack)，像是小畫家回上一步的狀態 範例：利用儲存狀態，將函數產生的座標變化限制在函數內123456function drawSomething(x, y, angle) &#123; ctx.save() ctx.translate(x, y) ctx.rotate(deg) ctx.restore()&#125; 矩陣利用 setTransform 來設定矩陣1ctx.setTransform(A, B, C, D, E, F)重設狀態：ctx.setTransform(1, 0, 0, 1, 0, 0) Reference Web APIs Canvas 介紹 | MDN","categories":[],"tags":[{"name":"canvas","slug":"canvas","permalink":"http://wualnz.com/tags/canvas/"}]},{"title":"為什麼前端要學Vue.js？","slug":"為什麼前端要學Vue-js？","date":"2018-09-12T07:11:18.000Z","updated":"2021-12-22T03:26:58.461Z","comments":true,"path":"/為什麼前端要學Vue-js？/","link":"","permalink":"http://wualnz.com/%E7%82%BA%E4%BB%80%E9%BA%BC%E5%89%8D%E7%AB%AF%E8%A6%81%E5%AD%B8Vue-js%EF%BC%9F/","excerpt":"","text":"Vue.js 解決了什麼問題？當考慮要不要學習新技術時，要先問自己幾個問題 這個技術解決了什麼樣的問題？羊毛出在羊身上，這個技術之所以被研發出來，必有其因。 這個技術有沒有同類型的替代品？比較各自的優缺點 我花時間成本去學習這個技術，對我有什麼好處？同樣的時間花去學別的技術，是不是更好？ 有什麼實際的問題我可以實用這項技術直接解決？ 定義目標以上這些問題是定義目標，除了增強學習動力之外，也是防止浪費時間學一門沒什麼用的技術。人的時間與精力有限，於是「選擇」變得很重要。要將有限的時間、精力投其所好。 為什麼要使用 Vue.js？ 讓資料與 HTML 能夠完整分離 將網頁資料存進「狀態」裡，容易管理。不需監聽才能得知網頁當下值。根據資料自動複製 HTML、設定HTML屬性 將資料與網頁雙向同步同步更新資料與網頁的資料 加快開發、程式可讀性增加 Vue.js 初始化123456new Veu(&#123; el: &#x27;#app&#x27;, data: &#123; &#125; //資料保存狀態&#125;) 資料替換 &#123; &#125;文字 與 HTMLv-html指定資料時可進行額外計算，使用Js表達式1234data: &#123; text: &#x27;Hello&#x27;, htmlText: &#x27;&lt;p&gt;Hello HTML&lt;/p&gt;&#x27;&#125; v-bind:href 可簡寫成 :ahref v-if：條件不符合時不產生 HTMLv-show：條件不符合時以 CSS 隱藏。（display: none）v-else：其餘狀況，當物件存在時才顯示。 v-model 雙向綁定資料當使用者輸入變動時，會同步反應資料。 指定 v-model 資料型別確保同步時，使用者變動反應的資料是數字或是布林值 可應用：打勾時變更為true，撲克牌便會翻開 例如：type為number或checkbox，來更動資料是否為布林值 12input(type=&#x27;number, v-model=&#x27;綁定資料&#x27;)input(type=&#x27;checkbox&#x27;, v-model=&#x27;綁定資料&#x27;) 計算屬性 coumputed computed 會建立「虛擬屬性」 不實際建立在資料data內，但會建立虛擬的data 雙向計算屬性：利用到 getter、setter取得值或是設定值可以觸發額外動作 getter 取得ssetter的實際值 setter 設定值 常應用在 總價、過濾後的清單或是動態 CSS 例如：購物車的組合價格（商品價格+運費）、組合名字1h3 &#123;&#123; price &#125;&#125;1234567891011121314var vm = new Vue(&#123; el: &#x27;h3&#x27;, data: &#123; fullPrice: 3000, discount: 0.85, shoppingFee: 60 &#125;, computed: &#123; price()&#123; let result = this.fullPrice * this.discount return result + this.shoppingFee // 2610$ &#125; &#125;&#125;)利用computed建立出price的虛擬屬性，來組合價格 getter 與 setter雙向綁定，指定getter與setter 1input(v-model=&#x27;fullName&#x27;) 123456789101112131415data: &#123; firstName: &#x27;&#x27;, lastName: &#x27;&#x27;&#125;,computed: &#123; fullname: &#123; get()&#123; return this.firstName + &#x27;,&#x27; + this.lastName &#125;, set(value)&#123; this.firstName = value.split(&#x27;,&#x27;)[0] this.lastName = value.split(&#x27;,&#x27;)[1] &#125; &#125;&#125; get()會取得使用者輸入的firstName與lastNameset()則會開始處理 get得到的值 監看變化 watch 變數發生變化時偵測觸發 傳入引數：監測出改變前、改變後的值 常應用在 表單使用者輸入、改變資料或是登入","categories":[],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://wualnz.com/tags/Vue/"}]},{"title":"ES6語法：let、const","slug":"ES6語法：let、const","date":"2018-09-03T18:06:54.000Z","updated":"2021-12-22T03:26:58.452Z","comments":true,"path":"/ES6語法：let、const/","link":"","permalink":"http://wualnz.com/ES6%E8%AA%9E%E6%B3%95%EF%BC%9Alet%E3%80%81const/","excerpt":"","text":"let 與 const 誕生的目的不會汙染全域變數，好方便後續維護、Debug let, const 用來宣告區塊 {} 裡的變數 for迴圈宣告 var改為 let const 唯讀變數，無法去做修改。 let存在於大括號裡面，在大括號外面便會死翹翹。 被全域變數污染的例子1234ul.list li 1 li 2 li 3 123456const list = document.querySelectorAll(&#x27;.list li&#x27;).length;for ( var i = 0; i &lt; list; i++ ) &#123; document.querySelectorAll(&#x27;.list li&#x27;)[i].addEventListener(&#x27;click&#x27;, function()&#123; alert(i + 1) &#125;)&#125; for迴圈宣告 var i = 0，導致全域變數被污染，不管點擊哪個 li ， alert 出來的訊息皆為 4。在 Console輸入 i 便會出現3但當for迴圈宣告是let i = 0，將var改為let後，預期點擊 第一個li時 便會出現alert 1、預期點擊第二個 li 時 便會出現alert 2。 如何知道有沒有污染全域變數？在Browser Console 輸入 window.變數名稱，一試便知有沒有被污染。輸入window.變數名稱，如果有出現回應，代表此變數在全域中是存活的，也就是被污染了。 const 例外情況當 const 為 物件或陣列時，便可以修改。當 const被宣告為物件、常數時，記得要加上freeze方法來凍結。 1234const obj = &#123; url: &#x27;http://wualnz.com&#x27;&#125;obj.url = &#x27;http://helloWorld.com&#x27; obj.url重新定義為http://helloWorld.com時，成功被修改了。 當使用陣列、或物件時，有沒有什麼辦法不被修改？有，使用 freeze（凍結）12345const obj = &#123; url: &#x27;http://wualnz.com&#x27;&#125;Object.freeze(obj)obj.url = &#x27;http://helloWorld.com&#x27;當加上Object.freeze(obj)後，便無法再更改obj.url了，於是後面定義的helloWorld便會報錯。 使用 let、const 時機當宣告變數時，你必須先評估這個變數未來會不會常被更改？不希望這個變數被其他開發者修改、亂搞時，宣告 const。未來還是會修改，使用 let 來宣告。 let 與 const 特性 let, const 不會向上提升（Hoisting）let 與 const 直到讀取那一行宣告，才會被讀取到。宣告 var 時， Javascript 會將它提升（Hoisting），但當使用 let, const是不會被提升的。let、const 不會提升(Hoisting)，但 var 會被提升。 以下是用 var變數後會被向上提升的範例123console.log(a); // undefined var a = 3console.log(a); // 3 用let或const宣告，會直接報出錯：a is not defined 123console.log(a); // Uncaught ReferenceError: a is not definedlet a = 3;console.log(a); 在同個區塊上（大括號內）不能重複命名 let, const 不會變成全域變數當在全域宣告 let, const的變數時，當你使用 window查找，會發現用 let, const宣告過的變數回報：undefined。 12345678var a = 1;window.a // 1const a = 1;window.c // undefinedlet b = 1;window.b // undefined 即使你在全域環境下宣告let或const，使用window查找皆會出現undefined。","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://wualnz.com/tags/ES6/"}]},{"title":"BlueHost Wordpress 如何安裝 Git 版本控制","slug":"BlueHost-Wordpress-如何安裝-Git-版本控制","date":"2018-07-28T15:34:59.000Z","updated":"2021-12-22T03:26:58.451Z","comments":true,"path":"/BlueHost-Wordpress-如何安裝-Git-版本控制/","link":"","permalink":"http://wualnz.com/BlueHost-Wordpress-%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%9D-Git-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/","excerpt":"","text":"BlueHost Wordpress 如何使用 Git 版本控制BlueHost 沒有提供Git或相關Git設定的支援，所以我們只好自立自強，以下安裝教學是在 BlueHost shared 環境下設置。 過程中有參考 BlueHost的官方文件，但是安裝失敗，文件並未寫得很完整，在這篇文章將記錄我是如何安裝 Git 的，以下操作環境為 Mac iOS 10.13.1。 為什麼 Wordpress 要進入版本控制？經營一個專業的 WordPress 網站，有一定的讀者數量，相信有很多痛苦你都知道以下悲劇範例，我親身經歷過： WordPress 版本升級，\bA 外掛可能升級後導致和 舊版本的 B 外掛發生衝突，導致網站掛掉。 在 WordPress 後台面板直接修改主題編輯器，常不小心打錯字，導致網站掛掉。 上次改了一些東西，但忘記改在哪裡。這次升級不小心弄掛了，也忘記怎麼改回去了Orz。 在本機上架設一個一模一樣的 WordPress 網站，供測試用。但，在自己電腦修改好了，又要重新到真正網站上重新做一樣的動作，好浪費時間。 通常在WordPress上因為某些套件無法達到你預期想要的效果，於是你興起了客製化的衝動。客製化會需要更動 php程式碼（包含佈景主題）或 CSS, HTML，一不小心改掛了正式網站也就掛了。 那你可以好好考慮一下學習 Git 來控管你的WordPress，不過前提是你常會更改到程式碼、CSS、HTML。 說了那麼久，到底什麼是 Git 啊？Git，它就是一個遊戲存檔紀錄！像是玩單機遊戲一樣，你可能玩了幾個小時後便會先存檔，怕下次再玩的時候忘記自己破到哪關了XD。重新打開遊戲、讀取紀錄檔，又可以回到當初狀態啦！你每一次更改的東西，\u001cGit都會幫你做追蹤。比如說你今天建立了香蕉、蘋果，你可以分成存成一次的紀錄或兩次。 分成一次存檔紀錄訊息：存檔香蕉、蘋果，紀錄訊息：我建立了香蕉、蘋果 分成兩次的存檔紀錄：存檔香蕉，紀錄訊息：我建立了香蕉、存檔蘋果，存檔紀錄訊息：我建立了蘋果然後呢，在你不小心網站爆炸或又被改爆的時候，跟 Git說：嘿！我要回去我那天建立存檔香蕉的紀錄，就會完全復原啦！網站復活YA 總結：Git主要功用是幫助你做存檔訊息，網站不小心改爆時還能夠回到當初的存檔紀錄，後面一率掰掰XD雖然 Git 學習曲線還是有相當程度的高，但若只是使用 存檔、讀取存檔紀錄、查當初改了什麼，那這學習曲線其實很低的，比起大把浪費的時間，嗯…我認為很值得投資。 開始之前，您必須具備的條件能夠 SSH 進入 BlueHost Server 端SSH KEY 要先進入 BlueHost 後台，先設定好本機電腦的 ssh 公鑰放在上面，id名稱盡量取名為 id_rsa成功設定好後，在終端機上輸入ssh UserName@ServerIP即可成功 註：UserName、ServerIP 皆在 BlueHost 後台面板上可尋找得到。 你必須先設定好 ssh鑰匙，才能開始下面的奇妙旅程。 需要具備一些 Git 知識這裡就不多說了，網路上有相當多的教學可以查詢。根據我們的目的是存檔、讀取存檔紀錄、查當初改了什麼，大部分只會用到下列幾個指令。 git init用意是，和 Git 說：這個資料夾內所有會動的東西，都交給你負責追蹤了！1git init Git啊，你幫我存檔 index.php，訊息寫說：「我建立了index.php，邁向里程碑YA!」（紀錄訊息僅供參考，通常是寫你為什麼做這樣變動，方便回憶，千萬別真的這樣打啊…）12git add index.phpgit commit -m &#x27;我建立了index.php，邁向里程碑YA!&#x27; Git 啊，我這個資料夾所有變動的資料，你全部都幫我存檔吧！12git add .git comit -m &#x27;存檔所有檔案！&#x27; Git 啊，請你幫我回到上一次存檔紀錄吧，我網站改爆了啦&gt;”&lt;1git reset HEAD^ 除此之外，還有個圖形化軟體叫：GitKraken它可查看每一次你存檔更動了哪些檔案，對於金魚記憶只有7秒的人類是一大福音，當然對網站管理者來說：再也不用浪費腦容量紀錄這些啦XD下圖是我其中一個請 Git幫我追蹤的專案，每一次的存檔紀錄 Git 都很認真在紀錄 接下來會教學如何在BlueHost上安裝Git。 連線 Server端 ， 安裝 Git連線進入 Server 後，我們必須先切換家目錄，才能輸入更改 .bashrc的設定123$ ssh UserName@ServerIP$ cd$ pwd用 VIM編輯器開啟 .bashrc1$ vim ~/.bashrc接著需要更改.bashrc設定檔，將以下程式碼加入在最後一行。 1$ export PATH=$HOME/.local/bin:$HOME/.local/usr/bin:$PATH 此行用意是指定Git要安裝在$HOME底下的.local/usr/bin既然我們指定了目錄，當然就要創建這些條件囉！建立資料夾.local，並移動進去。如果你已經有 .local資料夾的話，直接進入路徑即可 12$ mkdir .local$ cd .local 接著再創立一個目錄叫 src，並把移動目錄移動到src內 12$ mkdir src$ cd src 如果你在 Commend Line 上輸入 pwd的話，目錄應該會長得像是 /home#/username/.local/src，這代表你目前操作都是正確的！ home為你網站根目錄，username為你ssh連線進入時的使用者名稱，username皆在 Bluehost Panel內可以查詢得到。 接下來，萬事俱備啦！到目前為止，我們先是指定了bashrc（Server端預設是使用bashrc）安裝套件等都安裝在.local/usr/bin下，並也真的建立了這些資料夾。 重頭戲就是：安裝 Git 囉（廢話）我們用wget來安裝git 1$ wget --no-check-certificate https://github.com/git/git/archive/master.zip 這行指令是在說，向這個網址下載master.zip檔案，下載zip檔案後，看到zip當然是要先解壓縮啊！解壓縮完，並將剛利用完已經失去價值的master.zip移除，過河拆巧的概念，節省空間！斷捨離！ 12$ unzip master$ rm master.zip 解壓縮後會出現資料夾，我們先移動到資料夾內，然後開始安裝。 123$ cd git-master$ make$ make install 檔案有點龐大，要稍等一下。最後，測試是否有安裝成功，在終端機上輸入 git如果你有成功安裝，就應該會跑出這樣的畫面才對喲。 123456789usage: git [--version] [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path] [-p|--paginate|--no-pager] [--no-replace-objects] [--bare] [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;] [-c name=value] [--help] &lt;command&gt; [&lt;args&gt;] 最後補充一點，雖然 Server已自動安裝 bash-complete 套件了，但 Git 已經習慣打簡略的指令了，可以看看這篇Git 修改又臭又長的指令，加快開發速度連線至 Server 後輸入以下指令吧！ 1234git config --global alias.co checkoutgit config --global alias.ci commitgit config --global alias.st statusgit config --global alias.br branch 他便會自動在 ~/.gitconfig 紀錄，未來輸入git commit -m 就可以直接化簡為 git ci -m 啦！先別聽安麗說了，時間就是金錢，一定要節省時間，不節省時間要幹嘛啊？工程師就是要懶啊XD 版本控制建議版本控制為進入 /public_html內做版本控制，若直接在Home上進版本控制，會收納很多不必要的東西XD。 12345cdcd /public_htmlgit initgit stgit ci -m &#x27;Initialize Commit&#x27; 紀錄失敗歷程：官方文件好失敗VPS or Dedicated Hosting - Installing Git照著官方文件做，失敗，無法順利裝上Git，真是的…. 12sudo yum install gityum install git --disableexcludes=main --skip-broken 這兩行指令都失敗QQ，也找不到官方文件-Enabling Sudo Access上所指的 Access Management。 Reference | 參考資料 Installing GIT on Bluehost Shared Hosting Git 修改又臭又長的指令，加快開發速度","categories":[],"tags":[{"name":"WordPress","slug":"WordPress","permalink":"http://wualnz.com/tags/WordPress/"},{"name":"BlueHost","slug":"BlueHost","permalink":"http://wualnz.com/tags/BlueHost/"}]},{"title":"為Heroku 上傳的圖片找新的空間：Amazon S3，就決定是你了。","slug":"為Heroku-上傳的圖片找新的空間：Amazon-S3，就決定是你了。","date":"2018-07-23T15:11:59.000Z","updated":"2021-12-22T03:26:58.461Z","comments":true,"path":"/為Heroku-上傳的圖片找新的空間：Amazon-S3，就決定是你了。/","link":"","permalink":"http://wualnz.com/%E7%82%BAHeroku-%E4%B8%8A%E5%82%B3%E7%9A%84%E5%9C%96%E7%89%87%E6%89%BE%E6%96%B0%E7%9A%84%E7%A9%BA%E9%96%93%EF%BC%9AAmazon-S3%EF%BC%8C%E5%B0%B1%E6%B1%BA%E5%AE%9A%E6%98%AF%E4%BD%A0%E4%BA%86%E3%80%82/","excerpt":"","text":"我用Ruby on Rails寫了一個CRUD網路相簿的網站，主機採用Heroku提供的服務。但是有一個缺點，Heroku不提供檔案儲存的空間，每過一段時間就會洗白一次。講白話一點就是：我上傳的相片過一段時間就會不見了，我得為我的相片找新的空間存放才行。這裡使用的是Amazon S3 storage服務，可以自動上傳到S3空間 20180723 更新，Amazon 有更改介面，故 S3 Access key指引教學也有更新內容。 廢話不多說，開始教學吧 教學開始安裝Gemfilegem &quot;fog-aws”bundle install 在Amazon S3新增一個新的backet我命名為photo-album-hazel，並設定在日本東京的位置。 新增目錄 lib/carrierwave/storage/fog.rb123456789101112131415//在fog.rb貼上CarrierWave.configure do |config| config.fog_provider = &#x27;fog/aws&#x27; if Rails.env.production? config.fog_credentials = &#123; provider: &#x27;AWS&#x27;, aws_access_key_id: ENV[&#x27;S3_KEY&#x27;], aws_secret_access_key: ENV[&#x27;S3_SECRET&#x27;], region: &#x27;ap-northeast-1&#x27; &#125; config.fog_directory = ENV[&#x27;S3_BUCKET&#x27;] else config.storage :file endend 在Uploader設定儲存檔案的方式，若在 production 環境下， 將會透過 fog 上傳檔案到 AWS 的 bucket; 若是開發環境， 則會將檔案放在本地端的 public 目錄下。 123456# photo-image-uploader.rb設定 if Rails.env.production? storage :fog else storage :file end AWS S3 KEY 要去哪裡找？20180723 更新，Amazon 有更改介面，更新要怎麼從 Amazon 找到 S3 Access key AWS 登入後 點開選單，點擊 Security Credentials 側邊選單點 Users，並建立一個 User 帳戶 點擊 你剛建立的User帳號，標籤選 Security Credentials Create Access Key在 Create Access Key的過程便會 Show出 ID 與 KEY 囉。 Region設定方式查詢：查詢AWS區域代號 Region Name 代稱 Amazon Route 53 Hosted Zone ID* Asia Pacific (Tokyo) ap-northeast-1 apigateway.ap-northeast-1.amazonaws.com 我設定的bucket在東京：所以Region是ap-northeast-1 用環境變數方式儲存，heroku與本機設定KEYHow to setting localhost &amp; Heroku environment variable ?總共有三項要設定，請分別設定在本機、Heroku上 Bucket Name，像我在S3建立的bucket name就是photo-album-hazel KEY ID KEY SECRET 本機 Rails 環境變數設定 AWS S3 KEY 12export S3_KEY= &quot;your access key id&quot;export S3_SECRET= &quot;your secret access key&quot; 範例程式碼如下，請不要複製，皆為虛假，請真正填上你S3的資訊。123export S3_KEY=&#x27;AKIAI2XXX24DGFCDNCQ&#x27;export S3_SECRET=&#x27;nZZ5JhyVjfKyMC5GD9gGMERLE3j3!XroZsEjLK!T&#x27;export S3_BUCKET=&#x27;restaurant-review&#x27; Heroku 遠端設定 AWS S3 KEY若沒有在heroku上設定S3 KEY，直接git push heroku master推到heroku上，會發現推不上去哦！錯誤訊息會這樣顯示 ArgumentError: Missing required arguments: aws_access_key_id, aws_secret_access_keyPrecompiling assets failed.所以還是要乖乖的先把這步驟做完，遠端連線到Heroku Server並設定好Key後，即可順利推上去。 $ heroku config:set S3_KEY=xxx S3_SECRET=yyy S3_BUCKET=zzz以下程式碼僅為參考用，非正確可使用的KEY。123heroku config:set S3_KEY=AKIAI2XXX24DGFCDNCQheroku config:set S3_SECRET=nZZ5JhyVjfKyMC5GD9gGMERLE3j3!XroZsEjLK!Theroku config:set S3_BUCKET=restaurant-review 設定好了就可以git上傳囉，在heroku上測試是否有成功上傳到S3 bucket吧1234git add .git commit -am &#x27;Setting carrierwave upload to AWS S3&#x27;git pushgit push heroku master Push到Heroku後，出現錯誤了。查看heroku logs才知道：Rails找不到Carrierwave的常數fog 1/app/vendor/bundle/ruby/2.3.0/gems/carrierwave-1.2.0/lib/carrierwave/uploader/configuration.rb:78:in `eval&#x27;: uninitialized constant CarrierWave::Storage::Fog (NameError) 嘗試解決方法 Gem 安裝 ‘fog’結果：無效 在 lib/carrierwave/storage/fog.rb 多加上一行程式碼require &#39;carrierwave/storage/fog&#39;結果：無效 把 lib/carrierwave/storage/fog.rb 刪除，並在 config/initializer下新增 carrierwave.rb把fog.rb的內容複製過去（當初直接新增fog.rb是完全照著官方文件做的說…）結果：成功，Heroku可以成功開啟網站了（哭） 可以順利開啟網站後，開Chrome開發人員工具檢查吧，看是否有上傳到AWS S3上 成功啦！！ Reference CarriveWave Github 官方文件 使用Carrierwave上傳到AWS S3 使用 Carrierwave 處理檔案上傳 (整合 imagemagick 與 Amazon S3)","categories":[],"tags":[]},{"title":"神奇的migration 生成器 | Ruby on Rails 5","slug":"神奇的migration-生成器-Ruby-on-Rails-5","date":"2018-07-20T06:45:18.000Z","updated":"2021-12-22T03:26:58.461Z","comments":true,"path":"/神奇的migration-生成器-Ruby-on-Rails-5/","link":"","permalink":"http://wualnz.com/%E7%A5%9E%E5%A5%87%E7%9A%84migration-%E7%94%9F%E6%88%90%E5%99%A8-Ruby-on-Rails-5/","excerpt":"","text":"神奇的migration 生成器 | Ruby on Rails 5參照著格式便可以自動產生Migration檔（包含格式與欄位及型態） 12rails g add_xxx_to_資料表 [field:type][:index]rails g remove_xxx_to_資料表 [field:type][:index] 同時可以設定我們需要的欄位，我想要新增一個fee欄位到users的Table下 你可以想像成一個Excel表，這個Excel Table叫做Users，因為Excel表有很多資料欄位(field)，所以都要用複數來表示，也就是Users按照Rails的慣例，Table總表以複數來表示。1rails g migration add_fee_to_users fee:integer:index 在後面加上:index則是代表要幫這個資料欄位fee加上索引加上索引是為了避免產生太多的查詢，像是query+1效能問題 怎麼判斷這個資料欄位(field)要不要加上索引？可以參考幾個點，但主要還是要看這個欄位fee是否會是需要常查詢的欄位？ 會被查詢的欄位（使用where) 會被group的欄位(使用到group方法) 會被排序的欄位(使用到order) 外部鍵foreign key 他便會自動產生Migration檔：時間戳記_add_fee_to_users註：時間戳記會根據現實的時間自動產生，像是20180523051928這種形式123456class AddeeToLoans &lt; ActiveRecord::Migration[5.1] def change add_column :users, :fee, :integer add_index :users, :fee endend 後悔產生migration檔，如何手動刪除？注意：這個刪除的前提是你還沒有跑migration，也就是還沒真的新增此欄位到資料庫裡剛剛生成的指令是輸入 1rails g migration add_fee_to_users fee:integer:index 那麼刪除就只要將g改為d就可以囉！ 1rails d migration add_fee_to_users fee:integer:index","categories":[],"tags":[{"name":"migration","slug":"migration","permalink":"http://wualnz.com/tags/migration/"},{"name":"rails","slug":"rails","permalink":"http://wualnz.com/tags/rails/"}]},{"title":"如何使用 Hexo + Github Page 自訂網域名稱 + Cloudflare SSL 免費憑證","slug":"如何使用-Hexo-Github-Page-用-Cloudflare-綁定個人網址","date":"2018-07-08T07:26:50.000Z","updated":"2021-12-22T03:26:58.460Z","comments":true,"path":"/如何使用-Hexo-Github-Page-用-Cloudflare-綁定個人網址/","link":"","permalink":"http://wualnz.com/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Hexo-Github-Page-%E7%94%A8-Cloudflare-%E7%B6%81%E5%AE%9A%E5%80%8B%E4%BA%BA%E7%B6%B2%E5%9D%80/","excerpt":"","text":"如何使用 Hexo + Github Page 用 Cloudflare 綁定個人網址本篇適用於用Hexo框架架設在Github Pages上，但想要綁定自己買的網址。由於Github Pages 產生的個人網址太長，對 SEO 不友善，不是這麼好被搜尋引擎收錄， 步驟 Github Repo 設定 Custom Domain 在 Repo專案下新增 CNAME，完成網址綁定 用 Cloudflare 提供免費的 SSL 憑證，得以正確讀取 CSS、Google視為安全網站認證 Github 設定專屬網址開啟Github的Hexo專案，選Setting-&gt;Options-&gt; Github Pages -&gt; Custom Domain，填入自己的網域（例如：wualnz.com），接著儲存。 新增 CNAME在該 Hexo 專案下的 source 資料夾下新增檔案 CNAME123## In projectcd /sourcetouch CNAME修改 CNAME 內容，將域名填入即可，並重新部署到Github。1wualnz.com點我查看 Github Repo CNAME 設定完成範例 到底要放在 /source 還是 最上層資料夾？ 若使用Hexo框架的話，要將CNAME放置在 /source資料夾內，原因是：當每次hexo deploy時才不會被覆蓋到。若不是使用Hexo的話，沒有自動部署，直接將CNAME檔放在Proejct內即可。 CNAME 導向個人網址 原理使用者在瀏覽器輸入wualnz.com後，DNS 便會開始解析找到 Github的 IP Github上有成千上百萬個Pages由不同使用者建立，Github不會知道網址wualnz.com是屬於 哪個 User 哪個 Repo，因此需要在Repo下放上 CNAME，這樣 Github才找得到，哦！就是這個hazelwu2/22mm的Repo！並回傳給瀏覽器 CNAME 是什麼？它是一種 DNS 紀錄類型，可以將別名（綽號）對應到實際或正規的網址。當你在瀏覽器上輸入 wualnz.com時，瀏覽器會去找 DNS ，經過DNS的解析 wualnz.com 得到： wualnz.com Github IP 位址，例如找到的是192.168.0.444。 最常見的 CNAME 用法瀏覽器上輸入 www.wualnz.com Enter後會自動跳轉到（對應到）wualnz.com不論是輸入wualnz.com還是www.wualnz.com 都能正確導向至網站。 A Records 是什麼？A Records 就是 該主機的 IP 位址。像 wualnz.com 方便人們記憶的名稱，最後會被解析成很難記住的 IP 位址，例：192.168.0.444 Hexo 設定 url 個人網域打開_config.yml其中找到url與root，設定為自己網域名稱。 若沒有個人網域，可以用預設的Github Pages產生的url（例如：hazelwu2.github.io/22mm) 無個人網域 設定123## _config.ymlurl: http://github帳號.github.io/repo名稱root: /repo名稱 舉例來說，我的Github帳號是hazelwu2，Repo名稱叫22mm，那麼設定就會像下列這樣123## _config.ymlurl: https://hazelwu2.github.io/22mm/root: /22mm/ 有個人網域 設定有個人網域的話，開啟 _config.yml，並將url設定成自己購買的網址，記得/不要省略12url: http://wualnz.com/root: /最後，再回到github你的repo內，設定 Custom Domain 進入github，點 Hexo 的 Repo，並進入設定 GitHub Pages 下的 Custom domain 修改成你購買的網域。（要與CNAME檔案設定一致） （例：我的網域是wualnz） 以上步驟完成後，便綁定個人網域成功。 Hexo 綁定自訂網址後，CSS 無法正常載入綁定網址後開心的進入網站，發現：靠～無法載入 CSS ，\b打開 Console.log 檢查發現1404 Error Not found 原因來自於：Github Page 不支援自定義的 SSL 憑證，也就是說：使用Github Pages 綁定自己的網址，會和 Github 起衝突 解決方法 自訂網域付費購買 SSL 憑證 使用免費憑證（例：Let’s Encrypt） CDN Cloud Flare服務 比較建議使用 CDN 的 Cloud Flare，Let’s Encrypt雖是免費憑證，但需要三個月手動更換一次。接下來會介紹如何在 Cloudflare 做設定 Cloudflare 設定設定前，需要將你的網址商設定網域名稱伺服器為Cloudflare提供的網址，讓Cloudflare 代管 DNS Server我買的網址商是Godaddy的，因此在Godaddy面板上設定會像是這樣在網址商Godaddy設定成功後，在Cloudflare樣板會看到 Status:Active，表示設定成功。 前往Cloudflare DNS 新增兩個 A Records，皆指向Github IP：192.30.252.153、192.30.252.154 新增 CNAME，NAME 填 www，Value填上 Github帳號.github.io設定完成後，應該會像下圖這樣。 設定 SSL 憑證Cloudflare DNS 設定完成後，到Crypto標籤，我們要設定 SSL憑證 SSL有Flexible、Full選項，這兩個都可以選。將 Always user HTTPS 打開，變成 On狀態 設定完後，恭喜你，重新Refresh網址後，網站已經能成功抓到 CSS 囉 Cloudflare SSL Flexible 、 Full 差別下圖為官方網站提供的說明圖樣Flexible、Full 差別在於 Cloudflare 與 Server 間 是否為加密連線，官方推薦大家設定 Full SSL。Flexible 是 對 Server 間的連線是不加密的。Full 是你擁有一方的SSL憑證，你可以自由選擇一方是否加密。白話一點就是：CloudFlare不管是對訪客、還是對Server端都能夠加密！而且免付費會員也可以使用這功能。 如果想知道更詳細內容，可以看看我寫的這篇文章：關於Rails &amp; Cloudflare use Free SSL, 無法登入後台 解決辦法 Reference Hexo+GitHub+Cloudflare实现自定义域名全站SSL What do the SSL options mean?","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://wualnz.com/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://wualnz.com/tags/Hexo/"},{"name":"CloudFlare","slug":"CloudFlare","permalink":"http://wualnz.com/tags/CloudFlare/"}]},{"title":"Macbook Pro 2017版，外接兩個螢幕 | 全攻略","slug":"Macbook Pro 2017版，如何架設兩個螢幕","date":"2018-07-03T07:04:03.000Z","updated":"2021-12-22T03:26:58.454Z","comments":true,"path":"/Macbook Pro 2017版，如何架設兩個螢幕/","link":"","permalink":"http://wualnz.com/Macbook%20Pro%202017%E7%89%88%EF%BC%8C%E5%A6%82%E4%BD%95%E6%9E%B6%E8%A8%AD%E5%85%A9%E5%80%8B%E8%9E%A2%E5%B9%95/","excerpt":"","text":"Macbook Pro 2017版，外接兩個螢幕 | 全攻略 為什麼要外接兩個螢幕？架設三個螢幕的用途是：最左邊 Mbp 顯示程式結果、中間 20吋 主要寫 Code、右邊24吋螢幕能垂直擺放，用來查資料。多螢幕用途是為了不讓注意力被分心，提高工作效率。 如果你也認同這一點，也希望提高工作效率，那麼你可以考慮購買雙螢幕。 下列將介紹我是如何用Macbook Pro 2017 外接兩個螢幕其中在選購螢幕時也發現很多眉眉角角，也會分享我對螢幕挑選的準則。 還在單一螢幕 Macbook 時期我常在切換視窗時忘記現在要幹嘛XD，手忙腳亂的一下開VS Code、一下要切換localhost檢查結果，或又要換成Chrome來查資料自從外接單螢幕後，真誠地發現越少的切換視窗，可以幫助自己更專心！ 需求以下是我自己本身的需求，可以參考看看 需要外接兩個螢幕 深度夠的桌面，可以外接鍵盤、滑鼠，還能寫筆記 2 USB、1 HDMI、\b2 Type-C 轉接頭 最困擾的是 Macbook Pro 2017 出廠後只有兩個 Type-C 孔，變得是購買之前都要深思熟慮、搜集好資訊。兩個 Type-C 意味著要買好多好多轉接頭啊，扣掉充電線就只剩下一個了哪，錢包你為什麼都肥不起來&gt;”&lt; 根據螢幕選購 Type-C 轉接頭如果你外接的螢幕是舊螢幕（VGA接孔），非常推薦買小米五合一的轉接頭，不貴且有 2 USB + 1 Type-C(可充電) + 1 VGA + 1 網路孔，千元有找！比較新型的螢幕可能有Display Port、HDMI等等，那就是看你個人需求，去購買對應的轉接頭\b要根據你需要外接螢幕接的是什麼樣的孔，來選配轉接頭，才不會白買哦 Macbook Pro 2017 外接螢幕配備以下列的是上圖工作桌的所有配備 工作桌 長度 140 cm x 深度 65 cm | Ikea HILVER 桌面 + ADILS 桌腳 | $ 3390 Macbook Pro 2017 | 13吋 E202H Display | 20 吋螢幕 | VGA | $ 0 （二手） DELL U2415 | 22 吋螢幕 | HDMI | $ 8430 HDMI 1.4 版 公轉公 小米 USB-C 轉 VGA 五合一 轉接頭（台灣小米之家沒有販賣，購買管道要從淘寶官方/露天賣家尋找） Type-C 轉 HDMI / Type-C / USB 挑選電腦桌用途如果你想要能夠外接鍵盤、滑鼠，建議桌子深度可以挑50cm以上的桌子，40cm絕對不推薦，太淺了。但是如果你想要可以另外寫筆記、又外接鍵盤滑鼠，顯得不狹窄，建議挑桌子深度65cm就夠用了 長寬度建議外接單個螢幕，桌子至少長度要120cm外接雙螢幕的話，桌子長度 120cm 會稍微擁擠，預算夠的話可以直接上140cm!XD我是購買Ikea桌子，桌子頗穩固，拿螺絲自己鎖很快，組裝也超簡單 如果線上桌子沒有你想要款式的話，Ikea有提供客製化桌面：Ikea 客製化書桌桌面長寬度、桌腳要什麼都可以自己配，超方便。乾，搞得有點像是業配文QQ 長時間 Coding 看螢幕，如何挑選螢幕工程師長期是用眼睛、腦在工作，尤其眼睛最重要，動不動看螢幕就是8小時起跳，如果等眼睛不好時才想到要保養，真的會來不及。過去太操眼睛，導致看螢幕不到兩小時就看不下去了，靠！這要怎麼工作啊.. 工程師的職業傷害是近視度數加深、長期眼睛疲勞，想要眼睛不易疲勞\u001f，列出幾項建議 善用 f.lux 軟體降低藍光 配電腦專用眼鏡，度數要比正常度數低 50~100 度 寫程式、查資料是靜態畫面，不用特別買特高更新頻率、曲面更是不需要（只是會潮到出水而已XD） 買不閃屏螢幕，降低螢幕亮度 環境燈光要明亮 環境光源更重要 眼睛不易疲勞，環境光源亮度 &gt; 上等好螢幕 如果你的需求是看螢幕較不會對眼睛造成太大負擔，你必須要知道的是：環境燈光 &gt; 好螢幕當電腦桌燈光較幽暗，外光線比較亮，導致你的瞳孔放大，長期下來會讓你看沒多久螢幕就會受不了\b 倘若你的環境燈光暗到像世界末日，找水電工換個燈光吧，對了記得要LED，省電省瓦數（笑），明亮的環境也有助於改善心情。 接著，下面會著重講解怎麼挑選「不閃屏螢幕」 閃屏是什麼？螢幕其實有肉眼看不見的閃爍，你相信嗎？最簡單的實驗是拿著手機對著螢幕錄影，你看看有沒有出現一條一條的線。不閃屏 VS 閃屏對比影片，點擊影片花個三十秒，你會更了解：平常閃屏螢幕是怎麼摧殘眼睛的。 為什麼要挑選不閃屏的螢幕？如果你一天看螢幕八個小時，一秒高達250次的閃屏螢幕，看八小時的螢幕也等於被閃了5760000次！不閃屏有助於減少眼睛疲勞！螢幕的錢絕對不要省，對自己的眼睛好一點，一台好的螢幕如EIZO 低階款 13,900，最少也能用5年，等於說你是一天花7.6元而已，眼睛不疲勞能讓你休息時間繼續進修，技術升等了就也加薪了，是不是賺很大，這點錢真的就別省了！ 此不閃屏非彼「不閃屏」許多廠商知道消費者注重眼睛健康，要購買不閃屏螢幕，紛紛標榜說「不閃屏螢幕」 標榜不閃屏，一調低亮度就破功 100%亮度時確實是不閃屏，現代螢幕出產皆為LED燈管，不再是舊技術CCLF（較不亮），導致螢幕在100%亮度時，認為太亮、眼睛好酸，便會將亮度調低到50%、30%，甚至更低。那你知道嗎？當亮度調到50%、30%時，這時閃屏就會出現了，還會伴隨著 PWA，導致不舒服。（也是我購買螢幕時做功課，才知道有時看螢幕看到噁心想吐、頭暈，原來都是 PWA 惹的禍），這就是此不閃屏非彼「不閃屏」的由來！ 換句話說如果亮度太低，螢幕的閃爍就會加強，瞳孔不斷放大縮小，讓眼睛更疲勞如果亮度太高，螢幕的藍光就會加強，黃斑部應付過量藍光，也會更疲勞 結論：要買好螢幕，可以調低亮度也不會產生 PWM 的螢幕，才能有效降低眼睛負擔 小知識：PWM 會傷害人體、傷眼PWM (Pulse Width Modulation)，當亮度調到 20% 以下時會導致 PWM 劇烈，往往伴隨著眼睛難受、頭痛甚至噁心想吐的情況發生。亮度 20% 以下會變得更劇烈的原因：調光方式是藉由閃爍來達到變暗的效果，下列附上TFC CENTRAL對PWM的詳細介紹。PWM - Introduction | TFTCENTRAL目前上等好螢幕對於「調低亮度會產生 PWM 」沒有完美的解決方案，像是\b知名廠牌EIZO是用混合方式解決，亮度低於20用高頻18000Hz（無論眼睛、手機螢幕錄影都捕捉不到），或是有些廠商是用 DC調光 解決。 挑選螢幕的準則挑選對眼睛負擔較小的螢幕，必須要有以下準則 不會閃屏（亮度低於100%也不會閃屏） 不會因為調低螢幕亮度，產生 PWA下列連結是 TFT Central 目前對所有已做過測試 PWA 螢幕匯集的總表，如果不會產生 PWA，會顯示 Confir-med: Yes最快的辦法是從這個列表中挑出 Yes 的螢幕型號，再根據自己的預算慢慢篩掉。Flicker Free Database 所有螢幕對 PMA 測試 | TFT Central TFT Central 是什麼？TFT Central是一個來自英國權威且老牌的測試螢幕網站，網站內容皆是對螢幕的詳細測試、專業性評論，包含亮度調到多少時，瓦數會有怎樣的表現、調低亮度時是否會產生過高的閃爍、PWA、色調、校色、與其他螢幕校色性能比較、旋轉角度、亮度與穩定對比度比較、面板平均性等超細項的調查。編輯者皆為專業知識豐富者，找LED螢幕資料時，是一個很值得參考的網站，缺點是：因為測試太齊全了、導致網站更新很慢，不是所有螢幕都有測試報告。 總而言之就是 先找出你鍾意的螢幕 Google搜尋喜歡螢幕型號，再多加上幾組關鍵字「PWM Flicker free tests」例如：考慮想買Dell U2415，Google先搜尋 DELL U2415m pwm flicker free test 查看報告結果，以TFT CENTRAL提供資訊為主，Dell U2415M測評，找到Backlight Dimming and Flicker段落，你會看到下列圖片。 圖片在說什麼？最左上角的Pulse Width Modulation Used 就是最討厭的 PWM 了，如果右邊對應的是 No，代表不會產生 PWMCycling Frequency指的是循環頻率，當1200 Hz時候會產生非常低的震盪次數。（PWM 產生是因為亮度調暗後必須加快閃爍頻率）100 % Brightness時，當螢幕亮度為 100% 不會產生 PWM、50 % Brightness也不會、0% Brightness 也不會有PWM，恭喜你！當你看到這張圖片都顯示ＮＯ時，這台螢幕你真的可以考慮帶回家了！ 專業性測評螢幕 | 相關網站除了TFT Central之外，還有幾個外國網站也是專業性測評螢幕可以提供參考。 TFT Central Prad Displaylad Dell U2415 如何接線 ？經過測試後，決定把Dell U2415搬回家，悲劇發現：靠！我不會接到Macbook，好蠢喔（笑）後來調查幾個解決方案，我是直接買HDMI接公對公 + Type-C 轉 HDMI 轉接頭才得以 Online… USB 對 miniDP 可以將螢幕當作USB HUB，外接設備可連接在螢幕的USB上。 DP 對 miniDP，DP插螢幕，mini DP插電腦，顯示卡沒有Display插槽就無法用 買一條支援 2K/4K HDMI 公對公 買一條 MiniDP轉DP 即可接上螢幕，但 DP 的線需要買支援到 4K 的 關於 HDMI 線材 1.4 和 2.0 差別他們的差別在於輸出畫質是否高於 1080PHDMI 1.4版，最高輸出只會到 1080P 而已HDMI 2.0版可以輸出 2k/4K，輸入畫質可以 &gt; 1080P 如果你有使用到 4k 解析度的需求或螢幕解析度比例是 21:9，一定要特別選購 HDMI 2.0(60Hz)以上版本的傳輸線，否則會黑頻。 參考文章 電腦達人養成計畫 5-3：HDMI？DVI？VGA？各式螢幕介面完全解析與選購指南 EIZO 螢幕 跟 benq光智慧 大家會選哪一款 護眼的話 Dell U2415 Review | TFT Central","categories":[],"tags":[{"name":"Macbook Pro","slug":"Macbook-Pro","permalink":"http://wualnz.com/tags/Macbook-Pro/"},{"name":"外接螢幕","slug":"外接螢幕","permalink":"http://wualnz.com/tags/%E5%A4%96%E6%8E%A5%E8%9E%A2%E5%B9%95/"}]},{"title":"複製 Production 真實環境資料，模擬超逼真測試 | Rails 5","slug":"複製-Production-真實環境資料，模擬超逼真測試-Rails-5","date":"2018-06-12T19:23:39.000Z","updated":"2021-12-22T03:26:58.461Z","comments":true,"path":"/複製-Production-真實環境資料，模擬超逼真測試-Rails-5/","link":"","permalink":"http://wualnz.com/%E8%A4%87%E8%A3%BD-Production-%E7%9C%9F%E5%AF%A6%E7%92%B0%E5%A2%83%E8%B3%87%E6%96%99%EF%BC%8C%E6%A8%A1%E6%93%AC%E8%B6%85%E9%80%BC%E7%9C%9F%E6%B8%AC%E8%A9%A6-Rails-5/","excerpt":"","text":"為了擬真測試，我們往往需要更真實的數據，採取的作法是：將 Production 真實性的資料庫複製一份至 local 端測試，本文採取直接用Postgresql操作，並紀錄當下遇到的問題及解決辦法。 將要測試的資料庫（例如：production）匯出成sql將原始production資料庫:database_name，匯出成「database_name-20180612.sql」檔案 （註：通常會加上日期，會較為清楚知道這是什麼時期匯出的資料） 你需要知道：Server端上的database_url、Server的IP及資料庫的名稱格式大約會像是這樣： 你可以從Google Cloud Platform上查詢或是在Server租用的主機商查看資訊123database_url範例格式：postgresql://資料庫使用者:資料庫密碼@ServerIP/database_name真實格式：postgresql://hazelwu:123456@11.12.200.205/production如果不清楚database_url是怎麼生成的，可以參考這篇文章：Rails Guide Configure database 遠端連上Server後ssh hazelwu@11.12.200.205移動到專案目錄後，在Commend Line上輸入，並自行填上相關參數123pg_dump -h 11.12.200.205 -U 資料庫使用者 資料庫名稱 &gt; production-20180612.sql## 範例：使用者 hazelwu, 資料庫名稱 123456pg_dump -h 11.12.200.205 -U hazelwu 123456 &gt; production-20180612.sql pg_dump dbname &gt; dumpfile 原始指令：pg_dump 資料庫名稱 &gt; 匯出檔案名稱 參數意義： -h：host -U：user -p：port（註：專案未有設定port，所以不需要設定此參數） 由於是在Server端要連線至資料庫（本文撰寫時採用GCP），所以需要特別輸入IP位址及User名稱，才能有權限讀取資料庫，並匯出sql檔案。 輸入完指令後，便會將 Porduction的資料庫檔案，匯出成sql檔。接著要做的就是把這個新生成的檔案（production-20180612.sql），從Server拉到自己Local端 不過，通常資料庫都會越來越肥大，在拉到Local端之前要記得先用gzip壓縮一下哦。 在Server上 gz 壓縮 | 越來越肥的資料庫以下操作指令皆為在Server端輸入。 將檔案壓縮成gz解壓縮完便會還原成 production-20180612.sql1$ gzip production-20180612.sql gz解壓縮指令1$ gunzip production-20180612.sql.gz Remote Server 下載 sql 到 Local端要如何從Server端直接下載檔案到本機電腦呢？有幾種方式：curl、wget或是scp都可以。 使用wget的話，需要將檔案放在server上的開放空間，且必須要是瀏覽器可以打開的網址，例如 12$ Wget urlwget http://11.12.200.205:8000/production-20180612.sql 以下是採取scp方式scp其實很好記，顧名思義：Server Copy，夠白話了吧XD 指令格式123scp user@server:/路徑/你要/下載/的檔案 ~/Desktop/你要下載/到/電腦/的哪個/位置scp hazelwu@11.12.200.205:/home/hazelwu/test/current/production-20180612.sql ~/Desktop/github/test_rails## 這樣便會將production-20180612.sql下載至desktop/github/test_rails資料夾內。 你知道嗎？其實還能夠再簡化一點指定你要下載的東西，在Commend Line上先移動到想要把檔案放的資料夾（例如/tmp），接著後面那串指令（表示本機位置）以.來取代就可以了，便會將檔案下載到/tmp內。 建議可以直接放在專案內的tmp內，因為不會被commit進去、tmp主要都為放暫時性檔案使用。（通常gitinore有加入/tmp/*） 打以下的指令時，可以先在Command Line移動到你想要複製的目錄，後面就不用打一長串的東西囉 123### 簡化後的版本[local端] cd tmp/scp hazelwu@11.12.200.205:/home/hazelwu/test/current/production-20180612.sql . 這樣即可將sql匯出來哩 保個保險吧：攔截會發送給使用者的動作（Email)由於這些資料都非常真實，是來自真實使用者的資料，包含信箱手機等都為真的所以不能真的做出通知使用者的行為，例如 E-Mail 寄送、簡訊認證碼送出等。 Rails 有提供 register_interceptor攔截 Email config/initializers/email.rb 12345678# 新增 config/initializers/email.rb # 在 Rails 啟動時，如果是非 production 環境就載入EmailInterceptor：unless Rails.env.production? puts &quot;阻攔Email，將收件人皆改為test測試用信箱&quot; require &#x27;email_interceptor&#x27; ActionMailer::Base.register_interceptor(EmailInterceptor)end lib/email_interceptor.rb新增以下程式碼 123456## 新增 lib/email_interceptor.rb 並且自訂條件：將收件人信箱皆改為測試用信箱class EmailInterceptor def self.delivering_email(message) message.to = [&#x27;test@example&#x27;] endend 將 sql 匯出到 local端 / develop environment順利抓下Server端的資料後，也設上攔截機制了，接著可以匯入資料囉。 匯出資料庫pg_dump database_name &gt; backup.sql 匯入資料庫psql db_name &lt; backup.sql 還記得剛剛匯出的指令嗎？pg_dump -h 11.12.200.205 -U hazelwu 123456 &gt; production-20180612.sql接著要匯入的話，指令要這樣打psql 123456 &lt; production-20180612.sql輸入完之後，可以進入到Console.log試試看資料庫有沒有匯入成功 有發現為什麼突然少那麼多參數嗎？ 原因 由於目前環境是Local端，不需要填入帳號密碼等參數來藉由GCP連入資料庫了，我們只要指定檔案，匯入到本機的資料庫即可。預設是沒有輸入參數，他會抓當前的IP位置 重整 Postgresql 匯入/匯出資料庫指令1234匯出資料庫psql project_development &lt; project_production-20180612.sql匯入資料庫psql project_development &lt; project_production.sql 實際操作時，遇到的問題：1. 從Server端抓下來的User data，欄位上並沒有實際的密碼，導致會失敗，User Model做驗證：導致密碼效驗不能為空白，有什麼辦法可以自動化加上自設的密碼？ 在 Server端 用 Gem 產生資料檔 Seed，抓下來到Local端跑種子檔，結果：無法與關聯資料庫對上，關聯id對不上去（如：user_id會對不上，找不到該User） 資料格式類似如下12User.create!([&#123;email: &quot;fduwsbxcbkdym4jzxn6b@gmail.com&quot;, encrypted_password: &quot;zxkdfgjeute123ds&quot;, reset_password_token: nil, reset_password_sent_at: nil, remember_created_at: nil&#125;第一次試著做時，是用Gem &#39;seed_dump&#39;在Server端上做，因屢次失敗的原因，後面便不採用seed_dump的做法了。轉移production資料到local，直接用postgresql指令直接拉，會比較快。 2. 在Rails 5 上重新刪除資料，並再建立一次，有辦法讓id重新從0開始跑嗎？將local端資料庫全部刪除，打算跑rails db:seed:users，將production轉移至local但發現會對不上關聯資料庫的部分，因為重建立的user_id並不是從0開始，這該怎麼辦？ 刪除資料後，id會從0開始有下列幾個做法 TRUNCATE table TABLE_NAME; DROP table TABLE_NAME; rails db:drop TRUNCATE 與 DROP 兩者的差別在於 前者是把資料欄位全部刪除； 後者 DROP 則是把整個 TABLE 刪除 3. Server上操作postgresql時，準備匯出sql檔，發現Server的資料庫與專案上的資料庫版本不一致，導致無法順利匯出由於Server端的資料庫與專案上安裝的資料庫版本不符（一個為9.6版本、一個則是9.5版本），導致無法匯出 一開始的嘗試：先在Server上安裝相同版本的psql，但未能成功，仍還是舊版本QQ搞版本總是很複雜又很麻煩，不過有一個比較快的方法是： 在跑pg_dump指令時，prefix前面加上指定的版本，就能夠指定為9.6版本跑pg_dump的指令，而不是舊的版本（9.5) 如何解決：因此我們需要指定版本：/usr/lib/postgresql/9.6/bin/pg_dump 後面再加上原要接的參數，就可以輕鬆搞定版本問題啦！ 1234# 原本psql匯出指令pg_dump -h 11.12.200.205 -U hazelwu 123456 &gt; production-20180612.sql # 解決版本不一致 匯出指令/usr/lib/postgresql/9.6/bin/pg_dump -h 11.12.200.205 -U hazelwu 123456 &gt; production-20180612.sql Reference | 參考資料 How to Download a File from a Server with SSH /SCP Rails 複製資料到 development環境 Postgresql Dump 小蟹本人XD","categories":[],"tags":[{"name":"scp server","slug":"scp-server","permalink":"http://wualnz.com/tags/scp-server/"},{"name":"production data into local","slug":"production-data-into-local","permalink":"http://wualnz.com/tags/production-data-into-local/"},{"name":"copy production data transfer to staging","slug":"copy-production-data-transfer-to-staging","permalink":"http://wualnz.com/tags/copy-production-data-transfer-to-staging/"}]},{"title":"Rails Server打不開嗎？你應該看看這篇","slug":"Rails-Server打不開嗎？你應該看看這篇","date":"2018-05-21T19:34:48.000Z","updated":"2021-12-22T03:26:58.456Z","comments":true,"path":"/Rails-Server打不開嗎？你應該看看這篇/","link":"","permalink":"http://wualnz.com/Rails-Server%E6%89%93%E4%B8%8D%E9%96%8B%E5%97%8E%EF%BC%9F%E4%BD%A0%E6%87%89%E8%A9%B2%E7%9C%8B%E7%9C%8B%E9%80%99%E7%AF%87/","excerpt":"","text":"明明Ruby Server已經關閉了，但重新輸入rails server 出現錯誤訊息：Server已經打開了過去常遇到此問題，我都是直接重開機。後來仔細查詳解，發現有更快的解決方法。 出現的錯誤訊息1A server is already running. Check /Users/hazelwu/Desktop/github/project/tmp/pids/server.pid. 除了重開機以外，你還有更好的選擇！先查出使用的port有什麼應用程式執行首先要先知道你的Rails Server上一次關閉前是使用哪個port上預設輸入rails s皆為設定port為3000。例如：localhost:30003001可以更改為預設的3000，或是看你的server開在哪個port上 在Iterm/commend上輸入下列指令，可以查出3001的port被哪些應用程式開啟。1lsof -i tcp:3001 上圖中可以明顯看到佔用電腦3001的port有ruby及ngrok而ruby對應的PID是809 殺掉Ruby對應的PID，強迫關閉此刻輸入 1kill -9 809 就可以成功將佔用port:3001的Rails Server關閉重新在command上輸入rails s -p 3001即可順利開啟localhost:3001囉 補充：在Cmd如何關閉 Rails Server除了Ctrl+C可以關掉rails server外，如果不小心進入無窮迴圈，用Ctrl+C沒有作用，還有另一種方法：Ctrl+Z Ctrl+C / Cmd + C Ctrl+Z / Cmd + Z Reference | 參考資料 Can’t stop rails server","categories":[],"tags":[{"name":"Rails 5","slug":"Rails-5","permalink":"http://wualnz.com/tags/Rails-5/"},{"name":"close rails server","slug":"close-rails-server","permalink":"http://wualnz.com/tags/close-rails-server/"}]},{"title":"遠端ssh連到Server，無法進入Staging Rails Console的終極解決辦法：移除bin","slug":"遠端ssh連到Server，無法進入Staging-Rails-Console的終極解決辦法：移除bin","date":"2018-04-29T19:43:52.000Z","updated":"2021-12-22T03:26:58.462Z","comments":true,"path":"/遠端ssh連到Server，無法進入Staging-Rails-Console的終極解決辦法：移除bin/","link":"","permalink":"http://wualnz.com/%E9%81%A0%E7%AB%AFssh%E9%80%A3%E5%88%B0Server%EF%BC%8C%E7%84%A1%E6%B3%95%E9%80%B2%E5%85%A5Staging-Rails-Console%E7%9A%84%E7%B5%82%E6%A5%B5%E8%A7%A3%E6%B1%BA%E8%BE%A6%E6%B3%95%EF%BC%9A%E7%A7%BB%E9%99%A4bin/","excerpt":"","text":"情境：當用ssh遠端連線至server時，要進入專案內的rails console.log，出現rails new [options]，找不到rails project的目錄，紀錄如何解決的筆記。 123ssh deploy@xxx.xxx.xxx.xxxcd ~/project/currentbundle exec rails c staging 遠端連線至server時，想進去看log訊息，卻出現下圖的錯誤訊息 12rails new APP_PATH [options]....以下略 解決辦法專案是用capistrano 1.3.1 版本部署 在local端用力打開 config/deploy.rb 找到linked_dirs，然後把bin吃掉 重新推上github上 重新部署一次 試試看，重新遠端ssh連線，就可以進入staging console囉 原始config/deploy.rb檔案設定1set :linked_dirs, %w&#123;bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/uploads public/assets&#125; 移除bin設定要移除bin，所以會變成下列的程式碼1set :linked_dirs, %w&#123;log tmp/pids tmp/cache tmp/sockets vendor/bundle public/uploads public/assets&#125;接著，重新推到github repo上重開staging伺服器 1cap staging deploy:restart 大概有九成可以解決問題XD Reference | 參考資料 rails console command not working","categories":[],"tags":[{"name":"rails server","slug":"rails-server","permalink":"http://wualnz.com/tags/rails-server/"},{"name":"Rails 5","slug":"Rails-5","permalink":"http://wualnz.com/tags/Rails-5/"},{"name":"ssh","slug":"ssh","permalink":"http://wualnz.com/tags/ssh/"},{"name":"console","slug":"console","permalink":"http://wualnz.com/tags/console/"}]},{"title":"Rails 與 Webpacker 神奇的結合：用image-wepback-loader 來壓縮圖片","slug":"Rails-與-Webpacker-神奇的結合：用image-wepback-loader-來壓縮圖片","date":"2018-04-27T19:51:02.000Z","updated":"2021-12-22T03:26:58.456Z","comments":true,"path":"/Rails-與-Webpacker-神奇的結合：用image-wepback-loader-來壓縮圖片/","link":"","permalink":"http://wualnz.com/Rails-%E8%88%87-Webpacker-%E7%A5%9E%E5%A5%87%E7%9A%84%E7%B5%90%E5%90%88%EF%BC%9A%E7%94%A8image-wepback-loader-%E4%BE%86%E5%A3%93%E7%B8%AE%E5%9C%96%E7%89%87/","excerpt":"","text":"Gem Webpacker 特色 Webpacker是一個Gem，即使不用裝webpack，也能在Rails上編譯，然後也拿掉原生使用的Srocket。Webpacker使用的是webpack 3.x.x版本，他已經預設幫你安裝了幾件事，但你需要另外設定檔 用babel 將ES6 編譯成 ES5 在webpack.yml上即可輕鬆設定好entry（入口）、output（出口） PostCSS，加入前綴詞 CDN 支援 前端框架（React、Agnular、Elm、Vue）支援 內建 Rails view的helper 像用babel轉成ES5、PostCSS加前綴詞，只需要在專案上加入.babelrc、postcss.config.js做設定即可，當然package.json也需要安裝相關的套件才能跑 這邊不暫述怎麼在 Rails 5 初始化webapcker的設定，只介紹怎麼載入loader 先讓webpacker能讀取設定路徑內，所有的圖片 再讓webpacker載入loader 安裝及設定webpacker.yml設定entry、output我個人設定是把所有image、js、css檔都放在app/frontend下12345default: &amp;default source_path: app/frontend source_entry_path: packs public_output_path: packs cache_path: tmp/cache/webpacker frontend/application.js 先載入所有圖片設定123# app/frontend/application.jsrequire.context(&#x27;../images/&#x27;, true, /\\.(gif|jpg|png|svg)$/i);require.context(&#x27;../styles/&#x27;, true, /^\\.\\/[^_].*\\.(css|scss|sass)$/i); Webpacker這個Gem，他已經預先使用CSS loader、Sass loader了這項設定會使你專案內（app/frontend）的圖片、CSS等，都會被載入 在安裝webpacker時，他也會預先幫你設好目錄，在config/webpack檔案分別有development.js、environment.js、production.js。 安裝image-webpack-loader圖片壓縮須先安裝image-webpack-loader，我們將透過npm來安裝這個loader。輸入 npm install image-webpack-loader 載入image-webpack-loader確認安裝完後，我們便來開始設定：載入image-webpack-loader在config/webpack/environment.js下設定，options可以客製化，可以找image-webpack-loader的官方文件看更詳細的設置教學。 1234567891011121314151617181920212223242526# config/webpack/environment.jsenvironment.loaders.append(&#x27;image&#x27;, &#123; test: /\\.(gif|png|jpe?g|svg)$/i, loader: &#x27;image-webpack-loader&#x27;, options: &#123; mozjpeg: &#123; progressive: true, quality: 65 &#125;, // optipng.enabled: false will disable optipng optipng: &#123; enabled: false &#125;, pngquant: &#123; quality: &#x27;65-90&#x27;, speed: 4 &#125;, gifsicle: &#123; interlaced: false &#125;, // the webp option will enable WEBP webp: &#123; quality: 75 &#125; &#125;&#125;); 重新編譯 Webpacker以上皆完成後，在cmd輸入以下指令，做重新編譯的動作webpack -w或ruby ./bin/webpack-dev-server你就會發現，圖片被壓縮了！！（撒花） Reference Webpacker官方文件 基於 Webpack 引入公共庫的幾種方式","categories":[],"tags":[{"name":"Rails 5","slug":"Rails-5","permalink":"http://wualnz.com/tags/Rails-5/"},{"name":"Rails with Webpacker","slug":"Rails-with-Webpacker","permalink":"http://wualnz.com/tags/Rails-with-Webpacker/"},{"name":"image compress","slug":"image-compress","permalink":"http://wualnz.com/tags/image-compress/"},{"name":"image-webpack-loader","slug":"image-webpack-loader","permalink":"http://wualnz.com/tags/image-webpack-loader/"}]},{"title":"Rails Server 無法連結 Postgresql，出現s.PGSQL.5432 ERROR，解決辦法","slug":"Mac-安裝postgresql後無法連結Rails-Server，出現s-PGSQL-5432-ERROR，這天殺的訊息！","date":"2018-04-08T19:59:09.000Z","updated":"2021-12-22T03:26:58.454Z","comments":true,"path":"/Mac-安裝postgresql後無法連結Rails-Server，出現s-PGSQL-5432-ERROR，這天殺的訊息！/","link":"","permalink":"http://wualnz.com/Mac-%E5%AE%89%E8%A3%9Dpostgresql%E5%BE%8C%E7%84%A1%E6%B3%95%E9%80%A3%E7%B5%90Rails-Server%EF%BC%8C%E5%87%BA%E7%8F%BEs-PGSQL-5432-ERROR%EF%BC%8C%E9%80%99%E5%A4%A9%E6%AE%BA%E7%9A%84%E8%A8%8A%E6%81%AF%EF%BC%81/","excerpt":"","text":"s.PGSQL.5432是蝦咪挖溝？紀錄在 Mac 跑Rails Server時使用PG資料庫，出現s.PGSQL.5432 ERROR，我是如何解決的。這次遇到的狀況是要跑rails db:migrate時出現錯誤訊息，追根究底時發現有可能原因是出自於psql資料庫，於是在終端機輸入psql出現ERROR訊息：RUN版本：postgresql 10.3 123psql: could not connect to server: No such file or directory Is the server running locally and accepting connections on Unix domain socket &quot;/var/pgsql_socket/.s.PGSQL.5432&quot;? 上述錯誤訊息是在說：現在開啟的Rails Server沒有與本機的psql資料庫連線，你要不要再確認一下？ 造成此原因有很多種，但最白癡的原因莫過於本端沒有打開psql服務 若你也有出現此錯誤訊息，可以先測試看看是不是根本沒有打開psql服務，若仍無法排除，再嘗試重新裝載psql。$ pg_ctl -D /usr/local/var/postgres start 解決良藥1. 本機開啟psql的服務如果psql本身被關閉的話，輸入以下指令便會告知你psql服務被打開囉。Mac若重新開機的話，psql服務會自動被關閉，通常遇到無法連線local psql時輸入此指令皆可解決\u001c。$ pg_ctl -D /usr/local/var/postgres start 2. 重新裝載psql如果本機確認有打開psql服務的話，仍無法排除狀況，那就重新裝載psql吧QQ。 先移除前一個版本Postgresql$ brew uninstall --force postgresql 確保有刪除乾淨，再次手動刪除$ rm -rf /usr/local/var/postgres 用Homebrew 安裝 Postgres$ brew install postgres開啟PostgreSQL的Server，在終端機輸入：$ pg_ctl -D /usr/local/var/postgres start 建立資料庫$ initdb /usr/local/var/postgres或是直接在Rails專案建立資料庫$ rails db:create 備份資料庫如果local端有舊的資料庫，也並不打算轉移的話…刪除舊有資料庫1rm -r /usr/local/var/postgres 重新建立一個新的1initdb /usr/local/var/postgres新建新的資料庫createdb 資料庫名稱 Reference PostgreSQL and PostGIS installation in Mac OS.","categories":[],"tags":[{"name":"rails server","slug":"rails-server","permalink":"http://wualnz.com/tags/rails-server/"},{"name":"s.PGSQL.5432","slug":"s-PGSQL-5432","permalink":"http://wualnz.com/tags/s-PGSQL-5432/"},{"name":"Rails 5","slug":"Rails-5","permalink":"http://wualnz.com/tags/Rails-5/"},{"name":"psql","slug":"psql","permalink":"http://wualnz.com/tags/psql/"}]},{"title":"幫 Rails 建立一個 Docker Container吧","slug":"幫-Rails-建立一個-Docker-Container吧","date":"2018-04-07T20:15:59.000Z","updated":"2021-12-22T03:26:58.460Z","comments":true,"path":"/幫-Rails-建立一個-Docker-Container吧/","link":"","permalink":"http://wualnz.com/%E5%B9%AB-Rails-%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B-Docker-Container%E5%90%A7/","excerpt":"","text":"幫 Rails 建立一個 Docker Container吧 為什麼你要使用Docker？Docker最重要的價值是：有效解決環境配置、衝突的問題可以在一台機器上跑，就可以在所有的機器上跑。如果有問題的話，就會是大家的問題，大家一起解決XD docker是建立一個container新的環境，有助於不會因為不同作業系統(Mac, Linux)導致無法在本端跑環境你不用因為不小心升級了npm的webpack等等……..架不起來環境最後電腦整個砍掉重灌之類的……….相信我你會很想死一千遍QQ。 Mac 教學請先安裝 Docker，在Mac環境下安裝Docker非常簡單，只要安裝UI軟體即可XD。Mac 安裝 Docker = &gt;請點我下載 安裝完後，我們先以建立一個新專案來跑Docker 建立新專案首先建立一個新的資料夾，並且先手動建立四個檔案1234567cd desktopmkdir dockercd mkdirtouch Gemfile.locktouch Gemfiletouch docker-compose.ymltouch Dockerfile 手動填上設定docker_1可以手動改成自己的專案名稱，ruby版本可以自由更改，撰寫此篇文章時是Ruby 2.5.0版本123456789# DockerfileFROM ruby:2.5.0RUN apt-get update -qq &amp;&amp; apt-get install -y build-essential libpq-dev nodejsRUN mkdir /docker_1WORKDIR /docker_1ADD Gemfile /docker_1/GemfileADD Gemfile.lock /docker_1/Gemfile.lockRUN bundle installADD . /docker_1 1234567891011121314# Docker-compose.ymlversion: &#x27;2&#x27;services: db: image: postgres web: build: . command: bundle exec rails s -p 3000 -b &#x27;0.0.0.0&#x27; volumes: - .:/docker_1 ports: - &quot;3000:3000&quot; depends_on: - db Gemfile最簡單，只要輸入兩行即可 123# Gemfilesource &#x27;https://rubygems.org&#x27;gem &#x27;rails&#x27;, &#x27;~&gt; 5.1.6&#x27; docker-compose.yml 用途docker-compose.yml的用途 web container database constainer 設定完成，跑指令！設置好檔案後，開始跑指令吧 1docker-compose run web rails new --force --database=postgresql 這個指令輸入後，會自動建立一個容器，裝著新的rails 專案，Dockerfile會將專案內的Gemfile複製到docker container上，並且自動執行bundle install。還記得我們剛剛在新增Gemfile添加內容時，只安裝了Rails的Gem database的username則設定為：postgresql 完整跑完指令後，會發現專案資料夾已經設置好Rails框架了，像是db, assets等等 設置database的username接著來database.yml檔，因為剛剛輸入的指令設定database username是postgresql因此資料庫的yml檔必須也添加上去，添加username、password、host 123456789default: &amp;default adapter: postgresql encoding: unicode # For details on connection pooling, see Rails configuration guide # http://guides.rubyonrails.org/configuring.html#database-pooling pool: &lt;%= ENV.fetch(&quot;RAILS_MAX_THREADS&quot;) &#123; 5 &#125; %&gt; username: postgres password: host: db 架設環境吧！docker-compose up 的指令等同於 rails s，只是是遠端操作docker，那port設定是在30001docker-compose up 如果設置檔案過程都順利、正常的話，輸入localhost:3000即會看到Rails 架設成功的畫面惹。恭喜你，看到這個畫面時，也代表進入Docker的大坑了（誤） Docker 指令介紹當你在Gemfile 有變動時，都要重跑bundle，那在docker上則是輸入docker-compose build1docker-compose build跑任何Rails指令前都必須加上docker-compose run web例如：想要跑rails db:migrate 遷移資料庫指令時前面也要加上此行 1docker-compose run web rails db:migrate 開啟伺服器 localhost:3000docker-compose up 關閉伺服器docker-compose down 進入Docker rails consoledocker-compose rails cDocker 一次滿足你三個願望不管你想要安裝Yarn, Node.js還是 Webpacker, 前端Framework都沒有問題唷 想在Docker上安裝yarn、Node.js？沒問題123456RUN apt-get update &amp;&amp; apt-get install -y curl apt-transport-https wget &amp;&amp; \\ curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &amp;&amp; \\ echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | tee /etc/apt/sources.list.d/yarn.list &amp;&amp; \\ apt-get update &amp;&amp; apt-get install -y yarnRUN curl -sL https://deb.nodesource.com/setup_7.x | bash - &amp;&amp; \\ apt-get install nodejs Docker 安裝 Webpacker？沒問題Docker container上加入webpacker？沒問題啊！在Gemfile上添加webpacker 1gem &#x27;webpacker&#x27;, &#x27;~&gt; 3.4&#x27; 接著重新Run一次以下指令 12docker-compose run web bundle updatedocker-compose build Docker上導入React framework？沒問題！docker-compose run web rails webpack:install:react你有發現到嗎？其實安裝webpacker指令在rails上也是輸入rails webpack:install只是前面多加了docker-compose run web而已不要被長長的指令嚇到了Q_Q 用 Alias 縮短docker指令覺得每次都要輸入這史上超長的指令，很浪費人生、手指力氣吧你想想看，我今天想在docker上新增一個container，我要這樣子輸入docker-compose run web rails controller -g home超級無敵霹靂有夠長的好不好！ 12345vim ~/.bashrcalias dc-web=&#x27;docker-compose run web&#x27;alias dc-migrate=&#x27;docker-compose run web rails db:migrate&#x27;alias dc-rspec=&#x27;docker-compose run web rspec&#x27;alias dc=&#x27;docker-compose&#x27; 以後在終端機上就可以簡單輸入dc-web這些囉也可以自行設定你常用的指令。","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://wualnz.com/tags/Docker/"},{"name":"Rails 5","slug":"Rails-5","permalink":"http://wualnz.com/tags/Rails-5/"},{"name":"webpacker","slug":"webpacker","permalink":"http://wualnz.com/tags/webpacker/"}]},{"title":"前端永遠的課題：字體－呈現一致性的跨裝置","slug":"前端永遠的課題：呈現一致性的跨裝置：關於Font","date":"2018-03-17T20:25:39.000Z","updated":"2021-12-22T03:26:58.459Z","comments":true,"path":"/前端永遠的課題：呈現一致性的跨裝置：關於Font/","link":"","permalink":"http://wualnz.com/%E5%89%8D%E7%AB%AF%E6%B0%B8%E9%81%A0%E7%9A%84%E8%AA%B2%E9%A1%8C%EF%BC%9A%E5%91%88%E7%8F%BE%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E8%B7%A8%E8%A3%9D%E7%BD%AE%EF%BC%9A%E9%97%9C%E6%96%BCFont/","excerpt":"","text":"前端最主要就是將所有裝置能一致化顯示，今天來談談「字體」的部分大家都知道Windows, Linux, Mac三大作業系統，想當然也有其系統的內建字體，若只指定常見的微軟正黑體，其他作業系統沒有該字體，就會顯示該作業系統的預設字體，而不是微軟正黑體，這樣就沒有超能力隨心所欲控制字體了，這怎麼行！身為一位專業的前端工程師，是有必要了解網頁字體的，Okay, Let’s go. 要能隨自己心念呈現想要的字體，首先要先理解「字體擺放的順序」，順序超重要的啊 字體通用順序英文字型 &gt; Linux系統 &gt; Mac系統 &gt; Windows &gt; 基礎字體 設定 font-family 到底是中文在前面、還是英文啊？ 英文字型在前，中文字型在後 如果中文字型在前，那麼網頁會永遠讀取不到Arial的字體，正確示範應為以下設定1font-family: &quot;Arial&quot;, &quot;微軟正黑體&quot; 使用機率較少的字體放前，使用機率高的字體放後 使用機率較少的字體放在前面（例如只有Mac系統才有的蘋果儷中黑字體） 使用機率高的字體放在後面（幾乎每個作業系統都有的新細明體或標楷體） 舉例來說，如果我想要瀏覽這個網站的使用者，使用Mac裝置看得是蘋果儷中黑，用Windows瀏覽則看到的是微軟正黑體，那該怎麼設定？ 1font-family: &quot;蘋果儷中黑&quot;, &quot;微軟正黑體&quot;, sans-serif 確保裝置都能讀取字體：中英字體名稱皆設定建議設定font-family時不只是要設定A的中文字體，也要設定A的英文字行名稱都要設定，這樣做是為了防止有些作業系統或裝置抓不到該中文字體名稱，兩者皆設定會比較保險。舉例來說，微軟正黑體的英文名稱為：Microsoft JhengHei，那就可以像下面這樣設定1font-family: Microsoft JhengHei, &quot;微軟正黑體&quot;, sans-serif 在 Rails 5 裡引用特殊英文字體如果設計師給你的字型是特殊的英文字體（也就是非內建字體），需包在專案內 舉例來說，今天設計師給我CenturyGothicBold字體，引用此字體步驟 把字體包放到 assets/fonts資料架內 用 Fontface Generator 產生各種支援的eot, woff, ttf 格式支援各系統Font-face 產生器 上傳你要客製化使用的英文字體，Generator(產生器)便會自動生成各系統使用的字體檔 在css上設定@font-face，若在rails引用路徑，可用 assets_path的helper 針對個別需使用此字體的element（例如h1）或整體body設定 font-family: “CenturyGothicBold” 123456789@font-face &#123; font-family: &#x27;CenturyGothicBold&#x27;; src: url(&#x27;&lt;%= asset_path(&quot;fonts/CenturyGothicBold.eot&quot;) %&gt;&#x27;); src: url(&#x27;&lt;%= asset_path(&quot;fonts/CenturyGothicBold.eot&quot;) %&gt;&#x27;) format(&#x27;embedded-opentype&#x27;), url(&#x27;&lt;%= asset_path(&quot;fonts/CenturyGothicBold.woff&quot;) %&gt;&#x27;) format(&#x27;woff2&#x27;), url(&#x27;&lt;%= asset_path(&quot;fonts/CenturyGothicBold.woff&quot;) %&gt;&#x27;) format(&#x27;woff&#x27;), url(&#x27;&lt;%= asset_path(&quot;fonts/CenturyGothicBold.ttf&quot;) %&gt;&#x27;) format(&#x27;truetype&#x27;) url(&#x27;&lt;%= asset_path(&quot;fonts/CenturyGothicBold.svg#CenturyGothicBold&quot;) %&gt;&#x27;) format(&#x27;svg&#x27;);&#125; 小知識：為什麼有這麼多種格式的字型？（woff2, woff, eot, ttf） 原因：有些瀏覽器只會讀取某種格式的字體檔，如果你想要把所有裝置瀏覽網頁都呈現統一的字體瀏覽的話，就得必須設這些擴充字體，讓某些不支援的瀏覽器或Android手機可以正常顯示你想要的字體 小知識：你知道字體有四大天王的格式嗎？ 網頁上有四種字型格式：WOFF2、WOFF、EOT、TTF有些瀏覽器只會讀取某種格式的字體檔， WOFF 2.0 支援的瀏覽器 WOFF 給大部分瀏覽器 EOT 給舊版 Android (4.4版以下) 的瀏覽器 TTF 給舊版 IE ( IE 9 以下) 的瀏覽器 有興趣者可以參考這篇Stack發問：Why should we include ttf, eot, woff, svg,… in a font-face 三大作業系統 | 字體中英對照Mac OS華文楷體：STKaiti華文細明體：STSong華文仿宋：STFangsong儷黑 Pro：LiHei Pro Medium儷宋 Pro：LiSong Pro Light標楷體：BiauKai蘋果儷中黑：Apple LiGothic Medium蘋果儷細宋：Apple LiSung Light Windows新細明體：PMingLiU細明體：MingLiU標楷體：DFKai-SB黑體：SimHei細明體：mingliu新細明體：Nmingliu仿宋：FangSong楷體：KaiTi仿宋_GB2312：FangSong_GB2312標楷體：KaiTi_GB2312微軟正黑體：Microsoft JhengHei微軟雅黑體：Microsoft YaHei Linux文泉驛正黑：WenQuanYi Zen Hei全字庫正楷體：TW-Kai Reference | 參考資料 網頁中英文字型(font-family)跨平台設定最佳化","categories":[],"tags":[]},{"title":"Git筆記：移花接木的Rebase，整理commit訊息的好幫手","slug":"Git筆記：移花接木的Rebase，整理commit訊息的好幫手","date":"2018-03-03T20:42:10.000Z","updated":"2021-12-22T03:26:58.453Z","comments":true,"path":"/Git筆記：移花接木的Rebase，整理commit訊息的好幫手/","link":"","permalink":"http://wualnz.com/Git%E7%AD%86%E8%A8%98%EF%BC%9A%E7%A7%BB%E8%8A%B1%E6%8E%A5%E6%9C%A8%E7%9A%84Rebase%EF%BC%8C%E6%95%B4%E7%90%86commit%E8%A8%8A%E6%81%AF%E7%9A%84%E5%A5%BD%E5%B9%AB%E6%89%8B/","excerpt":"","text":"Git 有個神奇的功能叫：Rebase，中文翻譯叫「變動基底」，簡單來說就是移花接木，把某一個樹枝（Branch）接到Master的主幹上等等功能，指定的節點可以重新 commit，花了一點時間做功課，把自己的理解的寫下來 為什麼要用 Rebase ？變動基底的話不就很危險嗎Rebase 的好處 &gt; 壞處，接著養成好習慣，在每次做Rebase之前，開一個backup的branch，以防改爛時還可以回溯，這樣就什麼都不怕啦！ Rebase能做什麼？ 可以修改 commit 訊息 （Reword） 可以修改 commit 內容（Edit），甚至可以拆成兩個 commit 紀錄、合併commit 重新 commit ( Pick) 更換 commit 順序（做這個要很小心，可能會把你的專案搞爛） 修改 commit 順序 (Edit) 拆解 commit (把多個commit紀錄變成一個commit) 壓縮 commit，合併 commit 訊息 (Squash) 刪除 commit (Skip)即使列出來還是不懂Rebase的好處嗎？在此示範，我常常會有種鬼打牆的狀況…..亂糟糟的Commit紀錄 你看到的git log有好幾處幾乎是有重複的commit紀錄，這時就有必要性整理commit紀錄了！ 用rebase來整理commit紀錄由於我是在develop的branch開發的，所以整理commit message自然也要在develop上做首先先git log 查看你想要塗改的commit紀錄，最好是在前面好幾個紀錄前 如果說要重新commit的話就是選你的要的那一行commit，預設都是pick輸入git rebase -i 968cada 那我把第二行的commit 調整首頁區塊 pick 修改成 squashsquahs代表將這個commit紀錄，合併到上一個commit裡面 接著會跳出視窗：請你修改commit message &lt; 我不想要留下那個commit訊息，我要直接合併，因此我將第二個commit message那一行全部刪除 如何在Vim編輯器下存檔、離開？ 下圖為Vim編輯器下，如果你還不太會用Vim編輯器，只要記得下列兩個超實用的指令就可走遍半個江湖如何修改：按鍵盤的i即會出現游標，便可以開始修改。修改完成後按下ESC鍵，並輸出:wq即可存檔不想存檔？想要直接離開，一樣先按下ESC並輸入:q即可不存檔離開 接著就成功的合併commit紀錄啦！ 如果覺得還是醜醜的可以繼續rebase整理完再合併到master上 接著就是切換到master =&gt; git checout master =&gt; 合併 git merge develop &nbsp; 如果選擇其他的像reword、edit的選項（修改commit訊息、或是一個commit拆成多個commit）他會自動跳到你當時儲存的節點當成是HEAD接著再git add 你想要分的檔案 git commit -m 就可以拆分commit紀錄了 &nbsp; 整理完develop的commit紀錄後，再git merge master就可以囉 別忘了在rebase前，記得開一個backup的branch，以防萬一啊！ 練習試試看，推薦Learn Git Branching，我非常推薦一個非常棒的Github教學網站：Learn Git Branching要學Git往往最困難的是要準備此情境的檔案，因為很懶（誤）…但在這個Learn Git Branching直接幫你準備好，甚至很變態的在網站上輸入git指令就可以馬上看到結果。這邊還可以學到reset, revert, rebase, cherry-pick\b根據你想要學的單元，他會給你一個目標進而完成關卡。他的介面是這樣，動手在左邊視窗輸入指令，右邊的圖便會照著你的指令移動 看再多的教學，都只是用眼睛看而已，一定要動手實作看看，才真的可以吸收進去，快點點進去吧XD","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://wualnz.com/tags/Git/"}]},{"title":"Git push repo失敗： Could not resolve host: github.com","slug":"Git-push-repo失敗：-Could-not-resolve-host-github-com","date":"2018-02-28T21:02:26.000Z","updated":"2021-12-22T03:26:58.452Z","comments":true,"path":"/Git-push-repo失敗：-Could-not-resolve-host-github-com/","link":"","permalink":"http://wualnz.com/Git-push-repo%E5%A4%B1%E6%95%97%EF%BC%9A-Could-not-resolve-host-github-com/","excerpt":"","text":"今天在練習JavaScript時，正要把成果push到Git repo裡，出現Could not resolve host: github.com錯誤訊息，在此紀錄如何解決 錯誤訊息Could not resolve host: github.com 解決辦法 在終端機上先Ping github.com 確認有連線到，Cmd+C結束 直接竄改本地端的host文件 開啟finder -&gt; GOTO -&gt; etc/hosts 將hosts拉到桌面，在127.0.0.1 localhost 下面一行新增「192.30.255.113 github.com」儲存 儲存後將hosts丟回etc/hosts資料夾，會要求輸入admin密碼，輸入後並取代檔案 重新git push origin master，成功","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://wualnz.com/tags/Git/"}]},{"title":"做個超 AI 的響應式圖片吧，利用 HTML5 srcset 搭配 Rails Helper img_set_tag","slug":"做個超智能的響應式圖片吧，利用-HTML5-srcset-搭配-Rails-Helper-img-set-tag","date":"2018-02-16T21:04:50.000Z","updated":"2021-12-22T03:26:58.459Z","comments":true,"path":"/做個超智能的響應式圖片吧，利用-HTML5-srcset-搭配-Rails-Helper-img-set-tag/","link":"","permalink":"http://wualnz.com/%E5%81%9A%E5%80%8B%E8%B6%85%E6%99%BA%E8%83%BD%E7%9A%84%E9%9F%BF%E6%87%89%E5%BC%8F%E5%9C%96%E7%89%87%E5%90%A7%EF%BC%8C%E5%88%A9%E7%94%A8-HTML5-srcset-%E6%90%AD%E9%85%8D-Rails-Helper-img-set-tag/","excerpt":"","text":"做 Responsive Web Design 時難免少不了對圖片的處理，圖片能彈性隨著螢幕裝置大小調整，有多種做法可以參考。今天來探討使用 HTML5 新增的屬性 srcset 來搭配使用 Rails 的 Helper 通常做響應式圖片有兩種作法 使用同一張圖片，依照容器、螢幕尺寸放大縮小 偵測不同的裝置，根據螢幕大小，使用不同大小的圖片 作法一作法一：重頭到尾都使用同一張圖片，可以跟著螢幕修改圖片的比例大小 響應式圖片 建議設定max-width: 100%確保圖片不會超過畫面的大小，父層的容器設多少大小，子層的圖片就會乖乖在他背後下貼著容器。1img &#123; max-width: 100%; height: auto&#125;缺點：圖片量若很大，載入頁面時間會加長，對於行動裝置上網的客群，可能會因為網站載圖片跑太慢，導致用戶不想等直接離開網站。 做法二做法二： 隨著裝置提供不同大小的圖檔 我有一張圖片、但是幾個不同大小的版本想要替換使用小螢幕裝置，就下載比較小的圖片，減少行動裝置上不必要的寬頻浪費大螢幕就下載比較大的圖片、解析度也較高、看得比較清楚 優點：可以根據圖片顯示的實際需要，給用戶端剛剛好的大小版本 需要注意的事項：查詢Can I Use 確認主流瀏覽器支援狀況 偵測不同裝置隨意換上圖片偵測不同裝置隨意換上圖片，有以下幾種做法 使用HTML5 &lt;img&gt; 的屬性 srcset缺點：需要到Can I Use 看各主流瀏覽器版本是否已支援 HTML5 &lt;picture&gt; 使用 srcset + picture 用 JavaScript 監聽 window.resize事件，修改圖片路徑 使用 svg 向量圖 使用第三方外掛，例如：picturefill來補足不支援picture的瀏覽器 狀況劇一狀況劇一：設計師提供給我手機版、桌機版裝置的兩種圖片，要怎麼切圖搭配srcset使用？ 先切圖 給 Mobile 小螢幕裝置的圖片切成 1x 給一般手機切成 2x 給 Retine 高畫質螢幕 給tablet, desktop 大螢幕裝置的圖片切成 1x, 2x, 3x 使用 srcset12345678910&lt;img srcset=&quot;360.jpg 360w,768.jpg 768w,1200.jpg 1200w,1920.jpg 1920w&quot;sizes=&quot;(max-width: 360px) 100vw,(max-width: 768px) 90vw,(max-width: 1980px) 80vw,768px&quot;src=&quot;360.jpg&quot; alt=&quot;範例&quot;&gt; srcset 非常的簡單，寫下你要放上的幾張圖片和他的寬度，瀏覽器就會自動去選擇srcset 分別跟瀏覽器先生說：「嗨，我這裡有360.jpg、768.jpg、1200.jpg、1920.jpg圖片」sizes 也和瀏覽器說：「不同裝置的寬度(media query)下，圖片的寬度也要幫我個別調整！」 1sizes=&quot;(max-width: 360px) 100vw&quot; 在320px的iphone4下瀏覽，圖片寬度自動也會被調整為 100vw。 Rails img secret, sizes Helper由於Rails內建的Helper沒有image srcset，於是我們要手動新增Helper12345// 新增在 application_helper.rbdef image_set_tag(source, srcset = &#123;&#125;, options = &#123;&#125;) srcset = srcset.map &#123; |src, size| &quot;#&#123;path_to_image(src)&#125; #&#123;size&#125;&quot; &#125;.join(&#x27;, &#x27;) image_tag(source, options.merge(srcset: srcset))end 新增完後便可以照著他的規則使用啦！剛剛切出來的五張圖片可以派上用場囉123456&lt;%= image_set_tag &#x27;How-we-work.png&#x27;, &#123; &#x27;How-we-work-Mobile.png&#x27; =&gt; &#x27;320w&#x27;, &#x27;How-we-work-Mobile@2x.png&#x27; =&gt; &#x27;640w&#x27;, &#x27;How-we-work-PC@2x.png&#x27; =&gt; &#x27;1024w&#x27;, &#x27;How-we-work-PC@3x.png&#x27; =&gt; &#x27;1980w&#x27;&#125;, alt: &#x27;如何運作&#x27;, class: &#x27;img-fluid mx-auto d-block&#x27; %&gt;瀏覽器吃掉上述程式碼後，它會通過 srcset 屬性自動選擇 Mobile 2x, PC 2x 等圖，比如說今天用 iPhone 6s，便會自動選擇 Mobile@2x 的圖。 default, image_set_tag &#39;How-we-work.png&#39; 這裏即指 default 若瀏覽器太舊看不懂 srcset，會讀取 src 的圖片網址來顯示。套上範例，瀏覽器不支援就會讀取How-we-work.png的圖檔 以下的 w 不是真的指 px ，而是裝置像素比，為了好理解先套上px 320w手機模式瀏覽 src自動轉換成 Mobile.png當偵測到瀏覽器為不大於 320px 寬時，顯示 Mobile.png 這張圖 640w平板模式瀏覽 src自動轉換成 Mobile@2x.png 1024w平板裝置瀏覽 寬度有1024，src自動轉換成 PC@2x.png 1980w桌機裝置瀏覽 寬度有1980，src自動轉換成 PC@3x.png w是什麼？W 是 設備像素比(DevicePixelRatio)，詳細可點擊查詢各裝置的裝置像素密度320w, 640w, 1024w, 1980w 這裡的w不是指px，而是「設備像素比」 也就是 window.devicePixelRatio 測試如何測試實驗圖片真的有跟著寬度做更換？建議測試時開啟Chrome無痕視窗，以避免瀏覽器快取後，不會自動切換圖片 打開Chrome 開發人員工具 指到 src 會發現瀏覽器視窗隨著調整，src指定的圖片路徑會變成設定的圖檔 像是我開到手機寬度時，src指定圖片路徑會變成Mobile.png，開到正常電腦大小寬度時，src的路徑則會變成PC@3x.png 大功告成！ Reference | 參考資料 為什麼低解析度的JPG會跟馬賽克一樣？ Using image_tag with srcset attribute? 响应式图片实战 Picasa 圖床的獨家應用：製作 RWD 自適應圖片，讓手機自動載入小圖，加快網頁讀取速度 RWD響應式網頁專案開發心得(一) 用 srcset 屬性做簡單的 Responsive Image 《Picturefill 自適應圖片》隨著裝置提供不同大小的圖檔(JS版) 查詢各裝置的裝置像素密度","categories":[],"tags":[{"name":"Rails 5","slug":"Rails-5","permalink":"http://wualnz.com/tags/Rails-5/"},{"name":"RWD","slug":"RWD","permalink":"http://wualnz.com/tags/RWD/"}]},{"title":"Rails 5 快速設置 favicon icon","slug":"Rails-5-快速設置-favicon-icon","date":"2018-02-09T21:13:37.000Z","updated":"2021-12-22T03:26:58.456Z","comments":true,"path":"/Rails-5-快速設置-favicon-icon/","link":"","permalink":"http://wualnz.com/Rails-5-%E5%BF%AB%E9%80%9F%E8%A8%AD%E7%BD%AE-favicon-icon/","excerpt":"","text":"現在的裝置上千幾種，Icon也針對各種裝置Andoroid、iOS各設置了不同大小尺寸的icon，如果在Rails內開發，可以參考以下的寫法。底下的Reference可以知道各個icon設置的用途適用於哪些裝置。 快速設置 Icon 步驟 在view/layouts下新增_favicon.html.erb的樣板 並在application.html.erb render _favicon.html.erb 找icon generator 自動產生針對各裝置的icon圖 Rails Generator MakeAppleIcon 將 icon圖放置 app/assets/image/icon 內 application.html.erb123456789&lt;head&gt; &lt;%= render &#x27;layouts/favicon&#x27; %&gt; &lt;link rel=&quot;manifest&quot; href=&quot; &lt;%= asset_path &#x27;ico/manifest.json&#x27; %&gt;&quot;&gt; &lt;meta name=&quot;msapplication-config&quot; content=&quot;&lt;%= asset_path &#x27;ico/browserconfig.xml&#x27; %&gt;&quot;&gt; &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;xxxx&quot;&gt; &lt;meta name=&quot;application-name&quot; content=&quot;xxxx&quot;&gt; &lt;meta name=&quot;msapplication-TileColor&quot; content=&quot;#2b5797&quot;&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#ffffff&quot;&gt;&lt;/head&gt; _favicon.html.erb 1234567891011121314151617181920&lt;% %w(57 60 72 76 114 120 144 152 180).each do |s| %&gt; &lt;%= favicon_link_tag &quot;ico/apple-icon-#&#123;s&#125;x#&#123;s&#125;.png&quot;, rel: &#x27;apple-touch-icon&#x27;, type: &#x27;image/png&#x27;, sizes: &quot;#&#123;s&#125;x#&#123;s&#125;&quot; %&gt;&lt;% end %&gt;&lt;% %w(36 48 72 96 144 192).each do |s| %&gt; &lt;%= favicon_link_tag &quot;ico/android-icon-#&#123;s&#125;x#&#123;s&#125;.png&quot;, rel: &#x27;android-chrome&#x27;, type: &#x27;image/png&#x27;, sizes: &quot;#&#123;s&#125;x#&#123;s&#125;&quot; %&gt;&lt;% end %&gt;&lt;% %w(70 144 150 310).each do |s| %&gt; &lt;%= favicon_link_tag &quot;ico/ms-icon-#&#123;s&#125;x#&#123;s&#125;.png&quot;, rel: &#x27;mstile&#x27;, type: &#x27;image/png&#x27;, sizes: &quot;#&#123;s&#125;x#&#123;s&#125;&quot; %&gt;&lt;% end %&gt;&lt;% %w(16 32 96).each do |s| %&gt; &lt;%= favicon_link_tag &quot;ico/favicon-#&#123;s&#125;x#&#123;s&#125;.png&quot;, rel: &#x27;x-icon&#x27;, type: &#x27;image/png&#x27;, sizes: &quot;#&#123;s&#125;x#&#123;s&#125;&quot; %&gt;&lt;% end %&gt;&lt;%= favicon_link_tag &#x27;ico/favicon.ico&#x27;, rel: &#x27;shortcut icon&#x27; %&gt;&lt;%= favicon_link_tag &#x27;ico/favicon.ico&#x27; , rel: &#x27;bookmark&#x27; %&gt;&lt;%= tag(:link, rel: &#x27;manifest&#x27;, href: (&#x27;ico/manifest.json&#x27;)) %&gt; Apple Touch Icons 120x120: iPhone Retina (iOS 7) 180x180: iPhone 6 Plus (iOS 8+) 152x152: iPad Retina (iOS 7) 167x167: iPad Pro (iOS 8+) 1234&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;older-iPhone.png&quot;&gt; // 120px &lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;180x180&quot; href=&quot;iPhone-6-Plus.png&quot;&gt; &lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;152x152&quot; href=&quot;iPad-Retina.png&quot;&gt; &lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;167x167&quot; href=&quot;iPad-Pro.png&quot;&gt; IE11 微軟動態磚取得 browserconfig.xml 檔案 1&lt;meta name=&quot;msapplication-config&quot; content=&quot;ieconfig.xml&quot; /&gt; Reference | 參考資料 建立自訂動態磚 - Microsoft.aspx) Favicon – 關於我的最愛圖示的二三事 Here’s Everything You Need to Know About Favicons in 2017 Favicon Generator for Ruby on Rails 自動生成","categories":[],"tags":[{"name":"Rails 5","slug":"Rails-5","permalink":"http://wualnz.com/tags/Rails-5/"},{"name":"Favicon Icon","slug":"Favicon-Icon","permalink":"http://wualnz.com/tags/Favicon-Icon/"}]},{"title":"Git 修改又臭又長的指令，加快開發速度","slug":"Git-修改又臭又長的指令，加快開發速度","date":"2018-02-08T21:16:04.000Z","updated":"2021-12-22T03:26:58.452Z","comments":true,"path":"/Git-修改又臭又長的指令，加快開發速度/","link":"","permalink":"http://wualnz.com/Git-%E4%BF%AE%E6%94%B9%E5%8F%88%E8%87%AD%E5%8F%88%E9%95%B7%E7%9A%84%E6%8C%87%E4%BB%A4%EF%BC%8C%E5%8A%A0%E5%BF%AB%E9%96%8B%E7%99%BC%E9%80%9F%E5%BA%A6/","excerpt":"","text":"有辦法縮短Github指令嗎？git status, git commit -m&#39;,git checkout develop/layout,git pull origin master..是不是常常覺得輸入這些指令很繁瑣又長，有甚麼辦法可以縮短這些指令呢？ 答案是有的！將Git常用的指令，縮短成好記又好用的縮寫吧！這四個指令比較好記，也較常用到，實用度很高！！ MAC 環境下打開 iTerm 輸入以下指令1234git config --global alias.co checkoutgit config --global alias.ci commitgit config --global alias.st statusgit config --global alias.br branch co = checkout ci = commit st = status br = branch 1234git co develop // 等同於 git checkout developgit ci -m &#x27;Initalize commit&#x27; // 等同於 git commit -m &#x27;Initalize commit&#x27;git st // 等同於 git statusgit br -b develop // 等同於 建立develop分支並切換過去 其他參考指令vim ~/.gitconfig 找到 alias 列表後可以根據自己需求輸入，如果想要客製化更改也可以的哦 alias gthis=&#39;git rev-parse --abbrev-ref HEAD&#39; alias gpushthis=&#39;git push origin gthis&#39; alias gpullthis=&#39;git pull origin gthis&#39; alias gup=&#39;git remote update&#39; alias gpl=&#39;git pull origin&#39; 客製化 Git 輸出顏色為了好好愛護眼睛，來客製化 Git 輸出的顏色吧! 先開啟git color ui顏色顯示指令。1git config --global color.ui true 開啟git color.ui指令後，Git 會按照你的需要，自動為大部分的輸出加上顏色。當然也能客製化的更改，可以明確地規定哪些需要指令需要塗上顏色、要設定什麼顏色 用 Vim 編輯器直接進入 gitconfig 來編輯vim ~/.gitconfig 找到 [alias]列表就可以開始進行客製化啦！ 我使用別人提供的 Pretty git branch 加上 [alias]上 1lg = log --graph --abbrev-commit --decorate --format=format:&#x27;%C(yellow)%h%C(reset)%C(auto)%d%C(reset) %C(normal)%s%C(reset) %C(dim white)%an%C(reset) %C(dim blue)(%ar)%C (reset)&#x27; --all 以後只要輸入 git lg就會有一個小型的分支圖+一行的commit訊息啦，非常方便！ Gitgraph.js也是一個js寫的library在瀏覽器顯示分支圖的樣式，有興趣者可以研究看看 bash-completion 自動補齊 Plugin MAC 環境 Bash安裝 bash-completion 工程師實在要記得太多數不清的指令了，當忘記指令的時候，多按幾下TAB便會幫你自動提示，超強大神器！ Mac 使用 Brew 安裝 bash-completion，在 commend上輸入以下指令即可安裝。brew install git bash-completion 若還沒有安裝 Brew 請往前走左轉到 Brew官方網站安裝，啊！對了只限定於 Mac 哦。 Reference 參考資料 Bash 自動補齊 on Mac OSX 10.11.1 前端資源系列- Git-常用命令&amp;快捷命令&amp;小工作流 Git-客製化-Git-設定 Pretty git branch graphs","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://wualnz.com/tags/Git/"}]},{"title":"Git 筆記：我想回到過去，到底要怎麼坐時光機？","slug":"Git-筆記：我想回到過去，到底要怎麼坐時光機？","date":"2018-02-05T21:32:47.000Z","updated":"2021-12-22T03:26:58.453Z","comments":true,"path":"/Git-筆記：我想回到過去，到底要怎麼坐時光機？/","link":"","permalink":"http://wualnz.com/Git-%E7%AD%86%E8%A8%98%EF%BC%9A%E6%88%91%E6%83%B3%E5%9B%9E%E5%88%B0%E9%81%8E%E5%8E%BB%EF%BC%8C%E5%88%B0%E5%BA%95%E8%A6%81%E6%80%8E%E9%BA%BC%E5%9D%90%E6%99%82%E5%85%89%E6%A9%9F%EF%BC%9F/","excerpt":"","text":"Git 筆記：我想回到過去，到底要怎麼坐時光機？基本觀念 目前的位置叫做HEAD 沒被 git add進入commit的檔案untracked files，Git會選擇忽略，也不用怕被坐時光機回溯影響，reset、checkout對他們的影響力是0。 origin/master是遠端的resp，master是本端的repo 我不想玩了不想存檔，我要回到上一次的存檔commit紀錄懶得看git log查代碼，想快速回到上一次的commit紀錄 123git checkout HEAD^HEAD^ 等同 HEAD^ 等同 HEAD~// 都代表一次的意思 改壞掉了QQ，我想捨棄所有還沒commit的修改招喚reset!1git reset --hard 改壞很久才後知後覺，commit存檔之後後悔了，有後悔藥嗎？ 退回任意的commit位置 和checkout一樣，可以隨意亂跳 1234git reset --hard HEAD^^git reset --hard 5efdc4fgit reset --hard master~2執行結果都一樣，從 HEAD 跳回兩個前 commit 開分支寫一寫，然後和master合併 12345git checkout -b feature/fixbug// 開始寫寫寫寫寫// 準備合併！git checkout mastergit merge feature/fixbug 預設的遠端名字習慣都叫 origin 1git remote add origin http://github/..... 推上遠端的 master / 分支 12git push origin mastergit push origin feature/fixbug 拉回來 遠端的 master / 分支 12git pull origin mastergit pull origin feature/fixbug 多人協作開發，Git不打架？解決衝突先 Clone 克隆再說 git clone http://github... 某A 開發寫寫寫寫寫，某B也在寫寫寫 某A push 上去了 某B 也準備push上去被拒絕!!!發生衝突pull = fetch &amp; merge某B 要先 git pull，同步某A版本才行 狀況一狀況一：git pull 順利成功 git pull git push origin master 狀況二狀況二：git pull 自動 merge失敗：Merge conflict in xxx.html 打開xxx.html，編輯你要留的部分 git add xxx.html，加入索引 git commit -m &#39;merge ...&#39; 臨時狀況常遇到臨時狀況，需要放下手上的東西，支援其他人 狀況一：寫到一半，臨時被叫去修BUG，要切換branch怎麼辦？ 狀況二： 想切換 branch、坐時光機回到commit歷史紀錄，但手上才寫到一半，我也不想commit git add . git commit -m &#39;Not finish yet ORZ &quot;&#39; 可是，難道只能先commit嗎？可是還沒完整寫完啊，我不想commit，git log 會變很亂！ 雜事放一旁，先救火再說！git stash就像是把手邊還沒整理好的東西，先全部放在一個箱子裡，等有空時再去箱子拿回來繼續處理。 git stash save &quot;RWDmobile&quot;把手邊的資料全部放進RWDmobile的箱子裡 git stash pop &quot;名字&quot;終於忙完了，回來繼續整理，取回RWDmobile的箱子，並把箱子丟掉。 git stash drop把箱子和裡面的資料，都一起丟掉。 git stash apply 名字和pop一樣，取回箱子的資料，但不把箱子丟掉。 git stash list查詢我有幾個暫存的箱子 我commit了，但我想修改commit的訊息 只能修改 HEAD 上的 commit(目前git 最後一個commit的位置) ammend是修改的意思。1git commit --amend Git 竄改 Commit 紀錄想竄改紀錄？請找專家認證的「Git rebase -i」 使用情境 我想修改 commit 的順序 我想整理 branch 上的commit 我想先把某個 branch 上的 commit 先 merge 回 master 我想合併 commit，避免太過瑣碎的 commitGit rebase 能做的事 重新 commit ( Pick) 更換 commit 順序 修改 commit 順序 (Edit) 拆解 commit (把多個commit紀錄變成一個commit) 壓縮 commit，合併 commit 訊息 (Squash) 刪除 commit (Skip) squash把現在的 commit 和 上一個 commit 合併fixup也是合併 上一個 commit ，但不會保存 commit 的訊息 把多個 commit 紀錄合併成一個 方法一 git stash暫存把目前修改的資料通通先封裝進 stash 箱子 git reset 2q542f坐時光機回到過去，回到 2q542f 版本 git stash pop把箱子裡的資料重新拿出來，所以現在是 2q542f 版本 +上剛剛從 stash箱子拿出來的資料 重新 commit !git addgit commit -m &#39;Message&#39; 方法二 git rebase -i de534f 用 squash merge 3 commits into 1 comit Rebase完後悔已經 rebase 竄改完紀錄，但一時眼花看錯，需要還原，對我就是後悔了，該怎麼辦？ git reflog輸入git reflog後會出現像git log --oneline 頁面git reset --hard HEAD@&#123;3&#125;根據上面的流水編號或bceefbc值，選你想要回復的位置 將追蹤的某個檔案回復成上一次 commit 狀態git checkout -- user.html.erb 所有已加入git addtrack中，修改過的檔案，復原成最近一次commit 狀態git checkout . 從某個 commit 切回原本 branchgit checkout - 將 某branch 裡的 某個 commit 的變動 merge 到另一條 branchEX: develop 想 merge feature的 #bceefbc commit進來git cherry-pick Git 協作流程開發新功能或跟別人協作git時 新建一個獨立的分支 提交分支的 commit 要時常跟上遠端的腳步，與遠端Responsitory 同步commit前，pull！push前，也pull！pull！pull！pull！pull！(壞掉了嗎？)git pull --rebase12341. git pull2. git commit3. git pull4. git push 合併 commit1234git fetch origingit rebase origin/master或是git pull origin master --rebase Merge 後的訊息好多餘，有辦法簡略嗎？branch 要 merge origin/master，都會有個 merge commit ‘Merge branch ‘master’’ ，太多餘了！ 這種多餘節點很阿雜，能不能不看到？ 輸入git pull --rebase 就會使 merge 每次的 commit 不見 輸入的前提：使用–rebase是在沒有 conflict 的情況下才使用 真不湊巧，使用 –rebase 結果 conflict 了git rebase --abort 回復 pull 前的狀態git merge origin master 不過就會有多餘的merge message出現 git pull --rebase它等於以下兩步git fetchgit merge origin git pull --rebase 是什麼意思？ 把 commit 但還沒 push 上去的東西暫存丟到旁邊去 現在的 commit 非常乾淨，Git表示：沒有東西要push上去 從遠端 repo 把新的東西 pull 下來，跟上進度。此時你本地端是沒有任何要 push 的 commit，所以也不會有因為有東西還沒 push 所以無法 pull 的情況 再把那些待 push 的 commit 更動過的檔案 回復回來 有 commit 還沒 push -&gt; 想要 pull 同步 遠端repo變成 輸入 git pull --rebase 指令後把 還沒 push 的 commit 存起來，本地端沒東西 push -&gt; 先 pull同步 -&gt; 接著變成同步遠端了，目前還有 commit 還沒 push Reference | 參考資料 Git Merge &amp; Fast-forward Git 常用指令 使用 git rebase 避免無謂的 merge 史上最簡單易懂的Git教學：Git 實務圖解","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://wualnz.com/tags/Git/"}]},{"title":"前端工程師一定要會的：Sass Mixin神器","slug":"前端工程師一定要會的：Sass-Mixin神器","date":"2018-01-28T21:29:19.000Z","updated":"2021-12-22T03:26:58.459Z","comments":true,"path":"/前端工程師一定要會的：Sass-Mixin神器/","link":"","permalink":"http://wualnz.com/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9C%83%E7%9A%84%EF%BC%9ASass-Mixin%E7%A5%9E%E5%99%A8/","excerpt":"","text":"Sass Mixin 神器，學會 Mixin 可以讓你在開發上的速度加快許多，快來看看如何使用吧 Sass Mixin 主要功能Sass Mixin 主要功能：省去重複撰寫相同 CSS 的時間 降低Pseudo(偽)元素撰寫時的重複性 重用群組的 CSS，像是prefix，用@include加入群組 透過@include使用參數 示範SASS運用情境一 當你在開發時設計.introduce Class時，結果設計師跟你說：這個背景顏色好醜，我們需要改顏色、整體網站都要更改一下，天啊真是晴天霹靂！這樣改要整個大修耶，別怕別怕！還有Mixin來幫你大幅節省時間！ 123456$font-size: 14px@mixin bg background: #000 font-size: $font-size.header +bg SASS轉譯成CSS後，原始碼會變這樣 1234.header &#123; background: #000; font-size: 14px;&#125; 是不是快多了呢！！！寫法：@mixin 命名名稱，需要載入的話就是用「+」來載入mixin名稱 情境二 設計師說：背景顏色要隨著網站活動變更，整體網站顏色可能會每隔三四個月都要改一次，你會傻傻的一個一個找header改嗎？當然不！拿起我們的秘密武器Mixin吧在Mixin裡建立變數 1234567891011$font-size: 13px$linkcolor: #d6b161$textcolor: #eee// 在Mixin裡建立變數，並帶入@mixin bg($bgcolor) background: $bgcolor font-size: $font-size.header +bg($linkcolor).content +bg($textcolor) SASS轉譯成CSS後，原始碼會變這樣 12345678.header &#123; background: #d6b161; font-size: 13px;&#125;.content &#123; background: white; font-size: 13px;&#125; 這樣我們可以直接在帶入變數，隨時更改顏色！超方便！ 情境三設計師：「我們再來大改吧！包含RWD也要一起動哦」前端工程師：「天啊！我今晚又無法準時下班啦」 關於Responsive Web DesignRWD的@media 動則就是寫上千行，想辦法從min 768px裡找出要改的樣式，是件非常超級麻煩的事，一樣來用Mixin來大量減輕負擔吧 傳統寫法 123456789101112131415161718192021222324@media all and (min-width: 980px) &#123; .box1 &#123; margin: 50px; &#125; .box2 &#123; margin: 30px; &#125;&#125;@media all and (max-width: 768px) &#123; .box1 &#123; margin: 20px; &#125; .box2 &#123; margin: 15px; &#125;&#125;@media all and (min-width: 996px) and (max-width: 1200px) &#123; .box1 &#123; margin: 100px; &#125; .box2 &#123; margin: 75px; &#125;&#125; 是的，我以前就是這樣寫，當我要找桌機版的.box1去修改時 要先找到@media min-width:996px and max-width: 1200px 再從裡面找到class box1 你會找老半天，有可能還會看錯改到平板模式的樣式整體非常沒有效率也很耗時，你還會很傷眼力。有個辦法：把三個@media查詢樣式時整合寫在一起，既好寫又好找！ 1234567891011.box1 &#123; @media all and (min-width: 980px) &#123; margin: 50px &#125; @media all and (max-width: 768px) &#123; margin: 20px; &#125; @media all and (min-width: 996px) and (max-width: 1200px) &#123; margin: 100px; &#125;&#125; 運用Mixin和變數幫助你減輕眼力負擔 先針對media設變數，設定各裝置的寬度width $pc-width: 996px; $pad-width: 768pz; 新增一位叫「pc-width」的mixin，把@media公式代進去，會變更的值填入變數$pc-width 在.box1裡用@include來呼叫Mixin：pc-width1234567891011121314151617181920212223$pc-width: 996px;$pad-width: 768px;$pcs-width: 995px;@mixin pc-width()&#123; @media all and (min-width: $pc-width) &#123; @content; &#125;&#125;@mixin pad-width()&#123; @media all and (min-width: $pad-width) and (max-width: $pcs-width) &#123; @content; &#125;&#125;// 代入後長這樣.box1 &#123; @include pc-width &#123; margin: 20px; &#125; @include pad-width &#123; margin: 15px; &#125;&#125; 程式碼呢就會長這樣 12345678.box1 &#123; @media all and (min-width: 996px) &#123; margin: 20px; &#125; @media all and (min-width: 768px) and (max-width: 995px) &#123; margin: 15px; &#125;&#125; 是不是少掉很多的程式碼！！！ 顏色想要深一點？懶得挑色碼？這也沒問題 用darken(顏色, 深度) 1234$link: #d6b161;.box1 &#123; background: darken($link, 15%)&#125; Reference 使用sass mixin來開發responsive網站","categories":[],"tags":[{"name":"Front-end","slug":"Front-end","permalink":"http://wualnz.com/tags/Front-end/"},{"name":"Sass","slug":"Sass","permalink":"http://wualnz.com/tags/Sass/"},{"name":"Mixin","slug":"Mixin","permalink":"http://wualnz.com/tags/Mixin/"}]},{"title":"VS Code 使用erb類型檔案時，Emmet快捷打html標籤跳不出來","slug":"VS-Code-使用erb類型檔案時，Emmet快捷打html標籤跳不出來","date":"2018-01-04T21:25:17.000Z","updated":"2021-12-22T03:26:58.457Z","comments":true,"path":"/VS-Code-使用erb類型檔案時，Emmet快捷打html標籤跳不出來/","link":"","permalink":"http://wualnz.com/VS-Code-%E4%BD%BF%E7%94%A8erb%E9%A1%9E%E5%9E%8B%E6%AA%94%E6%A1%88%E6%99%82%EF%BC%8CEmmet%E5%BF%AB%E6%8D%B7%E6%89%93html%E6%A8%99%E7%B1%A4%E8%B7%B3%E4%B8%8D%E5%87%BA%E4%BE%86/","excerpt":"","text":"問題：使用VS code erb 無法自動跳出Emmet從Sublime跳到使用VS Code，已很習慣用Emmet來跳html標籤，但在用RoR(Ruby on Rail)時，像是index.html.erb這類的檔案，打.container TAB鍵應該會自動跳出&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;，卻毫無反應。 加入一行設定輕鬆解決在VS Code Setting裡加上這一行就可以搞定1&quot;emmet.includeLanguages&quot;: &#123;&quot;erb&quot;: &quot;html&quot;&#125; Reference | 參考資料 Emmet isn’t recognised in erb","categories":[],"tags":[{"name":"Rails 5","slug":"Rails-5","permalink":"http://wualnz.com/tags/Rails-5/"},{"name":"VS Code","slug":"VS-Code","permalink":"http://wualnz.com/tags/VS-Code/"},{"name":"Emmet","slug":"Emmet","permalink":"http://wualnz.com/tags/Emmet/"}]},{"title":"Rails 用 CarrierWave 大量產生假圖片 ( Remote image )","slug":"Rails-用-CarrierWave-大量產生假圖片-Remote-image","date":"2017-12-29T21:46:47.000Z","updated":"2021-12-22T03:26:58.456Z","comments":true,"path":"/Rails-用-CarrierWave-大量產生假圖片-Remote-image/","link":"","permalink":"http://wualnz.com/Rails-%E7%94%A8-CarrierWave-%E5%A4%A7%E9%87%8F%E7%94%A2%E7%94%9F%E5%81%87%E5%9C%96%E7%89%87-Remote-image/","excerpt":"","text":"我們常需要一些假資料來撐開版型、驗證，但一筆一筆新增很麻煩，所以會用到rake自訂任務請Rails一次幫忙產生500筆資料，但上傳圖片的image欄位是藉由Gem CarrierWave產生，所以需要用它提供的helper: remote-image_url Strong Parameter 新增 CarrierWave 原生的help: remote_image_url1234#restaurant_controller def restaurant_params params.require(:restaurant).permit(:name, :tel, :opening_hours, :address, :description, :image, :remote_image_url) end 自動建立 500 筆資料新增 Rake 任務 dev.rake，自動建立 500 筆餐廳資料在Restaurant下使用remote_image_url，在後面加上遠端網址即可。 12Restaurant.destroy_allRestaurant.create!(name: &#x27;Andromeda&#x27;, remote_photo_url: &#x27;https://visualhunt.com/photos/l/7/architecture-store-building.jpg&#x27;) 整體檔案會像是這樣，另外用FFaker Gem來產生像電話地址的假資料123456789101112131415161718namespace :dev do task fake: :environment do Restaurant.destroy_all 500.times do |i| Restaurant.create!(name: FFaker::Name.first_name, opening_hours: FFaker::Time.datetime, tel: FFaker::PhoneNumber.short_phone_number, address: FFaker::Address.street_address, description: FFaker::Lorem.paragraph, category: Category.all.sample, remote_image_url: &#x27;https://visualhunt.com/photos/l/7/architecture-store-building.jpg&#x27; ) end puts &quot;餐廳資料成功建立&quot; puts &quot;You have #&#123;Restaurant.count&#125; restaurants data&quot; endend 用亂數隨機讀取圖片但是只有一張照片好像很單調，那就改成本端檔案吧將圖片放到public底下的目錄，檔案命名為0.jpg~20.jpg以亂數來隨機存取圖片12# dev.rakeimage: File.open(Rails.root.join(&quot;public/seed-img/0#&#123;rand(1..9)&#125;.jpg&quot;)) Reference How to: Upload remote image urls to your seedfile CarrierWave 图片上传和图片特殊处理","categories":[],"tags":[{"name":"Rails 5","slug":"Rails-5","permalink":"http://wualnz.com/tags/Rails-5/"},{"name":"CarrierWave","slug":"CarrierWave","permalink":"http://wualnz.com/tags/CarrierWave/"}]},{"title":"JavaScript 30 Day -  Day1 DrumKits 練習","slug":"JavaScript-30-Day-Day1-DrumKits-練習","date":"2017-12-28T22:29:24.000Z","updated":"2021-12-22T03:26:58.454Z","comments":true,"path":"/JavaScript-30-Day-Day1-DrumKits-練習/","link":"","permalink":"http://wualnz.com/JavaScript-30-Day-Day1-DrumKits-%E7%B7%B4%E7%BF%92/","excerpt":"","text":"JavaScript 30 Day - Day1 DrumKits 主題：用鍵盤按鍵，模擬打出爵士鼓的音效 DEMO Github 流程1. 利用鍵盤監聽USER鍵盤，知道使用者按了哪個按鍵window.addEventListerer(&#39;keydown&#39;, playSound); 2. 設定 function playSound(e) 將函數e傳入進去，利用e.keyCode取得對應的audio音檔、div data-key標籤。 如果傳入的e.keyCode沒有對應的audio，便中斷function。 設定audio音檔無延遲，播放時間為0。currentTime = 0; 播放對應的音檔。 利用classList.add(&#39;playing&#39;)將div.key加入playing的class。classList.add(&#39;class&#39;) 等同於 jQuery 的 addClass(&#39;class&#39;)。 3. 將所有div.key組合成陣列，監聽：當播放完音效後，會停止transform的特效。 利用querySelectorAll(&#39;.key&#39;)組合起來存在變數keys裡面，querySelectorAll組合的div.key是一個陣列組合。 利用forEach的JavaScript語法，將keys陣列取出每個div.key，並設定監聽：若transitionend發生了，執行removeTransition的function。 4. 設定removeTransition 的 function，當發生transform效果時則中斷。 將函數e傳入，倘若e.propertyName != transform時則中斷。 同時也移除playing的class，利用classList.remove(&#39;class&#39;)，等同於 jQuery 的 removeClass(&#39;class&#39;)。 HTML架構123456&lt;div class=&quot;keys&quot;&gt; &lt;div data-key=&quot;65&quot; class=&quot;key&quot;&gt; &lt;kbd&gt;A&lt;/kbd&gt; &lt;span class=&quot;sound&quot;&gt;Clap&lt;/span&gt;&lt;/div&gt;&lt;/div&gt; 1&lt;audio data-key=&quot;65&quot; src=&quot;sounds/hihat.wav&quot;&gt;&lt;/audio&gt; JavaScript部分設定對應的audio音檔利用document.querySelector來選擇audio[data-key]，因為keyCode有九種按鈕的設置，將keyCode設為變數，由e傳入找出屬性為.keyCode Audio 音檔無延遲、播放HTML5的 audio新標籤，IE 8 及以下版本都不支援&lt;audio src=&quot;路徑/clap.mp3&quot;&gt;&lt;audio&gt; 透過JavaScript控制播放音樂audio.play()可以播放音檔audio.currentTime()指定播放的秒數利用設定currentTime = 0，達到無延遲效果。 用forEach 代替 for 迴圈第一次使用到JS的forEach，以往都是用for迴圈去跑每個元素，也意外發現forEach比起for迴圈還要整潔、快速！前提是：不打算更改陣列裡的每個元素，就可以使用forEach。1234var arr = [ data1, data2, data3];for ( var i = 0; i &lt; arr.length; i++)&#123; console.log(arr[i]);&#125;使用forEach是相同的效果，寫法也讓程式碼更加簡短了1234var arr = [ data1, data2, data3];arr.forEach((val) =&gt; &#123; console.log(arr[i]);&#125;) Arrow Function 箭頭函式他是ES6版本的函式簡寫() =&gt; &#123;&#125;等同於 function() &#123;&#125;，但還是有一些區別。 Reference MDN web docs - Arrow Function 在 JavaScript 棄用 For 迴圈，擁抱 Reduce、ForEach、Filter、Map 箭頭函式","categories":[],"tags":[]},{"title":"Rails 用 Bootstrap 快速客製化 alert & notice flash message快閃訊息","slug":"Rails-用-Bootstrap-快速客製化-alert-notice-flash-message快閃訊息","date":"2017-12-28T21:49:06.000Z","updated":"2021-12-22T03:26:58.456Z","comments":true,"path":"/Rails-用-Bootstrap-快速客製化-alert-notice-flash-message快閃訊息/","link":"","permalink":"http://wualnz.com/Rails-%E7%94%A8-Bootstrap-%E5%BF%AB%E9%80%9F%E5%AE%A2%E8%A3%BD%E5%8C%96-alert-notice-flash-message%E5%BF%AB%E9%96%83%E8%A8%8A%E6%81%AF/","excerpt":"","text":"一般來說，需要使用會員系統會用Gem來安裝Device的套件，但可苦惱了，內建的flash message都會卡在上面，即使套上bootstrap的客製化，加上alert-info等的class，它仍會卡在頁面最上端，有一條長長橫橫的而且很醜，不會自動消失，這時候該怎麼辦呢？ 123# 上述範例圖片的程式碼&lt;% alert %&gt;&lt;% notice %&gt; 很簡單，我們多設一個條件式：如果alert或notice的flash訊息提醒出現，則幫我套上bootstrap的樣式。bootstrap有幫我們客製化一個樣式，可以點擊Ｘ來關閉flash message，必須在button的屬性標籤裡確保有data-dismiss=“alert&quot;才可以正常運作。 123&lt;% if alert %&gt; 程式碼&lt;% end %&gt; 程式碼範例： 1234567891011121314&lt;% if alert %&gt; &lt;div class=&quot;alert alert-warning alert-dismissible&quot; role=&quot;alert&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-label=&quot;Close&quot;&gt; &lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;&lt;/button&gt; &lt;strong&gt;Warning!&lt;/strong&gt;&lt;%= alert %&gt; &lt;/div&gt; &lt;% end %&gt; &lt;% if notice %&gt; &lt;div class=&quot;alert alert-info&quot; role=&quot;alert&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot; aria-label=&quot;Close&quot;&gt; &lt;span aria-hidden=&quot;true&quot;&gt;×&lt;/span&gt;&lt;/button&gt; &lt;%= notice %&gt; &lt;/div&gt; &lt;% end %&gt; Rails 安裝 Bootstrap等等？可是我不知道Rails怎麼安裝 Bootstrap請看此篇文章：「教你在Rails 快速安裝 Bootstrap，快速打造有質感的頁面」（仍還在寫中XD） 完成圖套上Bootstrap button, CSS樣式效果後，變得更方便，也不會卡住一條在頁面最上端，同時覺得礙眼的話還可以直接點擊X關掉flash message！ Reference Bootstrap Alert Message 官方文件 Bootstrap components added for alerts and notices","categories":[],"tags":[]},{"title":"Iframe modal關閉後，內嵌影片音效沒有停止","slug":"Iframe-modal關閉後，內嵌影片音效沒有停止","date":"2017-12-24T22:25:40.000Z","updated":"2021-12-22T03:26:58.453Z","comments":true,"path":"/Iframe-modal關閉後，內嵌影片音效沒有停止/","link":"","permalink":"http://wualnz.com/Iframe-modal%E9%97%9C%E9%96%89%E5%BE%8C%EF%BC%8C%E5%85%A7%E5%B5%8C%E5%BD%B1%E7%89%87%E9%9F%B3%E6%95%88%E6%B2%92%E6%9C%89%E5%81%9C%E6%AD%A2/","excerpt":"","text":"情境介紹 Iframe modal關閉後，內嵌影片音效沒有停止內套 Bootstrap 的 modal JS特效，燈箱內容放 iframe 內崁 Youtube，但發現關閉按鈕後，影片聲音仍繼續，畫面關閉了還是有聲音。 移除包含iframe節點我試著用 Jquery 解決，移除整個包含iframe的節點 123$(‘.close-modal’).on(‘click’,function()&#123; $(‘.modal-body’).remove();&#125;); 哈哈，是停止了沒錯，但好笑的是，如果user想重新開啟這個modal box就會穿幫，阿幹？阿影片勒怎麼不見了？這影片是用一次就消失喔？？？ 示意圖如下 detach()：可以移除元素，但完整保留事件 123$(‘.close-modal’).on(‘click’,function()&#123; $(‘iframe).detach();&#125;) 但一樣重新開啟頁面須要另寫jQ重新加回去。 有個更更更更更簡短的寫法，原理是抓到DOM元素後，將src重新再放入網址！就自動停了 這樣即使關掉頁面重開，也可以很完整呈現，也不用移除後還要再重新加入iframe 1234$(‘.close-modal’).on(‘click’,function()&#123; $(‘iframe’).attr(‘src’, $(‘iframe’).attr(‘src’));&#125;); 夠簡短吧，囧！學到一課了 用attr設定src的屬性，取得src網址後再重新加載一次！1234$(‘.close-modal,button’).on(‘click’,function()&#123; $(‘iframe’,).attr(‘src’, $(‘iframe’).attr(‘src’));&#125;); 同時選取兩組元素做click動作，只需要一個引號，中間用逗號隔開即可 20171225更新需要指定iframe取得的src連結，否則都會是拿到第一個modal的網址。所以需要補宣告一個變數指定為當前開啟的iframe。 狀態改成為當bootstrap的modal是隱藏狀態時（意味著：被使用者關閉了），將目前的iframe的網址拿掉，變空白。接著再將原有的影片網址重新塞回iframe的src屬性裡。 如何取得iframe的src網址？使用attr(‘src’) 1234567$(&#x27;.modal&#x27;).on(&#x27;hidden.bs.modal&#x27;, function()&#123; var $iframe = $(this).find(&#x27;iframe&#x27;); var videoSrc = $iframe.attr(&#x27;src&#x27;); console.log(videoSrc); $iframe.attr(&#x27;src&#x27;, &#x27;&#x27;); $iframe.attr(&#x27;src&#x27;, videoSrc); &#125;); 嘿嘿完成圖！打開縮圖可以得到一個modal燈箱，點擊兩個按鈕都可以做到關閉的效果，真開心！超有成就感。","categories":[],"tags":[]},{"title":"架Wordpress在本機，更改固定網址後掛了","slug":"架Wordpress在本機，更改固定網址後掛了","date":"2017-11-13T22:20:00.000Z","updated":"2021-12-22T03:26:58.461Z","comments":true,"path":"/架Wordpress在本機，更改固定網址後掛了/","link":"","permalink":"http://wualnz.com/%E6%9E%B6Wordpress%E5%9C%A8%E6%9C%AC%E6%A9%9F%EF%BC%8C%E6%9B%B4%E6%94%B9%E5%9B%BA%E5%AE%9A%E7%B6%B2%E5%9D%80%E5%BE%8C%E6%8E%9B%E4%BA%86/","excerpt":"架Wordpress在本機，更改固定網址後掛了問題改完固定網址後就RIP了，天啊Godddd 嗯，在本機上剛成功架完wordpress後很開心的亂試一些功能，忘記應該要開啟git時光機才對。事情是這樣的：我改了固定網址變成： 文章名稱，結果就是點任何後台的連結都變成下載php的檔案…..download資料夾快爆了","text":"架Wordpress在本機，更改固定網址後掛了問題改完固定網址後就RIP了，天啊Godddd 嗯，在本機上剛成功架完wordpress後很開心的亂試一些功能，忘記應該要開啟git時光機才對。事情是這樣的：我改了固定網址變成： 文章名稱，結果就是點任何後台的連結都變成下載php的檔案…..download資料夾快爆了 解決辦法：開啟.htaccess檔，找到這兩行刪掉！AddHandler php56-cgi .phpAddHandler application/x-httpd-php70s .php刪掉它，然後重新整理，會發現你的後台復活了。 記得，一定一定要記得git init才有保障啊，不然又要除錯到天亮了（？） Reference | 參考資料 PHP files are downloaded by browser instead of processed by local dev server (MAMP)","categories":[],"tags":[{"name":"Wordpress","slug":"Wordpress","permalink":"http://wualnz.com/tags/Wordpress/"}]},{"title":"warning: LF will be replaced by CRLF in files？這什麼東西啦！","slug":"warning-LF-will-be-replaced-by-CRLF-in-files？這什麼東西啦！","date":"2017-11-13T22:13:59.000Z","updated":"2021-12-22T03:26:58.459Z","comments":true,"path":"/warning-LF-will-be-replaced-by-CRLF-in-files？這什麼東西啦！/","link":"","permalink":"http://wualnz.com/warning-LF-will-be-replaced-by-CRLF-in-files%EF%BC%9F%E9%80%99%E4%BB%80%E9%BA%BC%E6%9D%B1%E8%A5%BF%E5%95%A6%EF%BC%81/","excerpt":"","text":"有沒有遇過git add加入索引時，突然跳出這樣的訊息？ warning: LF will be replaced by CRLF in files. 我遇到的情境是這樣的，咳：在Wordpress進入git init版本控制後，出現一大堆奇怪的字樣，如果說是線上遊戲的公頻，它整個就是把我的iTerm2徹底大洗版啊啊啊！！！！一直廣播是怎樣 12345678910warning: LF will be replaced by CRLF in files.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in files.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in files.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in files.The file will have its original line endings in your working directory.warning: LF will be replaced by CRLF in files.The file will have its original line endings in your working directory. 做了一些功課才知道 什麼是LF？它是ASCII 10電腦編碼系統，換行符號：\\n簡單無腦的來說LF = \\n 什麼是CRLF？ASCII 13的電腦編碼系統，他和LF比較不一樣的是多了\\r沒錯，它就是用\\r\\n進行換行的， 既然\\n就能換行，何必多浪費兩個字元\\n\\r來換行？節省空間嘛！Git很聰明的想要節省空間，紀錄檔案時對於換行都是採\\n的方式所以釋出這訊息是為了要讓工程屍知道一下（？）善意的提醒。 原本檔案是CRLF，Git轉換成LF，那會有什麼影響嗎？在unix系統上，若從git上拿到檔案，程式碼就永遠是LF格式了，再也回不去CRLF了。 關閉警告指令若是覺得沒有關係，想關閉這個警告訊息輸入下列指令就好了。git config core.autocrlf true Reference | 參考資料 LF will be replaced by CRLF in git - What is that and is it important? Git 在 Windows 進行 add 出現警告「warning: LF will be replaced by CRLF","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://wualnz.com/tags/Git/"}]},{"title":"git revert到commit某一版本，Gemfile不會跟著還原，–without development的緣故。","slug":"git-revert到commit某一版本，Gemfile不會跟著還原，–without-development的緣故。","date":"2017-11-10T22:15:41.000Z","updated":"2021-12-22T03:26:58.458Z","comments":true,"path":"/git-revert到commit某一版本，Gemfile不會跟著還原，–without-development的緣故。/","link":"","permalink":"http://wualnz.com/git-revert%E5%88%B0commit%E6%9F%90%E4%B8%80%E7%89%88%E6%9C%AC%EF%BC%8CGemfile%E4%B8%8D%E6%9C%83%E8%B7%9F%E8%91%97%E9%82%84%E5%8E%9F%EF%BC%8C%E2%80%93without-development%E7%9A%84%E7%B7%A3%E6%95%85%E3%80%82/","excerpt":"bundle install -with development 使用注意事項 某次經驗談：準備將Rails的專案部署Deploy到遠端VPS Server，改檔案改到爛掉於是只好gir revert 還原到上上上上上次的版本，結果囧了發現Gemfile,database.yml不會跟著還原，原本資料庫設定是pg，因要更改production環境時的資料庫變成Mysql2","text":"bundle install -with development 使用注意事項 某次經驗談：準備將Rails的專案部署Deploy到遠端VPS Server，改檔案改到爛掉於是只好gir revert 還原到上上上上上次的版本，結果囧了發現Gemfile,database.yml不會跟著還原，原本資料庫設定是pg，因要更改production環境時的資料庫變成Mysql2 git revert 還原到上上上次版本 使用情境 deploy到 Linode，發現掉進無底洞，全部都壞光光 production的資料庫預設pg，要更改成Mysql2 修bug修到不知道更改了哪些內容 還原後發現重run bundle install後無法安裝該有的東西 發現是因為曾經下過的指令 bundle install –without development 突然想起曾經有下過指令是bundle install --without development它非常聰明把你紀錄下來，以後執行bundle install的時候都會附加上–without development 下過指令後，要如何取消？下過bundle install –without development指令後，要如何取消？ 可以開啟.bundle/config就知道了，電腦很聰明的把設定寫在裡面，所以要刪除這個設定就是把它刪掉，刪掉後重新執行bundle install就不會限制任何環境了。 或是執行bundle install –without development 奇怪？為什麼我 git revert 某版本回去了輸入rails s 在本機上跑都失敗？跑出ERROR說我sqlite3的gem沒有安裝成功，請重新安裝載入無數次的bundle install都一樣，現在終於知道了 先前輸入過指令 bundle install –without development 導致無法完整安裝gem，因為gem的sqlite3寫在development 又因為git revert到很前面的版本，導致git push的時候會出現錯誤訊息Updates were rejected because the tip of your current branch is behind 良心建議git pull然後一個一個慢慢解決衝突版本不過這專案只有我一人在做，在那邊pull真的是會拉到死又浪費時間，只好使出大絕招 git push -u origin master -f 強制push上去蓋掉前面的紀錄，不過會導致遠端的git res會有些變動遺失就是，要用請謹慎小心。","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://wualnz.com/tags/Git/"},{"name":"Rails 5","slug":"Rails-5","permalink":"http://wualnz.com/tags/Rails-5/"}]},{"title":"Rails 5使用 Facebook 分享按鈕API，第一次無法正常載入頁面，解決辦法","slug":"Rails5使用-Facebook-分享按鈕API，第一次無法正常載入頁面，解決辦法","date":"2017-11-07T22:18:55.000Z","updated":"2021-12-22T03:26:58.457Z","comments":true,"path":"/Rails5使用-Facebook-分享按鈕API，第一次無法正常載入頁面，解決辦法/","link":"","permalink":"http://wualnz.com/Rails5%E4%BD%BF%E7%94%A8-Facebook-%E5%88%86%E4%BA%AB%E6%8C%89%E9%88%95API%EF%BC%8C%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%84%A1%E6%B3%95%E6%AD%A3%E5%B8%B8%E8%BC%89%E5%85%A5%E9%A0%81%E9%9D%A2%EF%BC%8C%E8%A7%A3%E6%B1%BA%E8%BE%A6%E6%B3%95/","excerpt":"","text":"Rails 5 使用 Facebook 分享按鈕 API ，第一次無法正常載入頁面，解決辦法在進行一個案子時遇到的困難：引用臉書的分享按鈕 API，第一次載入頁面時不會出現，第二次載入頁面後才會出現，甚至要等候很久才能出現。 問題分析 推測出有可能是turbolinks造成的問題，但jquery已有寫當.on(turbolink:load)了，後來從Stackflow找到解答 請將下方程式碼複製貼上，就即可解決問題了！ 1234567891011121314151617181920212223242526272829303132333435363738&lt;script&gt; $(document).on(&quot;turbolinks:load&quot;, function()&#123; (function(d, s, id) &#123; var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = &#x27;https://connect.facebook.net/zh_TW/sdk.js#xfbml=1&amp;version=v2.10&amp;appId=2046979441994437&#x27;; fjs.parentNode.insertBefore(js, fjs); &#125;(document, &#x27;script&#x27;, &#x27;facebook-jssdk&#x27;)); &#125;)(function($) &#123; var fbRoot; function saveFacebookRoot() &#123; if ($(&#x27;#fb-root&#x27;).length) &#123; fbRoot = $(&#x27;#fb-root&#x27;).detach(); &#125; &#125;; function restoreFacebookRoot() &#123; if (fbRoot != null) &#123; if ($(&#x27;#fb-root&#x27;).length) &#123; $(&#x27;#fb-root&#x27;).replaceWith(fbRoot); &#125; else &#123; $(&#x27;body&#x27;).append(fbRoot); &#125; &#125; if (typeof FB !== &quot;undefined&quot; &amp;&amp; FB !== null) &#123; // Instance of FacebookSDK FB.XFBML.parse(); &#125; &#125;; document.addEventListener(&#x27;turbolinks:request-start&#x27;, saveFacebookRoot) document.addEventListener(&#x27;turbolinks:load&#x27;, restoreFacebookRoot)&#125;(jQuery));&lt;/script&gt;","categories":[],"tags":[{"name":"Rails 5","slug":"Rails-5","permalink":"http://wualnz.com/tags/Rails-5/"},{"name":"API","slug":"API","permalink":"http://wualnz.com/tags/API/"}]},{"title":"你一定有聽過的Bower 前端套件管理工具","slug":"你一定有聽過的Bower-前端套件管理工具","date":"2017-11-05T22:21:35.000Z","updated":"2021-12-22T03:26:58.459Z","comments":true,"path":"/你一定有聽過的Bower-前端套件管理工具/","link":"","permalink":"http://wualnz.com/%E4%BD%A0%E4%B8%80%E5%AE%9A%E6%9C%89%E8%81%BD%E9%81%8E%E7%9A%84Bower-%E5%89%8D%E7%AB%AF%E5%A5%97%E4%BB%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/","excerpt":"","text":"你一定有聽過的 Bower 前端套件管理工具用Bower自動下載jQuery, Bootstrap等Libery，再與Gulp做串接 bower init後安裝的套件，會自動寫出到bower.json檔案。全自動化，讓簡單且重複的事交給Gulp &amp; Bower，把寶貴的時間拿來寫CODE吧！ 此文章會用到下列幾個套件 gulp-load-plugins 以$字號來簡略載入各套件，只對gulp開頭的套件有用 gulp-order 排載入的順序 main-bower-files 和Bower結合 gulp-concat 合併檔案 123456npm install -g bowercd project #進入專案資料夾bower init #bower初始化bower install &lt;package&gt;bower install jquerybower install bootstrap bower init 後會產生 bower.json檔 bower install &lt;package&gt; 會自動產生bower_components資料夾，裡面放的 是下載下來的外掛。 串接前端的Gulp自動化工具，整合需要用到main-bower-files的Gulp套件第一步，在Gulpfile.js require後，輸入npm install寫入package.json內12var mainBowerFiles = require(&#x27;main-bower-files&#x27;);npm install --save-dev main-bower-filesBower幫前端工程師下載套件 =&gt; 不用再花時間一個個手動抓整合到Gulp，將套件輸出到我們想要的資料夾 =&gt; 打gulp後自動跑全自動化！這就是為什麼需要整合，把簡單且重複的事交給電腦做吧！ 在package.json下多新增bower任務 1234gulp.task(&#x27;bower&#x27;, function() &#123; return gulp.src(mainBowerFiles()) .pipe(gulp.dest(&#x27;./.tmp/vendors&#x27;))&#125;); 再多新增一個任務叫vendorJs，最主要目的是輸出到public/vendors資料下之外，還需要賦予兩個任務：按照順序載入js、合併成一隻js檔。 照順序載入js：像jquery, bootstrap是需要按照順序載入js的，所以需要另外安裝套件order。 合併成一隻js檔：減少伺服器的request，讓伺服器負荷減輕，網站也能跑較快。 gulp.task(‘vendorJs’, [bower], function(){ return gulp.src([./.tmp/vendors/**/*.js]) .pipe($.order([ &apos;jquery.js&apos;, &apos;bootstrap.js&apos; ])) .pipe($.concat(vendors.js)) .pipe(gulp.dest(&apos;./public/js&apos;)) }) gulp.task(&#39;vendorJs&#39;, [&#39;bower&#39;], function(&#123;..&#125;)) 多加入了[bower]的參數，代表在vendorJs任務跑完前，必須要等bower跑完。因為bower任務就是為了把下載回來的套件輸出的.tmp/vendors資料夾，若還沒下載回來，vendorJs就讀取不到啦！所以一定要記得加上。 將vendorJs加入default監控任務default就不用額外設定bower任務了，因為vendorJs開跑前會先等bower寫完。 gulp.task(&apos;default&apos;, [&apos;vendorJs&apos;, &apos;browserSync&apos;, &apos;watch&apos;]) 輕鬆寫完腳本後，打上gulp便會自動產生囉！可以將固定專案常用的腳本上傳到git，或是給其他開發者使用。 #.gitinore 忽略 bower_components node_modules public 開發者下載回來，只要輸入npm install及bower install即會產生一樣的效果，快速又方便。 bower_components資料夾，想要重新命名若覺得bower install放套件資料夾「.bower_components」名字很醜，想另外取名的話其實是可以的哦！在專案資料夾根目錄下創建.bowerrc檔 touch .bowerrc創建後，在bowerrc裡加入以下程式碼1234.bowerrc&#123; &quot;directory&quot;: &quot;vendors/&quot; &#125;接著執行 bower install便會產生vendors資料夾囉。 參考網站 Bower官方","categories":[],"tags":[]},{"title":"GitPage 上$.getJSON讀取不到json，出現 404 ERROR","slug":"GitPage-上-getJSON讀取不到json，出現-404-ERROR","date":"2017-11-04T22:17:18.000Z","updated":"2021-12-22T03:26:58.453Z","comments":true,"path":"/GitPage-上-getJSON讀取不到json，出現-404-ERROR/","link":"","permalink":"http://wualnz.com/GitPage-%E4%B8%8A-getJSON%E8%AE%80%E5%8F%96%E4%B8%8D%E5%88%B0json%EF%BC%8C%E5%87%BA%E7%8F%BE-404-ERROR/","excerpt":"","text":"GitPage 上$.getJSON讀取不到json，出現 404 ERROR我將content.json檔放在Localhost測試正常後，才push到github，接著開啟GitPage，發現沒辦法實行AJAX功能，讀取不到我的content.json資料 Consolo.log顯示 Failed to load resource: the server responded with a status of 404 () 什麼原因造成的？ Github pages is loaded over https and your API request is over http, which is not allowed. You are serving the site over HTTPS but trying to load jQuery over HTTP. This is not allowed.除錯過程 檢查.gitinore是不是忽略到我的json檔 將路徑$.getJSON改成URL絕對路徑 $.getJSON(&#39;../data/content.json&#39;, function)把裡面的../data/content.json改成 https://hazelwu2.github.io/AjaxMasonryPhoto/data/content.json 重新更改路徑後，Gitpage就抓得到我的資料了。初步判斷應該是因為HTTPS，但上傳到github是http，導致無法拿到資料。 如果有問題、筆誤或寫錯，歡迎糾正我，謝謝 參考網站 這可憐的老兄遇到的問題和我一樣 CROS-anywhere Reading Json file from github pages server using javascript","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://wualnz.com/tags/Git/"},{"name":"Github Pages","slug":"Github-Pages","permalink":"http://wualnz.com/tags/Github-Pages/"}]},{"title":"Rails SEO-用Sitemap-generator快速設定sitemap","slug":"Rails-SEO-用Sitemap-generator快速設定sitemap","date":"2017-11-04T09:19:08.000Z","updated":"2021-12-22T03:26:58.456Z","comments":true,"path":"/Rails-SEO-用Sitemap-generator快速設定sitemap/","link":"","permalink":"http://wualnz.com/Rails-SEO-%E7%94%A8Sitemap-generator%E5%BF%AB%E9%80%9F%E8%A8%AD%E5%AE%9Asitemap/","excerpt":"","text":"Rails SEO-用Sitemap-generator快速設定sitemap如何用gem gitemap外掛，將Rails整體專案產出sitemap 123456789101112gem &#x27;sitemap_generator&#x27; # 在Gemfile加入此行bundle install # 安裝套件rake sitemap:install自動生成 APP/config/sitemap.rb# 開啟sitemap.rb，已自動生成好格式SitemapGenerator::Sitemap.create do# 必要設定default_hostSitemapGenerator::Sitemap.default_host = &quot;http://www.你的網站.com&quot;# 接下來就是自由設定你自己Style的map了!end 設定robot.txt，爬蟲能夠爬得到Sitemap在public/robot.txt輸入 1Sitemap: http://www.你的網站.com/sitemap.xml.gz 在本端產生sitemap.xml，測試路徑是否正確123rake sitemap:refresh:no_ping #測試，故不提交給搜尋引擎localhost:3000/sitemap.xml.gz #瀏覽器#自動下載下來後用瀏覽器重新開啟 測試沒問題了！Deploy 到 Heroku跑看看1234git add .git commit -am &#x27;Added sitemap to SEO&#x27;git push heroku masterheroku run sitemap:refresh Heroku傳回console.log訊息是有建立成功，但真的測試會發現找不到sitemap。原因出在Heroku採用臨時文件系統，需要找一個容器來裝檔案才行。以下是Heroku官網說明：關於Ephemeral filesystem。 Heroku 採用Ephemeral filesystem（臨時文件系統）當重新部署或動態管理時，導致資料會重新歸0During the dyno’s lifetime its running processes can use the filesystem as a temporary scratchpad, but no files that are written are visible to processes in any other dyno and any files written will be discarded the moment the dyno is stopped or restarted. For example, this occurs any time a dyno is replaced due to application deployment and approximately once a day as part of normal dyno management. 那就放在Amazon S3吧！ 寫入S3前，請先完成幾個步驟 1.註冊AWS會員，並登錄信用卡，才可以用Aws的免費額度。 2.開啟AWS S3的服務，建立一個Bucket 3.在本機環境設定先設好AWS相關的API帳密設定，接下來會用到，若沒設定好會出錯。 使用CarrierWave 上傳到 AWS S3Rails含有豐富的Gem世界，Sitemaps支援多種外掛上傳到遠端空間，包含以下幾鐘：FileAdapter、FogAdapter、S3Adapter、AwsSdkAdapter、WaveAdapter，參考頁面：官方頁面Supported Adapters藉由Gem CarrierWave來上傳到S3，請先安裝好CarrierWave的Gem 在sitemap.rb內修改 1234567891011121314151617181920212223require &#x27;carrierwave&#x27;require &#x27;sitemap_generator&#x27;SitemapGenerator::Sitemap.default_host = &quot;你的網址&quot;# 你的AWS S3空間網址，創建的bucket-nameSitemapGenerator::Sitemap.sitemaps_host = &quot;http://s3.amazonaws.com/你的bucket-name/&quot;# AWS S3 的bucket底下建立一個資料夾sitemapsSitemapGenerator::Sitemap.sitemaps_path = &#x27;sitemaps/&#x27;# 會放在heroku伺服器內的public/tmp資料架底下SitemapGenerator::Sitemap.public_path = &#x27;tmp/&#x27;# 使用WaveAdapter來上傳到AWS S3SitemapGenerator::Sitemap.adapter = SitemapGenerator::WaveAdapter.newSitemapGenerator::Sitemap.create do add &#x27;/about&#x27;, :changefreq =&gt; &#x27;monthly&#x27; add &#x27;/news&#x27;, :changefreq =&gt; &#x27;monthly&#x27; add &#x27;/article&#x27; Post.find_each do |post| add post_path(post.friendly_id), :lastmod =&gt; post.updated_at endend 新增home#controller，設定sitemap路徑 rails controller -g home 在home_controller.rb內設定 1234567def robots robots = File.read(Rails.root + &quot;config/robots.#&#123;Rails.env&#125;.txt&quot;) render :text =&gt; robots, :layout =&gt; false, :content_type =&gt; &quot;text/plain&quot;enddef sitemap redirect_to &#x27;https://s3-ap-northeast-1.amazonaws.com/你的bucket-name/sitemaps/sitemap.xml.gz&#x27;end 在routes設定路徑 12get &#x27;/sitemaps.xml.gz&#x27; =&gt; &#x27;home#sitemap&#x27;get &#x27;/robots.txt&#x27; =&gt; &#x27;home#robots&#x27; 再重新Deploy到heroku測試看看。 1234git add .git commit -am &#x27;Add home#controller &amp; Setting routes &amp; Sitemap use Wave Adapter&#x27;git push heroku masterheroku run sitemap:refresh 查看看你的AWS S3空間有沒有多出新的資料夾叫「sitemap」，有的話代表上傳成功囉！接著就是去Google Console提交你的Sitemap啦！ 更新robots.txt，上傳到heroku後未抓到更改後的版本。在production.rb上加入後重新Deploy到heroku，就抓得到新的版本囉 config.static_cache_control = &quot;public, max-age=2592000&quot; 指令介紹 rake sitemap:install 第一步安裝，會自動生成sitemap.rb在config目錄底下 rake sitemap:refresh 更新sitemap.xml.gz，並提交到搜尋引擎Google等 rake sitemap:refresh:no_ping 更新sitemap.xml.gz，但不提交到搜尋引擎（可在本機development環境下測試） sitemap:create 建立空白的sitemap，未設定自動提交到搜尋引擎 關於連結設定網址若是localhost:3000/welcome，則add就是設 ‘/welcome’若要使用welcome_path，這種helper需要加上 1SitemapGenerator::Interpreter.send :include, RoutingHelper 關於參數changefreq：這個頁面頻繁更新的次數，預設是一星期一次 &gt;可設定的參數 &gt;’always’, ‘hourly’, ‘daily’, ‘weekly’, ‘monthly’, ‘yearly’ or ‘never’ lastmod：告訴搜尋引擎，上次修改的時間和日期，預設是Time.nowhost：若不同網域主機需要用:host參數特別指定。預設為default_host所設定的網域priority： 排名URL優先權，範圍是0到1，預設為0.5 關於Post（循環文章）的Sitemap1234add &#x27;/article&#x27;Post.find_each do |post| add post_path(post.friendly_id), :lastmod =&gt; post.updated_atend 參考網站 Github Sitemap_generator#rails Rails SEO 第二步: 關於 sitemap Creating a sitemap with Ruby on Rails and uploading it to Amazon S3 Start Your SEO Right with Sitemaps on Rails Robots.txt file on Rails heroku app not updating","categories":[],"tags":[]},{"title":"Gulp 學習紀錄、常用指令","slug":"Gulp-學習紀錄、常用指令","date":"2017-11-03T22:23:55.000Z","updated":"2021-12-22T03:26:58.453Z","comments":true,"path":"/Gulp-學習紀錄、常用指令/","link":"","permalink":"http://wualnz.com/Gulp-%E5%AD%B8%E7%BF%92%E7%B4%80%E9%8C%84%E3%80%81%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","excerpt":"","text":"Gulp 學習紀錄、常用指令紀錄學習Gulp的歷程，及gulp常用的指令 第一次安裝Gulp npm install -g gulp npm init 在目錄下touch gulpfile.js npm install 外掛名稱 —save-dev 之後使用Gulp 移動到目錄後，npm init，創造package.json檔 貼上已設定的package.json npm install -l 自動安裝package.json列表上的外掛 複製已設定好的腳本gulpfile.js 常用外掛清單 SASS/SCSS編譯成CSS gulp-sass CSS 壓縮迷你化 gulp-minify-css 遇錯時不會中斷 gulp-plumber 後處理器 gulp-postcss 根據不同瀏覽器版本，自動補上前綴詞 autoprefixer 不用寫一大堆的變數，用$取代 gulp-load-plugins JavaScript ES6 編譯 gulp-babel 壓縮合併程式碼後可以找出原始頭是誰 gulp-sourcemaps 合併程式碼 gulp-concat 外部載入的套件需要排序 gulp-order(對jquery,bootstrap常載入的是必備品) Web Server，即時預覽檔案，安裝後即不用裝liverRoad ：Browser Sync Gulp 串接 Bower 工具 main-bower-files JavaScript 壓縮工具 gulp-uglify gulp 流程控制 minimist 設定任務，可加入判斷式 gulp-if 在學習Gulp時遇到的障礙在安裝gulp時出現以下訊息 npm WARN deprecated minimatch@2.0.10: Please update to minimatch 3.0.2 or higher to avoid a RegExp DoS issue npm WARN已棄用minimatch@2.0.10：請更新至最低3.0.2或更高版本以避免RegExp DoS問題 解決辦法：npm install minimatch@“3.0.2”或著不用理他也沒有關係的 Gulp 常用指令Npm init 輸入npm init，進行這個空白專案的初始化，同時也會生成一個基本的package.json，這個package.json非常重要，因為它定義了這個 Node.js 專案裏頭會需要用到的模組與套件 ( Node modules )，輸入npm init之後，基本上可以填寫一些名稱或描述，不然其實也可以直接一直 enter 按下去就會建立完成。 touch gulpfile.js 建立gulpfile.js，要寫的任務、套件全部都是寫在這裡面 npm install 會安裝專案內的 package.json 所列出的需要元件。 npm install -l 把package.json腳本設定好，建立新專案時輸入即可依照package.json上列出的套件，全部自動化安裝完 npm 相關指令整理 http://dreamerslab.com/blog/tw/npm-basic-commands/ 跟著教學操作的youtube Reference | 參考網站 http://www.oxxostudio.tw/articles/201503/gulp-install-webserver.html https://gulpjs.com/ https://987.tw/gulpru-men-zhi-nan/ http://www.gulpjs.com.cn/docs/getting-started/ https://ithelp.ithome.com.tw/articles/10185565","categories":[],"tags":[]},{"title":"教你如何快速設定綁定網域在 Byehost 虛擬主機商","slug":"教你如何快速設定綁定網域在 Byehost 虛擬主機商","date":"2017-08-25T09:34:27.000Z","updated":"2021-12-22T03:26:58.461Z","comments":true,"path":"/教你如何快速設定綁定網域在 Byehost 虛擬主機商/","link":"","permalink":"http://wualnz.com/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%A8%AD%E5%AE%9A%E7%B6%81%E5%AE%9A%E7%B6%B2%E5%9F%9F%E5%9C%A8%20Byehost%20%E8%99%9B%E6%93%AC%E4%B8%BB%E6%A9%9F%E5%95%86/","excerpt":"前言申請Byethost免費虛擬主機架站，綁定自己購買的網址其實研究了有陣子，第一次架站新手，對DNS、子網域很不熟悉。故記錄起來以防之後有天會忘記XD。","text":"前言申請Byethost免費虛擬主機架站，綁定自己購買的網址其實研究了有陣子，第一次架站新手，對DNS、子網域很不熟悉。故記錄起來以防之後有天會忘記XD。 申請Byehost虛擬空間首先先到Byethost申請虛擬空間，會得到以下的資料及帳號密碼 綁定網址，以Godaddy示範不想要用Byethost主機預設網址的話？像是http://你申請的帳號.byethost7.com希望別人能直接輸入自己買的網址後，即轉到wordpress部落格或自架網站而不是醜醜的虛擬主機商贈送的 http://你的帳號.byethost7.com 我是購買Godaddy的網址，以下就用Godaddy來示範操作。前往Godaddy 知名主機商 進入Godaddy後台，設定DNS買好自己中意的網址後，進入Godaddy的後台→網域管理員→旗下的DNS→輸入ns1.byet.org、ns1.byet.org將自己的網址透過 設定DNS，告訴老爹說你的DNS主機在哪？（自然就是你的虛擬主機空間取得資料） 還記得剛剛在Byethost註冊的帳號密碼吧？現在要登入Byethost的cPanel後台，點選Aliases (Parked Domains)選項 接著，Domain Name輸入你已經申請好的網址Park onto則是選一開始Byethost主機商預設的網址設定完後就打工告成啦！","categories":[],"tags":[{"name":"byethost","slug":"byethost","permalink":"http://wualnz.com/tags/byethost/"},{"name":"wordpress","slug":"wordpress","permalink":"http://wualnz.com/tags/wordpress/"}]},{"title":"安裝Edius時，出現ERROR：Error launching installer解決辦法","slug":"安裝Edius時，出現ERROR：Error-launching-installer解決辦法","date":"2017-07-08T09:55:36.000Z","updated":"2021-12-22T03:26:58.460Z","comments":true,"path":"/安裝Edius時，出現ERROR：Error-launching-installer解決辦法/","link":"","permalink":"http://wualnz.com/%E5%AE%89%E8%A3%9DEdius%E6%99%82%EF%BC%8C%E5%87%BA%E7%8F%BEERROR%EF%BC%9AError-launching-installer%E8%A7%A3%E6%B1%BA%E8%BE%A6%E6%B3%95/","excerpt":"前言前陣子安裝Edius時發生了錯誤Error launching installer，爬文Google搜尋，並記錄下來解決方法。 問題安裝Error launching installer時出現錯誤訊息Error launching installer","text":"前言前陣子安裝Edius時發生了錯誤Error launching installer，爬文Google搜尋，並記錄下來解決方法。 問題安裝Error launching installer時出現錯誤訊息Error launching installer 解決辦法 把路徑換成別的，把資料夾名稱及含有路徑全改成英文，再重新啟動就可以了 原因 圖片上資料夾名稱寫edius 7.5軟件，”軟件”為簡體字，導致資料路徑上有特殊符碼(罕見中文或全碼符號)，使得程式無法執行。 簡單的解法是把安裝程式移到其他資料夾，如 C:\\ ，或是重新命名資料夾名稱，即可啟動執行檔程式進行安裝囉","categories":[],"tags":[{"name":"Edius","slug":"Edius","permalink":"http://wualnz.com/tags/Edius/"}]},{"title":"大部分開發者都是使用MAC OS系統？","slug":"大部分開發者都是使用MAC OS系統？","date":"2017-07-04T05:33:11.000Z","updated":"2021-12-22T03:26:58.459Z","comments":true,"path":"/大部分開發者都是使用MAC OS系統？/","link":"","permalink":"http://wualnz.com/%E5%A4%A7%E9%83%A8%E5%88%86%E9%96%8B%E7%99%BC%E8%80%85%E9%83%BD%E6%98%AF%E4%BD%BF%E7%94%A8MAC%20OS%E7%B3%BB%E7%B5%B1%EF%BC%9F/","excerpt":"","text":"大部分開發者都是使用MAC OS系統？ 相信這是大家都會疑問的問題，我到底要不要花錢下去買Macbook筆電？我個人學Website時是先從Windows起步的，約學習快一年的時間但當遇到許多奇怪的問題，對Unix不太熟，常卡在莫名其妙的問題上，浪費了好多時間。因為相信「時間 &gt; 金錢」的價值觀，最後敗下去買 Macbook Pro 2017。 警告：以下為前輩較為主觀的意見。MAC的終端機方便很多！WINDOWS會鎖住CMD很多功能變成要下載好多好多一大堆相容性軟體，出了問題又要花時間GOOGLE找解答有時候還找不到解答=_=，光是這點會讓你節省不少時間 Mac 與常見伺服器(Ubuntu) 同屬 unix like這會在許多指令、環境上的建制有許多相似之處在部屬時會因為與伺服器端相似度高所以問題也會較少些喔 開發工具多樣性Mac 版本的開發工具很豐富有許多工具是只有 MacOS 才有或者是先有 MacOS 版本後來才轉移到其他系統 案例：Dash, Affinity 系列, Sketch, iTerm Macbook CP 值高價格偏高是事實，硬體規格看似也低於同價格的 Windows 筆電，但用兩年以上品質就會有差異 電池耐久是實際 8hr 以上 螢幕顯色力高，可以作為網頁設計的基準 輕便 二手販售Macbook仍還能賣個不錯的價格，可以到Mac二手 PTT版 逛看看。","categories":[],"tags":[{"name":"mac","slug":"mac","permalink":"http://wualnz.com/tags/mac/"},{"name":"developer","slug":"developer","permalink":"http://wualnz.com/tags/developer/"}]},{"title":"Navigation固定上方，往下瀏覽頁面時縮小效果","slug":"Navigation固定上方，往下瀏覽頁面時縮小效果","date":"2017-06-30T09:57:58.000Z","updated":"2021-12-22T03:26:58.454Z","comments":true,"path":"/Navigation固定上方，往下瀏覽頁面時縮小效果/","link":"","permalink":"http://wualnz.com/Navigation%E5%9B%BA%E5%AE%9A%E4%B8%8A%E6%96%B9%EF%BC%8C%E5%BE%80%E4%B8%8B%E7%80%8F%E8%A6%BD%E9%A0%81%E9%9D%A2%E6%99%82%E7%B8%AE%E5%B0%8F%E6%95%88%E6%9E%9C/","excerpt":"此篇講述什麼是Web Sticky效果，固定nav及縮小，及紀錄遇到的困難、改良後的JavaScript寫法。將會使用到CSS、JavaScript。 什麼是Sticky？固定Nav後會隨著捲軸拉下去而縮小","text":"此篇講述什麼是Web Sticky效果，固定nav及縮小，及紀錄遇到的困難、改良後的JavaScript寫法。將會使用到CSS、JavaScript。 什麼是Sticky？固定Nav後會隨著捲軸拉下去而縮小請點我預覽DEMO效果 HTML架構： 流程圖 錯誤示範 CodePen的錯誤示範 超新手時期的我居然這樣寫XDD，程式碼真的是又臭又長天啊，把JS和CSS全部寫在一起了=_= 千萬不要這麼做，把CSS, JS分離，日後才好維護程式碼！ 改良後Js寫法將CSS分歸類在JS要新增的CSS CLASS裡，JS只新增CLASS一目瞭然！12345678 $(function()&#123; $(window).scroll(function()&#123; if($(window).scrolltop() &gt; 0) $(‘#header’).addclass(‘mini’); else $(‘#header’).removeclass(‘mini’); &#125;);&#125;);","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://wualnz.com/tags/css/"},{"name":"js","slug":"js","permalink":"http://wualnz.com/tags/js/"}]}]}